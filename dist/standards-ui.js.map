{"version":3,"file":"standards-ui.js","sources":["../src/components/base-component.js","../src/components/ds-page.js","../src/components/ds-row.js","../src/components/ds-col.js","../src/components/ds-text-input.js","../src/components/ds-button.js","../src/components/ds-radio.js","../src/components/ds-checkbox.js","../src/components/ds-textarea.js","../src/components/ds-select.js","../src/components/ds-option.js","../src/components/ds-label.js","../src/components/ds-fieldset.js","../src/components/ds-legend.js","../src/components/ds-form.js","../src/init.js","../src/index.js"],"sourcesContent":["/**\n * @file base-component.js\n * @summary Base class for design system Web Components.\n * @description\n * Provides common functionality for all design system components including\n * shadow DOM setup, event handling, and attribute management.\n *\n * @abstract\n */\nclass BaseComponent extends HTMLElement {\n    /**\n     * Creates a new base component.\n     * @param {Object} options - Configuration options\n     * @param {string} options.template - HTML template string\n     * @param {string} options.display - CSS display value for :host\n     * @param {Array<string>} options.observedAttributes - Attributes to observe\n     * @param {Object} options.attributeHandlers - Attribute change handlers\n     * @param {Array<string>} options.events - Events to re-dispatch\n     * @param {string} options.targetSelector - CSS selector for the target element\n     */\n    constructor(options = {}) {\n        super();\n        // ARIA config defaults\n        const ariaConfig = options.ariaConfig || {};\n        this.ariaConfig = {\n            requiredAriaAttributes: ariaConfig.requiredAriaAttributes || [],\n            staticAriaAttributes: ariaConfig.staticAriaAttributes || {},\n            dynamicAriaAttributes: ariaConfig.dynamicAriaAttributes || [],\n            ...ariaConfig\n        };\n\n        // Merge ARIA attributes into observedAttributes\n        const ariaObserved = [\n            ...this.ariaConfig.dynamicAriaAttributes || [],\n            ...this.ariaConfig.requiredAriaAttributes || []\n        ];\n        this.options = {\n            display: options.display || 'block',\n            observedAttributes: Array.from(new Set([...(options.observedAttributes || []), ...ariaObserved])),\n            attributeHandlers: { ...(options.attributeHandlers || {}) },\n            events: options.events || [],\n            targetSelector: options.targetSelector || null,\n            template: options.template,\n        };\n        \n        // Add ARIA attribute handlers\n        this.addAriaAttributeHandlers();\n        this.setupShadowDOM();\n        this.setupARIA();\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Sets up the shadow DOM with the provided template.\n     */\n    setupShadowDOM() {\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                :host {\n                    display: ${this.options.display};\n                }\n            </style>\n            ${this.options.template || '<slot></slot>'}\n        `;\n        \n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to target element if selector is provided\n        if (this.options.targetSelector) {\n            this.targetElement = shadowRoot.querySelector(this.options.targetSelector);\n        }\n    }\n    \n    /**\n     * Sets up event listeners to re-dispatch events from the host element.\n     */\n    setupEventListeners() {\n        if (!this.options.events.length || !this.targetElement) return;\n        \n        this.options.events.forEach(eventType => {\n            this.targetElement.addEventListener(eventType, (event) => {\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                // Copy relevant properties for form events\n                if (eventType === 'input' || eventType === 'change') {\n                    // Don't try to set read-only properties in test environment\n                    try {\n                        Object.defineProperty(newEvent, 'target', { value: this, writable: false });\n                        Object.defineProperty(newEvent, 'currentTarget', { value: this, writable: false });\n                    } catch (e) {\n                        // Ignore errors in test environment where properties are read-only\n                    }\n                }\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Called when one of the component's observed attributes is added, removed, or changed.\n     * @param {string} name - The name of the attribute that changed.\n     * @param {string|null} oldValue - The attribute's old value.\n     * @param {string|null} newValue - The attribute's new value.\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        // Handle ARIA attributes first\n        if ((this.ariaConfig.dynamicAriaAttributes || []).includes(name) || (this.ariaConfig.requiredAriaAttributes || []).includes(name)) {\n            // Check if this is a static ARIA attribute and if so, only warn once and skip validation\n            if (this.ariaConfig.staticAriaAttributes && this.ariaConfig.staticAriaAttributes[name]) {\n                const handler = BaseComponent.createAriaAttributeHandler(name);\n                handler.call(this, newValue);\n                // Do not call validateAndWarnARIA for static attributes\n                return;\n            }\n            const handler = BaseComponent.createAriaAttributeHandler(name);\n            handler.call(this, newValue);\n            // Validate ARIA attributes after they're applied\n            this.validateAndWarnARIA(name, newValue);\n        }\n        \n        // Handle other attributes\n        const handler = this.options.attributeHandlers[name];\n        if (handler) {\n            handler.call(this, newValue);\n        }\n    }\n    \n    /**\n     * Called when the element is connected to the DOM.\n     * Applies initial attributes and ensures styles are applied.\n     */\n    connectedCallback() {\n        // Set display style directly on the host (safe here)\n        this.style.display = this.options.display;\n        // Force a reflow to ensure styles are applied\n        this.offsetHeight;\n        // Apply initial attributes\n        this.options.observedAttributes.forEach(attr => {\n            this.attributeChangedCallback(attr, null, this.getAttribute(attr));\n        });\n        // Delay ARIA validation to ensure text content is available\n        setTimeout(() => {\n            this.warnMissingARIA();\n        }, 0);\n    }\n    \n    /**\n     * Creates a standard attribute handler for boolean attributes.\n     * @param {string} propertyName - The property name to set\n     * @param {string} attributeName - The attribute name to check\n     * @returns {Function} The attribute handler function\n     */\n    static createBooleanHandler(propertyName, attributeName) {\n        return function(newValue) {\n            if (this.targetElement) {\n                this.targetElement[propertyName] = this.hasAttribute(attributeName);\n            }\n        };\n    }\n    \n    /**\n     * Creates a standard attribute handler for string attributes.\n     * @param {string} propertyName - The property name to set\n     * @param {string} defaultValue - Default value if attribute is null\n     * @returns {Function} The attribute handler function\n     */\n    static createStringHandler(propertyName, defaultValue = '') {\n        return function(newValue) {\n            if (this.targetElement) {\n                this.targetElement[propertyName] = newValue || defaultValue;\n            }\n        };\n    }\n    \n    /**\n     * Creates a standard attribute handler for setAttribute.\n     * @param {string} attributeName - The attribute name to set\n     * @returns {Function} The attribute handler function\n     */\n    static createSetAttributeHandler(attributeName) {\n        return function(newValue) {\n            if (this.targetElement) {\n                if (newValue === null) {\n                    this.targetElement.removeAttribute(attributeName);\n                } else {\n                    this.targetElement.setAttribute(attributeName, newValue);\n                }\n            }\n        };\n    }\n    \n    /**\n     * Creates a standard getter/setter pair for a property.\n     * @param {string} propertyName - The property name\n     * @returns {Object} Object with get and set functions\n     */\n    createPropertyAccessor(propertyName) {\n        return {\n            get: () => this.targetElement?.[propertyName],\n            set: (val) => {\n                if (this.targetElement) {\n                    this.targetElement[propertyName] = val;\n                }\n            }\n        };\n    }\n\n    setupARIA() {\n        // Apply static ARIA attributes\n        if (this.targetElement && this.ariaConfig.staticAriaAttributes) {\n            Object.entries(this.ariaConfig.staticAriaAttributes).forEach(([attr, value]) => {\n                this.targetElement.setAttribute(attr, value);\n            });\n        }\n    }\n\n    addAriaAttributeHandlers() {\n        if (!this.options.attributeHandlers) this.options.attributeHandlers = {};\n        const allAria = [\n            ...(this.ariaConfig.dynamicAriaAttributes || []),\n            ...(this.ariaConfig.requiredAriaAttributes || [])\n        ];\n        allAria.forEach(attr => {\n            if (!this.options.attributeHandlers[attr]) {\n                this.options.attributeHandlers[attr] = BaseComponent.createAriaAttributeHandler(attr);\n            }\n        });\n    }\n\n    static createAriaAttributeHandler(attributeName) {\n        return function(newValue) {\n            // Ensure targetElement is available\n            if (!this.targetElement) {\n                this.targetElement = this.shadowRoot?.querySelector(this.options.targetSelector);\n            }\n            \n            if (this.targetElement) {\n                // Don't override static attributes\n                if (this.ariaConfig.staticAriaAttributes && this.ariaConfig.staticAriaAttributes[attributeName]) {\n                    const staticValue = this.ariaConfig.staticAriaAttributes[attributeName];\n                    // Only warn if trying to set a different value\n                    if (newValue !== null && newValue !== staticValue) {\n                        console.warn(`[${this.constructor.name}] Cannot override static ARIA attribute '${attributeName}' with value '${newValue}'. Static value '${staticValue}' will be preserved.`);\n                    }\n                    return;\n                }\n                \n                if (newValue === null || newValue === undefined) {\n                    this.targetElement.removeAttribute(attributeName);\n                } else {\n                    this.targetElement.setAttribute(attributeName, newValue);\n                }\n            }\n        };\n    }\n\n    static createAriaPropertyHandler(propertyName) {\n        return {\n            get() { return this.targetElement?.getAttribute(propertyName); },\n            set(val) {\n                if (this.targetElement) {\n                    if (val === null || val === undefined) {\n                        this.targetElement.removeAttribute(propertyName);\n                    } else {\n                        this.targetElement.setAttribute(propertyName, val);\n                    }\n                }\n            }\n        };\n    }\n\n    static createAriaStateHandler(stateName) {\n        return function(newValue) {\n            if (this.targetElement) {\n                if (newValue === null || newValue === undefined) {\n                    this.targetElement.removeAttribute(stateName);\n                } else {\n                    this.targetElement.setAttribute(stateName, newValue);\n                }\n            }\n        };\n    }\n\n    validateAriaTokens(attributeName, value, allowedTokens) {\n        if (!allowedTokens.includes(value)) {\n            return `Invalid value '${value}' for ${attributeName}. Allowed: ${allowedTokens.join(', ')}`;\n        }\n        return null;\n    }\n\n    checkAriaReferences(attributeName, value) {\n        if (!value) return null;\n        const ids = value.split(/\\s+/);\n        for (const id of ids) {\n            if (!document.getElementById(id)) {\n                return `Element referenced by ${attributeName} ('${id}') does not exist in the document.`;\n            }\n        }\n        return null;\n    }\n\n    validateARIA() {\n        const errors = [];\n        // Check required ARIA attributes\n        (this.ariaConfig.requiredAriaAttributes || []).forEach(attr => {\n            if (!this.hasAttribute(attr) && !this.targetElement?.hasAttribute(attr)) {\n                errors.push(`Missing required ARIA attribute: ${attr}`);\n            }\n        });\n        // Validate ARIA tokens (if any)\n        if (this.ariaConfig.tokenValidation) {\n            Object.entries(this.ariaConfig.tokenValidation).forEach(([attr, allowedTokens]) => {\n                const val = this.getAttribute(attr) || this.targetElement?.getAttribute(attr);\n                if (val && !allowedTokens.includes(val)) {\n                    errors.push(this.validateAriaTokens(attr, val, allowedTokens));\n                }\n            });\n        }\n        // Validate ARIA references\n        (this.ariaConfig.referenceAttributes || []).forEach(attr => {\n            const val = this.getAttribute(attr) || this.targetElement?.getAttribute(attr);\n            const refError = this.checkAriaReferences(attr, val);\n            if (refError) errors.push(refError);\n        });\n        return errors;\n    }\n\n    warnMissingARIA() {\n        const errors = this.validateARIA();\n        errors.forEach(msg => {\n            console.warn(`[${this.constructor.name}] ARIA validation: ${msg}`);\n        });\n    }\n\n    /**\n     * Defines which attributes the component observes for changes.\n     * @returns {Array<string>} An array of attribute names to observe.\n     */\n    static get observedAttributes() {\n        // This will be overridden by subclasses, but provide a default\n        // that includes common ARIA attributes\n        return [\n            'aria-label',\n            'aria-describedby',\n            'aria-pressed',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-controls',\n            'aria-current',\n            'aria-live',\n            'aria-atomic',\n            'aria-relevant',\n            'aria-busy',\n            'aria-dropeffect',\n            'aria-grabbed',\n            'aria-activedescendant',\n            'aria-colcount',\n            'aria-colindex',\n            'aria-colspan',\n            'aria-level',\n            'aria-multiline',\n            'aria-multiselectable',\n            'aria-orientation',\n            'aria-readonly',\n            'aria-required',\n            'aria-rowcount',\n            'aria-rowindex',\n            'aria-rowspan',\n            'aria-selected',\n            'aria-setsize',\n            'aria-sort',\n            'aria-valuemax',\n            'aria-valuemin',\n            'aria-valuenow',\n            'aria-valuetext'\n        ];\n    }\n\n    /**\n     * Validates and warns about ARIA issues for a specific attribute\n     * @param {string} attributeName - The name of the attribute being validated\n     * @param {string|null} value - The value of the attribute\n     */\n    validateAndWarnARIA(attributeName, value) {\n        const errors = [];\n        \n        // Validate token values\n        if (this.ariaConfig.tokenValidation && this.ariaConfig.tokenValidation[attributeName]) {\n            const allowedTokens = this.ariaConfig.tokenValidation[attributeName];\n            if (value && !allowedTokens.includes(value)) {\n                errors.push(this.validateAriaTokens(attributeName, value, allowedTokens));\n            }\n        }\n        \n        // Validate references\n        if ((this.ariaConfig.referenceAttributes || []).includes(attributeName)) {\n            const refError = this.checkAriaReferences(attributeName, value);\n            if (refError) errors.push(refError);\n        }\n        \n        // Warn about any errors\n        errors.forEach(msg => {\n            console.warn(`[${this.constructor.name}] ARIA validation: ${msg}`);\n        });\n    }\n}\n\n// Export for use in other components\nexport default BaseComponent;","/**\n * @file ds-page.js\n * @summary A custom Web Component that provides a consistent wrapper around application content.\n * @description\n * The `ds-page` component handles page-level layout and margins, providing a consistent\n * foundation for application pages. It uses CSS custom properties for customization\n * and ensures proper viewport handling.\n *\n * @element ds-page\n * @extends BaseComponent\n *\n * @slot - Renders the main page content inside the page container.\n *\n * @example\n * <!-- Basic page wrapper -->\n * <ds-page>\n *   <h1>Welcome to My App</h1>\n *   <p>This content is wrapped in a consistent page layout.</p>\n * </ds-page>\n *\n * @example\n * <!-- Page with nested layout components -->\n * <ds-page>\n *   <ds-row justify-content=\"space-between\" align-items=\"center\">\n *     <ds-col>\n *       <h1>Page Title</h1>\n *     </ds-col>\n *     <ds-col>\n *       <ds-button>Action</ds-button>\n *     </ds-col>\n *   </ds-row>\n *   <ds-row>\n *     <ds-col>\n *       <p>Main content area</p>\n *     </ds-col>\n *   </ds-row>\n * </ds-page>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsPage extends BaseComponent {\n    constructor() {\n        super();\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    width: 100%;\n                    min-height: 100vh; /* Ensures it takes full viewport height */\n                    box-sizing: border-box; /* Include padding/border in element's total width/height */\n                }\n                \n                .page-container {\n                    display: flex; /* Makes the main element a flex container for its children */\n                    flex-direction: column; /* Stacks children vertically by default */\n                    width: 100%;\n                    padding: var(--ds-spacing-page-padding, 20px); /* Default padding, can be overridden by CSS variable */\n                    margin: 0 auto; /* Center content if width is limited */\n                    max-width: var(--ds-page-max-width, 1200px); /* Optional max-width for content */\n                }\n            </style>\n            <main class=\"page-container\">\n                <slot></slot>\n            </main>\n        `;\n        \n        // Set up the component with template and no observed attributes\n        this.setupComponent(template, []);\n        \n        // Store reference to the internal container\n        this.pageContainer = this.shadowRoot.querySelector('.page-container');\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-page', DsPage);\n\n// Export for use in other modules\nexport default DsPage; ","/**\n * @file ds-row.js\n * @summary A custom Web Component for a Flexbox container for horizontal layouts.\n * @description\n * The `ds-row` component provides a flexible container for arranging items in a row.\n * It leverages CSS Flexbox properties, exposing them as attributes for easy configuration.\n *\n * @element ds-row\n * @extends BaseComponent\n *\n * @attr {string} justify-content - Aligns content along the main axis. Accepts CSS `justify-content` values (e.g., `flex-start`, `center`, `space-between`).\n * @attr {string} align-items - Aligns content along the cross axis. Accepts CSS `align-items` values (e.g., `stretch`, `center`, `flex-end`).\n * @attr {string} gap - Sets the spacing between flex items (e.g., \"16px\", \"1rem\").\n * @attr {boolean} wrap - If present, sets `flex-wrap: wrap;` allowing items to wrap onto multiple lines.\n *\n * @slot - Renders child elements inside the row container.\n *\n * @example\n * <!-- A basic row with default alignment and spacing -->\n * <ds-row>\n * <div>Item 1</div>\n * <div>Item 2</div>\n * </ds-row>\n *\n * @example\n * <!-- A row with items centered and a specific gap -->\n * <ds-row justify-content=\"center\" align-items=\"center\" gap=\"20px\">\n * <div>Centered Item A</div>\n * <div>Centered Item B</div>\n * </ds-row>\n *\n * @example\n * <!-- A wrapping row with space between items -->\n * <ds-row justify-content=\"space-between\" wrap>\n * <div>Long Item 1</div>\n * <div>Item 2</div>\n * <div>Another Item 3</div>\n * <div>Short Item 4</div>\n * </ds-row>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsRow extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-row (none required, but allow aria-label/aria-describedby)\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                :host {\n                    display: block; /* Custom elements are inline by default */\n                }\n                .row-container {\n                    display: flex;\n                    flex-direction: row;\n                }\n            </style>\n            <div class=\"row-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: '.row-container',\n            ariaConfig,\n            events: [],\n            observedAttributes: ['justify-content', 'align-items', 'gap', 'wrap']\n        });\n        \n        this.rowContainer = this.shadowRoot.querySelector('.row-container');\n    }\n    \n    static get observedAttributes() {\n        return ['justify-content', 'align-items', 'gap', 'wrap', 'aria-label', 'aria-describedby'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            case 'justify-content':\n                this.rowContainer.style.justifyContent = newValue || '';\n                break;\n            case 'align-items':\n                this.rowContainer.style.alignItems = newValue || '';\n                break;\n            case 'gap':\n                this.rowContainer.style.gap = newValue || '';\n                break;\n            case 'wrap':\n                if (this.hasAttribute('wrap')) {\n                    this.rowContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.rowContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.rowContainer.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.rowContainer.removeAttribute('aria-label');\n        } else {\n            this.rowContainer.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.rowContainer.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.rowContainer.removeAttribute('aria-describedby');\n        } else {\n            this.rowContainer.setAttribute('aria-describedby', val);\n        }\n    }\n    // Optionally override validateARIA if needed\n}\n\n// Register the custom element\ncustomElements.define('ds-row', DsRow);\n\n// Export for use in other modules\nexport default DsRow; ","/**\n * @file ds-col.js\n * @summary A custom Web Component for a Flexbox item that can also act as a Flexbox container for vertical layouts.\n * @description\n * The `ds-col` component serves dual purposes: as a flex item within a row and as a flex container for its own children.\n * It exposes both flex item properties (for positioning within parent rows) and flex container properties (for its own children).\n *\n * @element ds-col\n * @extends BaseComponent\n *\n * @attr {string} flex-grow - Controls how much the item can grow relative to other flex items. Accepts CSS `flex-grow` values.\n * @attr {string} flex-shrink - Controls how much the item can shrink relative to other flex items. Accepts CSS `flex-shrink` values.\n * @attr {string} flex-basis - Sets the initial main size of the flex item. Accepts CSS `flex-basis` values (e.g., \"200px\", \"50%\").\n * @attr {string} align-self - Overrides the parent's align-items value for this item. Accepts CSS `align-self` values.\n * @attr {string} order - Controls the order of the flex item. Accepts CSS `order` values.\n * @attr {string} justify-content - Aligns content along the main axis of the column. Accepts CSS `justify-content` values.\n * @attr {string} align-items - Aligns content along the cross axis of the column. Accepts CSS `align-items` values.\n * @attr {string} gap - Sets the spacing between flex items within the column. Accepts CSS `gap` values.\n * @attr {boolean} wrap - If present, allows items within the column to wrap onto multiple lines.\n *\n * @slot - Renders child elements inside the column container.\n *\n * @example\n * <!-- A basic column with default flex properties -->\n * <ds-row>\n *   <ds-col>\n *     <div>Content 1</div>\n *     <div>Content 2</div>\n *   </ds-col>\n * </ds-row>\n *\n * @example\n * <!-- A column that takes up 2/3 of available space with centered content -->\n * <ds-row>\n *   <ds-col flex-grow=\"2\" justify-content=\"center\" align-items=\"center\">\n *     <div>Main Content</div>\n *   </ds-col>\n *   <ds-col flex-grow=\"1\">\n *     <div>Sidebar</div>\n *   </ds-col>\n * </ds-row>\n *\n * @example\n * <!-- A column with specific width and gap between items -->\n * <ds-col flex-basis=\"300px\" gap=\"16px\">\n *   <div>Item A</div>\n *   <div>Item B</div>\n *   <div>Item C</div>\n * </ds-col>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsCol extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-col (none required, but allow aria-label/aria-describedby)\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                :host {\n                    display: block; /* Custom elements are inline by default */\n                }\n                .col-container {\n                    display: flex; /* Make it a flex container for its own children */\n                    flex-direction: column;\n                }\n            </style>\n            <div class=\"col-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: '.col-container',\n            ariaConfig,\n            events: [],\n            observedAttributes: [\n                'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',\n                'justify-content', 'align-items', 'gap', 'wrap',\n                'aria-label', 'aria-describedby'\n            ]\n        });\n        \n        this.colContainer = this.shadowRoot.querySelector('.col-container');\n    }\n    \n    static get observedAttributes() {\n        return [\n            'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',\n            'justify-content', 'align-items', 'gap', 'wrap',\n            'aria-label', 'aria-describedby'\n        ];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            // Flex Item Properties (applied to :host)\n            case 'flex-grow':\n                this.style.flexGrow = newValue || '';\n                break;\n            case 'flex-shrink':\n                this.style.flexShrink = newValue || '';\n                break;\n            case 'flex-basis':\n                this.style.flexBasis = newValue || '';\n                break;\n            case 'align-self':\n                this.style.alignSelf = newValue || '';\n                break;\n            case 'order':\n                this.style.order = newValue || '';\n                break;\n            // Flex Container Properties (applied to .col-container)\n            case 'justify-content':\n                this.colContainer.style.justifyContent = newValue || '';\n                break;\n            case 'align-items':\n                this.colContainer.style.alignItems = newValue || '';\n                break;\n            case 'gap':\n                this.colContainer.style.gap = newValue || '';\n                break;\n            case 'wrap':\n                if (this.hasAttribute('wrap')) {\n                    this.colContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.colContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.colContainer.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.colContainer.removeAttribute('aria-label');\n        } else {\n            this.colContainer.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.colContainer.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.colContainer.removeAttribute('aria-describedby');\n        } else {\n            this.colContainer.setAttribute('aria-describedby', val);\n        }\n    }\n    // Optionally override validateARIA if needed\n}\n\n// Register the custom element\ncustomElements.define('ds-col', DsCol);\n\n// Export for use in other modules\nexport default DsCol; ","/**\n * @file ds-text-input.js\n * @summary A custom Web Component that wraps a native `<input>` element for text-based inputs.\n * @description\n * The `ds-text-input` component provides a styled and functional text input field.\n * It mirrors common `<input>` attributes and properties, making it easy to use\n * within forms while leveraging the design system's styling.\n *\n * @element ds-text-input\n * @extends BaseComponent\n *\n * @attr {string} [type=\"text\"] - The type of input (e.g., `text`, `email`, `password`, `number`, `tel`, `url`, `search`).\n * @attr {string} value - The current value of the input.\n * @attr {string} placeholder - A hint to the user of what can be entered in the input.\n * @attr {boolean} disabled - If present, the input cannot be interacted with.\n * @attr {boolean} readonly - If present, the input cannot be modified by the user.\n * @attr {boolean} required - If present, the input must have a value before form submission.\n * @attr {string} name - The name of the input, used when submitting form data.\n * @attr {string} id - A unique identifier for the input, useful for associating with labels.\n * @attr {string} [aria-label] - Defines a string value that labels the current element for accessibility purposes.\n *\n * @property {string} value - Gets or sets the current value of the input.\n * @property {string} type - Gets or sets the type of the input.\n * @property {boolean} disabled - Gets or sets the disabled state of the input.\n * @property {boolean} readonly - Gets or sets the readonly state of the input.\n * @property {boolean} required - Gets or sets the required state of the input.\n *\n * @fires input - Fired when the value of the input changes.\n * @fires change - Fired when the value of the input is committed.\n * @fires focus - Fired when the input receives focus.\n * @fires blur - Fired when the input loses focus.\n *\n * @example\n * <!-- Basic text input -->\n * <ds-text-input placeholder=\"Enter your name\" id=\"username-input\"></ds-text-input>\n * <ds-label for=\"username-input\">Username</ds-label>\n *\n * @example\n * <!-- Password input that is required -->\n * <ds-text-input type=\"password\" required placeholder=\"Your password\"></ds-text-input>\n *\n * @example\n * <!-- Disabled email input with a pre-filled value -->\n * <ds-text-input type=\"email\" value=\"example@domain.com\" disabled></ds-text-input>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsTextInput extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-text-input\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-required',\n                'aria-invalid',\n                'aria-autocomplete',\n                'aria-controls',\n                'aria-activedescendant'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby', 'aria-controls', 'aria-activedescendant'],\n            tokenValidation: {\n                'aria-autocomplete': ['inline', 'list', 'both', 'none'],\n                'aria-invalid': ['grammar', 'false', 'spelling', 'true']\n            }\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <input id=\"input\" part=\"input\" type=\"text\">\n                <slot></slot>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'input',\n            ariaConfig,\n            events: ['input', 'change', 'focus', 'blur'],\n            observedAttributes: ['type', 'value', 'placeholder', 'disabled', 'readonly', 'required', 'name', 'id']\n        });\n        \n        this.input = this.shadowRoot.querySelector('input');\n    }\n    \n    static get observedAttributes() {\n        return ['type', 'value', 'placeholder', 'disabled', 'readonly', 'required', 'name', 'id', 'aria-label', 'aria-describedby', 'aria-required', 'aria-invalid', 'aria-autocomplete', 'aria-controls', 'aria-activedescendant'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            case 'type':\n                this.input.type = newValue || 'text';\n                break;\n            case 'value':\n                this.input.value = newValue || '';\n                break;\n            case 'placeholder':\n                this.input.placeholder = newValue || '';\n                break;\n            case 'disabled':\n                this.input.disabled = this.hasAttribute('disabled');\n                break;\n            case 'readonly':\n                this.input.readOnly = this.hasAttribute('readonly');\n                break;\n            case 'required':\n                this.input.required = this.hasAttribute('required');\n                break;\n            case 'name':\n                this.input.name = newValue || '';\n                break;\n            case 'id':\n                this.input.id = newValue || '';\n                break;\n        }\n    }\n    \n    get value() {\n        return this.input.value;\n    }\n    set value(val) {\n        this.input.value = val;\n    }\n    get type() {\n        return this.input.type;\n    }\n    set type(val) {\n        this.input.type = val;\n    }\n    get disabled() {\n        return this.input.disabled;\n    }\n    set disabled(val) {\n        this.input.disabled = val;\n    }\n    get readonly() {\n        return this.input.readOnly;\n    }\n    set readonly(val) {\n        this.input.readOnly = val;\n    }\n    get required() {\n        return this.input.required;\n    }\n    set required(val) {\n        this.input.required = val;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.input.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-label');\n        } else {\n            this.input.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.input.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-describedby');\n        } else {\n            this.input.setAttribute('aria-describedby', val);\n        }\n    }\n    get ariaRequired() { \n        const value = this.input.getAttribute('aria-required');\n        return value === null ? null : value;\n    }\n    set ariaRequired(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-required');\n        } else {\n            this.input.setAttribute('aria-required', val);\n        }\n    }\n    get ariaInvalid() { \n        const value = this.input.getAttribute('aria-invalid');\n        return value === null ? null : value;\n    }\n    set ariaInvalid(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-invalid');\n        } else {\n            this.input.setAttribute('aria-invalid', val);\n        }\n    }\n    get ariaAutocomplete() { \n        const value = this.input.getAttribute('aria-autocomplete');\n        return value === null ? null : value;\n    }\n    set ariaAutocomplete(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-autocomplete');\n        } else {\n            this.input.setAttribute('aria-autocomplete', val);\n        }\n    }\n    get ariaControls() { \n        const value = this.input.getAttribute('aria-controls');\n        return value === null ? null : value;\n    }\n    set ariaControls(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-controls');\n        } else {\n            this.input.setAttribute('aria-controls', val);\n        }\n    }\n    get ariaActiveDescendant() { \n        const value = this.input.getAttribute('aria-activedescendant');\n        return value === null ? null : value;\n    }\n    set ariaActiveDescendant(val) { \n        if (val === null || val === undefined) {\n            this.input.removeAttribute('aria-activedescendant');\n        } else {\n            this.input.setAttribute('aria-activedescendant', val);\n        }\n    }\n    // Override validateARIA for text input–specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        // Accessible name check - check host element's text content and ARIA attributes\n        const hostAriaLabel = this.getAttribute('aria-label');\n        const hostAriaLabelledBy = this.getAttribute('aria-labelledby');\n        const inputAriaLabel = this.input.getAttribute('aria-label');\n        const inputAriaLabelledBy = this.input.getAttribute('aria-labelledby');\n        const hasName = hostAriaLabel || hostAriaLabelledBy || inputAriaLabel || inputAriaLabelledBy;\n        if (!hasName) {\n            errors.push('Text input has no accessible name (aria-label or aria-labelledby required)');\n        }\n        // aria-invalid state management\n        if (this.input.hasAttribute('aria-invalid')) {\n            const val = this.input.getAttribute('aria-invalid');\n            if (!['true', 'false', 'grammar', 'spelling'].includes(val)) {\n                errors.push(`Invalid aria-invalid value: ${val}`);\n            }\n        }\n        // aria-describedby references\n        if (this.input.hasAttribute('aria-describedby')) {\n            const refError = this.checkAriaReferences('aria-describedby', this.input.getAttribute('aria-describedby'));\n            if (refError) errors.push(refError);\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-text-input', DsTextInput);\n\n// Export for use in other modules\nexport default DsTextInput; ","/**\n * @file ds-button.js\n * @summary A custom Web Component that wraps a native `<button>` element.\n * @description\n * The `ds-button` component provides a styled and functional button element.\n * It supports various button types and variants while maintaining accessibility\n * and proper event handling.\n *\n * @element ds-button\n * @extends BaseComponent\n *\n * @attr {string} [type=\"button\"] - The type of button (e.g., `button`, `submit`, `reset`).\n * @attr {boolean} disabled - If present, the button cannot be interacted with.\n * @attr {string} name - The name of the button, used when submitting form data.\n * @attr {string} value - The value of the button, used when submitting form data.\n * @attr {string} [variant] - The visual variant of the button (e.g., `primary`, `secondary`, `danger`).\n *\n * @property {string} type - Gets or sets the type of the button.\n * @property {boolean} disabled - Gets or sets the disabled state of the button.\n * @property {string} name - Gets or sets the name of the button.\n * @property {string} value - Gets or sets the value of the button.\n * @property {string} variant - Gets or sets the variant of the button.\n *\n * @fires click - Fired when the button is clicked.\n * @fires focus - Fired when the button receives focus.\n * @fires blur - Fired when the button loses focus.\n *\n * @example\n * <!-- Basic button -->\n * <ds-button>Click me</ds-button>\n *\n * @example\n * <!-- Submit button with variant -->\n * <ds-button type=\"submit\" variant=\"primary\">Submit Form</ds-button>\n *\n * @example\n * <!-- Disabled button -->\n * <ds-button disabled variant=\"secondary\">Disabled Button</ds-button>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsButton extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-button\n        const ariaConfig = {\n            staticAriaAttributes: { role: 'button' },\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-pressed',\n                'aria-expanded',\n                'aria-haspopup'\n            ],\n            requiredAriaAttributes: [], // none required, but warn about missing labels\n            referenceAttributes: ['aria-describedby'],\n            tokenValidation: {\n                'aria-haspopup': ['false', 'true', 'menu', 'listbox', 'tree', 'grid', 'dialog'],\n                'aria-pressed': ['false', 'true', 'mixed', 'undefined'],\n                'aria-expanded': ['false', 'true', 'undefined']\n            }\n        };\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                :host { display: inline-block; }\n                .wrapper { width: 100%; }\n            </style>\n            <div class=\"wrapper\">\n                <button part=\"button\" type=\"button\">\n                    <slot></slot>\n                </button>\n            </div>\n        `;\n        super({\n            template: template.innerHTML,\n            targetSelector: 'button',\n            ariaConfig,\n            events: ['click', 'focus', 'blur'],\n            observedAttributes: ['type', 'disabled', 'name', 'value', 'variant']\n        });\n        this.button = this.shadowRoot.querySelector('button');\n    }\n    \n    /**\n     * Defines which attributes the component observes for changes.\n     * @returns {Array<string>} An array of attribute names to observe.\n     */\n    static get observedAttributes() {\n        return ['type', 'disabled', 'name', 'value', 'variant', 'aria-label', 'aria-describedby', 'aria-pressed', 'aria-expanded', 'aria-haspopup'];\n    }\n    \n    /**\n     * Called when one of the component's observed attributes is added, removed, or changed.\n     * @param {string} name - The name of the attribute that changed.\n     * @param {string|null} oldValue - The attribute's old value.\n     * @param {string|null} newValue - The attribute's new value.\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        // Call parent method first\n        super.attributeChangedCallback(name, oldValue, newValue);\n        \n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'type':\n                this.button.type = newValue || 'button';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.button.disabled = true;\n                } else {\n                    this.button.disabled = false;\n                }\n                break;\n                \n            case 'name':\n                this.button.name = newValue || '';\n                break;\n                \n            case 'value':\n                this.button.value = newValue || '';\n                break;\n                \n            case 'variant':\n                // Remove existing variant classes\n                this.button.classList.remove('primary', 'secondary', 'danger');\n                // Add new variant class if specified\n                if (newValue) {\n                    this.button.classList.add(newValue);\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Gets the type of the button.\n     * @returns {string} The button's type.\n     */\n    get type() {\n        return this.button.type;\n    }\n    \n    /**\n     * Sets the type of the button.\n     * @param {string} val - The new type to set.\n     */\n    set type(val) {\n        this.button.type = val;\n    }\n    \n    /**\n     * Gets the disabled state of the button.\n     * @returns {boolean} Whether the button is disabled.\n     */\n    get disabled() {\n        return this.button.disabled;\n    }\n    \n    /**\n     * Sets the disabled state of the button.\n     * @param {boolean} val - Whether to disable the button.\n     */\n    set disabled(val) {\n        this.button.disabled = val;\n    }\n    \n    /**\n     * Gets the name of the button.\n     * @returns {string} The button's name.\n     */\n    get name() {\n        return this.button.name;\n    }\n    \n    /**\n     * Sets the name of the button.\n     * @param {string} val - The new name to set.\n     */\n    set name(val) {\n        this.button.name = val;\n    }\n    \n    /**\n     * Gets the value of the button.\n     * @returns {string} The button's value.\n     */\n    get value() {\n        return this.button.value;\n    }\n    \n    /**\n     * Sets the value of the button.\n     * @param {string} val - The new value to set.\n     */\n    set value(val) {\n        this.button.value = val;\n    }\n    \n    /**\n     * Gets the variant of the button.\n     * @returns {string} The button's variant.\n     */\n    get variant() {\n        return this.getAttribute('variant');\n    }\n    \n    /**\n     * Sets the variant of the button.\n     * @param {string} val - The new variant to set.\n     */\n    set variant(val) {\n        if (val) {\n            this.setAttribute('variant', val);\n        } else {\n            this.removeAttribute('variant');\n        }\n    }\n\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.button.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.button.removeAttribute('aria-label');\n        } else {\n            this.button.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.button.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.button.removeAttribute('aria-describedby');\n        } else {\n            this.button.setAttribute('aria-describedby', val);\n        }\n    }\n    get ariaPressed() { \n        const value = this.button.getAttribute('aria-pressed');\n        return value === null ? null : value;\n    }\n    set ariaPressed(val) { \n        if (val === null || val === undefined) {\n            this.button.removeAttribute('aria-pressed');\n        } else {\n            this.button.setAttribute('aria-pressed', val);\n        }\n    }\n    get ariaExpanded() { \n        const value = this.button.getAttribute('aria-expanded');\n        return value === null ? null : value;\n    }\n    set ariaExpanded(val) { \n        if (val === null || val === undefined) {\n            this.button.removeAttribute('aria-expanded');\n        } else {\n            this.button.setAttribute('aria-expanded', val);\n        }\n    }\n    get ariaHasPopup() { \n        const value = this.button.getAttribute('aria-haspopup');\n        return value === null ? null : value;\n    }\n    set ariaHasPopup(val) { \n        if (val === null || val === undefined) {\n            this.button.removeAttribute('aria-haspopup');\n        } else {\n            this.button.setAttribute('aria-haspopup', val);\n        }\n    }\n\n    // Override validateARIA for button-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        \n        // Accessible name check - check host element's text content and ARIA attributes\n        const hostTextContent = this.textContent.trim();\n        const hostAriaLabel = this.getAttribute('aria-label');\n        const hostAriaLabelledBy = this.getAttribute('aria-labelledby');\n        const buttonAriaLabel = this.button.getAttribute('aria-label');\n        const buttonAriaLabelledBy = this.button.getAttribute('aria-labelledby');\n        \n        const hasName = hostTextContent || hostAriaLabel || hostAriaLabelledBy || buttonAriaLabel || buttonAriaLabelledBy;\n        \n        if (!hasName) {\n            errors.push('Button has no accessible name (text, aria-label, or aria-labelledby required)');\n        }\n        \n        // aria-pressed state management\n        if (this.button.hasAttribute('aria-pressed')) {\n            const val = this.button.getAttribute('aria-pressed');\n            if (!['true', 'false', 'mixed', 'undefined'].includes(val)) {\n                errors.push(`Invalid aria-pressed value: ${val}`);\n            }\n        }\n        \n        // aria-expanded/controls\n        if (this.button.hasAttribute('aria-expanded')) {\n            // Optionally check for controlled element\n            // Could add logic to check for aria-controls\n        }\n        \n        // aria-describedby references\n        if (this.button.hasAttribute('aria-describedby')) {\n            const refError = this.checkAriaReferences('aria-describedby', this.button.getAttribute('aria-describedby'));\n            if (refError) errors.push(refError);\n        }\n        \n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-button', DsButton);\n\n// Export for use in other modules\nexport default DsButton; ","/**\n * @file ds-radio.js\n * @summary A custom Web Component that wraps a native radio input element.\n * @description\n * The `ds-radio` component provides a styled and functional radio button.\n * It maintains proper radio button behavior where only one option in a group can be selected.\n *\n * @element ds-radio\n * @extends BaseComponent\n *\n * @attr {string} name - The name of the radio button group. All radio buttons with the same name form a group.\n * @attr {string} value - The value of the radio button when selected.\n * @attr {boolean} checked - If present, the radio button is selected.\n * @attr {boolean} disabled - If present, the radio button cannot be interacted with.\n * @attr {boolean} readonly - If present, the radio button cannot be modified by the user.\n * @attr {boolean} required - If present, one radio button in the group must be selected.\n * @attr {string} id - A unique identifier for the radio button, useful for associating with labels.\n *\n * @property {boolean} checked - Gets or sets the checked state of the radio button.\n * @property {string} value - Gets or sets the value of the radio button.\n * @property {string} name - Gets or sets the name of the radio button.\n * @property {boolean} disabled - Gets or sets the disabled state of the radio button.\n * @property {boolean} readonly - Gets or sets the readonly state of the radio button.\n * @property {boolean} required - Gets or sets the required state of the radio button.\n *\n * @fires change - Fired when the radio button selection changes.\n * @fires focus - Fired when the radio button receives focus.\n * @fires blur - Fired when the radio button loses focus.\n *\n * @example\n * <!-- Basic radio button group -->\n * <ds-radio name=\"gender\" value=\"male\" id=\"male\">Male</ds-radio>\n * <ds-radio name=\"gender\" value=\"female\" id=\"female\">Female</ds-radio>\n * <ds-radio name=\"gender\" value=\"other\" id=\"other\">Other</ds-radio>\n *\n * @example\n * <!-- Radio button with default selection -->\n * <ds-radio name=\"preference\" value=\"option1\" checked>Option 1</ds-radio>\n * <ds-radio name=\"preference\" value=\"option2\">Option 2</ds-radio>\n *\n * @example\n * <!-- Disabled radio button -->\n * <ds-radio name=\"status\" value=\"inactive\" disabled>Inactive</ds-radio>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsRadio extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-radio\n        const ariaConfig = {\n            staticAriaAttributes: { role: 'radio' },\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-required',\n                'aria-invalid',\n                'aria-checked'\n            ],\n            requiredAriaAttributes: [], // none required, but warn about missing labels\n            referenceAttributes: ['aria-describedby'],\n            tokenValidation: {\n                'aria-checked': ['true', 'false', 'mixed', 'undefined'],\n                'aria-invalid': ['true', 'false', 'grammar', 'spelling']\n            }\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    display: flex;\n                    align-items: center;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <input type=\"radio\" id=\"radio\" part=\"radio\">\n                <slot></slot>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'input[type=\"radio\"]',\n            ariaConfig,\n            events: ['change', 'focus', 'blur'],\n            observedAttributes: ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id']\n        });\n        \n        this.radio = this.shadowRoot.querySelector('input[type=\"radio\"]');\n    }\n    \n    /**\n     * Defines which attributes the component observes for changes.\n     * @returns {Array<string>} An array of attribute names to observe.\n     */\n    static get observedAttributes() {\n        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id', 'aria-label', 'aria-describedby', 'aria-required', 'aria-invalid', 'aria-checked'];\n    }\n    \n    /**\n     * Called when one of the component's observed attributes is added, removed, or changed.\n     * @param {string} name - The name of the attribute that changed.\n     * @param {string|null} oldValue - The attribute's old value.\n     * @param {string|null} newValue - The attribute's new value.\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        // Call parent method first\n        super.attributeChangedCallback(name, oldValue, newValue);\n        \n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'name':\n                this.radio.name = newValue || '';\n                break;\n                \n            case 'value':\n                this.radio.value = newValue || '';\n                break;\n                \n            case 'checked':\n                if (this.hasAttribute('checked')) {\n                    this.radio.checked = true;\n                } else {\n                    this.radio.checked = false;\n                }\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.radio.disabled = true;\n                } else {\n                    this.radio.disabled = false;\n                }\n                break;\n                \n            case 'readonly':\n                if (this.hasAttribute('readonly')) {\n                    this.radio.readOnly = true;\n                } else {\n                    this.radio.readOnly = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.radio.required = true;\n                } else {\n                    this.radio.required = false;\n                }\n                break;\n                \n            case 'id':\n                this.radio.id = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Gets the checked state of the radio button.\n     * @returns {boolean} Whether the radio button is checked.\n     */\n    get checked() {\n        return this.radio.checked;\n    }\n    \n    /**\n     * Sets the checked state of the radio button.\n     * @param {boolean} val - Whether to check the radio button.\n     */\n    set checked(val) {\n        this.radio.checked = val;\n    }\n    \n    /**\n     * Gets the value of the radio button.\n     * @returns {string} The radio button's value.\n     */\n    get value() {\n        return this.radio.value;\n    }\n    \n    /**\n     * Sets the value of the radio button.\n     * @param {string} val - The new value to set.\n     */\n    set value(val) {\n        this.radio.value = val;\n    }\n    \n    /**\n     * Gets the name of the radio button.\n     * @returns {string} The radio button's name.\n     */\n    get name() {\n        return this.radio.name;\n    }\n    \n    /**\n     * Sets the name of the radio button.\n     * @param {string} val - The new name to set.\n     */\n    set name(val) {\n        this.radio.name = val;\n    }\n    \n    /**\n     * Gets the disabled state of the radio button.\n     * @returns {boolean} Whether the radio button is disabled.\n     */\n    get disabled() {\n        return this.radio.disabled;\n    }\n    \n    /**\n     * Sets the disabled state of the radio button.\n     * @param {boolean} val - Whether to disable the radio button.\n     */\n    set disabled(val) {\n        this.radio.disabled = val;\n    }\n    \n    /**\n     * Gets the readonly state of the radio button.\n     * @returns {boolean} Whether the radio button is readonly.\n     */\n    get readonly() {\n        return this.radio.readOnly;\n    }\n    \n    /**\n     * Sets the readonly state of the radio button.\n     * @param {boolean} val - Whether to make the radio button readonly.\n     */\n    set readonly(val) {\n        this.radio.readOnly = val;\n    }\n    \n    /**\n     * Gets the required state of the radio button.\n     * @returns {boolean} Whether the radio button is required.\n     */\n    get required() {\n        return this.radio.required;\n    }\n    \n    /**\n     * Sets the required state of the radio button.\n     * @param {boolean} val - Whether to make the radio button required.\n     */\n    set required(val) {\n        this.radio.required = val;\n    }\n\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.radio.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.radio.removeAttribute('aria-label');\n        } else {\n            this.radio.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.radio.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.radio.removeAttribute('aria-describedby');\n        } else {\n            this.radio.setAttribute('aria-describedby', val);\n        }\n    }\n    get ariaRequired() { \n        const value = this.radio.getAttribute('aria-required');\n        return value === null ? null : value;\n    }\n    set ariaRequired(val) { \n        if (val === null || val === undefined) {\n            this.radio.removeAttribute('aria-required');\n        } else {\n            this.radio.setAttribute('aria-required', val);\n        }\n    }\n    get ariaInvalid() { \n        const value = this.radio.getAttribute('aria-invalid');\n        return value === null ? null : value;\n    }\n    set ariaInvalid(val) { \n        if (val === null || val === undefined) {\n            this.radio.removeAttribute('aria-invalid');\n        } else {\n            this.radio.setAttribute('aria-invalid', val);\n        }\n    }\n    get ariaChecked() { \n        const value = this.radio.getAttribute('aria-checked');\n        return value === null ? null : value;\n    }\n    set ariaChecked(val) { \n        if (val === null || val === undefined) {\n            this.radio.removeAttribute('aria-checked');\n        } else {\n            this.radio.setAttribute('aria-checked', val);\n        }\n    }\n\n    // Override validateARIA for radio-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        \n        // Accessible name check - check host element's text content and ARIA attributes\n        const hostTextContent = this.textContent.trim();\n        const hostAriaLabel = this.getAttribute('aria-label');\n        const hostAriaLabelledBy = this.getAttribute('aria-labelledby');\n        const radioAriaLabel = this.radio.getAttribute('aria-label');\n        const radioAriaLabelledBy = this.radio.getAttribute('aria-labelledby');\n        \n        const hasName = hostTextContent || hostAriaLabel || hostAriaLabelledBy || radioAriaLabel || radioAriaLabelledBy;\n        \n        if (!hasName) {\n            errors.push('Radio has no accessible name (text, aria-label, or aria-labelledby required)');\n        }\n        \n        // aria-checked state management\n        if (this.radio.hasAttribute('aria-checked')) {\n            const val = this.radio.getAttribute('aria-checked');\n            if (!['true', 'false', 'mixed', 'undefined'].includes(val)) {\n                errors.push(`Invalid aria-checked value: ${val}`);\n            }\n        }\n        \n        // aria-describedby references\n        if (this.radio.hasAttribute('aria-describedby')) {\n            const refError = this.checkAriaReferences('aria-describedby', this.radio.getAttribute('aria-describedby'));\n            if (refError) errors.push(refError);\n        }\n        \n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-radio', DsRadio);\n\n// Export for use in other modules\nexport default DsRadio; ","/**\n * @file ds-checkbox.js\n * @summary A custom Web Component that wraps a native checkbox input element.\n * @description\n * The `ds-checkbox` component provides a styled and functional checkbox.\n * It supports both single checkboxes and groups of checkboxes for multiple selections.\n *\n * @element ds-checkbox\n * @extends BaseComponent\n *\n * @attr {string} name - The name of the checkbox, used when submitting form data.\n * @attr {string} value - The value of the checkbox when checked.\n * @attr {boolean} checked - If present, the checkbox is selected.\n * @attr {boolean} disabled - If present, the checkbox cannot be interacted with.\n * @attr {boolean} readonly - If present, the checkbox cannot be modified by the user.\n * @attr {boolean} required - If present, the checkbox must be checked before form submission.\n * @attr {string} id - A unique identifier for the checkbox, useful for associating with labels.\n *\n * @property {boolean} checked - Gets or sets the checked state of the checkbox.\n * @property {string} value - Gets or sets the value of the checkbox.\n * @property {string} name - Gets or sets the name of the checkbox.\n * @property {boolean} disabled - Gets or sets the disabled state of the checkbox.\n * @property {boolean} readonly - Gets or sets the readonly state of the checkbox.\n * @property {boolean} required - Gets or sets the required state of the checkbox.\n *\n * @fires change - Fired when the checkbox selection changes.\n * @fires focus - Fired when the checkbox receives focus.\n * @fires blur - Fired when the checkbox loses focus.\n *\n * @example\n * <!-- Basic checkbox -->\n * <ds-checkbox name=\"agree\" value=\"yes\" id=\"agree-terms\">I agree to the terms</ds-checkbox>\n *\n * @example\n * <!-- Checkbox with default selection -->\n * <ds-checkbox name=\"newsletter\" value=\"subscribe\" checked>Subscribe to newsletter</ds-checkbox>\n *\n * @example\n * <!-- Multiple checkboxes for preferences -->\n * <ds-checkbox name=\"preferences\" value=\"email\">Email notifications</ds-checkbox>\n * <ds-checkbox name=\"preferences\" value=\"sms\">SMS notifications</ds-checkbox>\n * <ds-checkbox name=\"preferences\" value=\"push\">Push notifications</ds-checkbox>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsCheckbox extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-checkbox\n        const ariaConfig = {\n            staticAriaAttributes: { role: 'checkbox' },\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-required',\n                'aria-invalid',\n                'aria-checked'\n            ],\n            requiredAriaAttributes: [], // none required, but warn about missing labels\n            referenceAttributes: ['aria-describedby'],\n            tokenValidation: {\n                'aria-checked': ['true', 'false', 'mixed', 'undefined'],\n                'aria-invalid': ['true', 'false', 'grammar', 'spelling']\n            }\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    display: flex;\n                    align-items: center;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <input type=\"checkbox\" id=\"checkbox\" part=\"checkbox\">\n                <slot></slot>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'input[type=\"checkbox\"]',\n            ariaConfig,\n            events: ['change', 'focus', 'blur'],\n            observedAttributes: ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id']\n        });\n        \n        this.checkbox = this.shadowRoot.querySelector('input[type=\"checkbox\"]');\n    }\n    \n    /**\n     * Defines which attributes the component observes for changes.\n     * @returns {Array<string>} An array of attribute names to observe.\n     */\n    static get observedAttributes() {\n        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id', 'aria-label', 'aria-describedby', 'aria-required', 'aria-invalid', 'aria-checked'];\n    }\n    \n    /**\n     * Called when one of the component's observed attributes is added, removed, or changed.\n     * @param {string} name - The name of the attribute that changed.\n     * @param {string|null} oldValue - The attribute's old value.\n     * @param {string|null} newValue - The attribute's new value.\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        // Call parent method first\n        super.attributeChangedCallback(name, oldValue, newValue);\n        \n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'name':\n                this.checkbox.name = newValue || '';\n                break;\n                \n            case 'value':\n                this.checkbox.value = newValue || '';\n                break;\n                \n            case 'checked':\n                if (this.hasAttribute('checked')) {\n                    this.checkbox.checked = true;\n                } else {\n                    this.checkbox.checked = false;\n                }\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.checkbox.disabled = true;\n                } else {\n                    this.checkbox.disabled = false;\n                }\n                break;\n                \n            case 'readonly':\n                if (this.hasAttribute('readonly')) {\n                    this.checkbox.readOnly = true;\n                } else {\n                    this.checkbox.readOnly = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.checkbox.required = true;\n                } else {\n                    this.checkbox.required = false;\n                }\n                break;\n                \n            case 'id':\n                this.checkbox.id = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Gets the checked state of the checkbox.\n     * @returns {boolean} Whether the checkbox is checked.\n     */\n    get checked() {\n        return this.checkbox.checked;\n    }\n    \n    /**\n     * Sets the checked state of the checkbox.\n     * @param {boolean} val - Whether to check the checkbox.\n     */\n    set checked(val) {\n        this.checkbox.checked = val;\n    }\n    \n    /**\n     * Gets the value of the checkbox.\n     * @returns {string} The checkbox's value.\n     */\n    get value() {\n        return this.checkbox.value;\n    }\n    \n    /**\n     * Sets the value of the checkbox.\n     * @param {string} val - The new value to set.\n     */\n    set value(val) {\n        this.checkbox.value = val;\n    }\n    \n    /**\n     * Gets the name of the checkbox.\n     * @returns {string} The checkbox's name.\n     */\n    get name() {\n        return this.checkbox.name;\n    }\n    \n    /**\n     * Sets the name of the checkbox.\n     * @param {string} val - The new name to set.\n     */\n    set name(val) {\n        this.checkbox.name = val;\n    }\n    \n    /**\n     * Gets the disabled state of the checkbox.\n     * @returns {boolean} Whether the checkbox is disabled.\n     */\n    get disabled() {\n        return this.checkbox.disabled;\n    }\n    \n    /**\n     * Sets the disabled state of the checkbox.\n     * @param {boolean} val - Whether to disable the checkbox.\n     */\n    set disabled(val) {\n        this.checkbox.disabled = val;\n    }\n    \n    /**\n     * Gets the readonly state of the checkbox.\n     * @returns {boolean} Whether the checkbox is readonly.\n     */\n    get readonly() {\n        return this.checkbox.readOnly;\n    }\n    \n    /**\n     * Sets the readonly state of the checkbox.\n     * @param {boolean} val - Whether to make the checkbox readonly.\n     */\n    set readonly(val) {\n        this.checkbox.readOnly = val;\n    }\n    \n    /**\n     * Gets the required state of the checkbox.\n     * @returns {boolean} Whether the checkbox is required.\n     */\n    get required() {\n        return this.checkbox.required;\n    }\n    \n    /**\n     * Sets the required state of the checkbox.\n     * @param {boolean} val - Whether to make the checkbox required.\n     */\n    set required(val) {\n        this.checkbox.required = val;\n    }\n\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.checkbox.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.checkbox.removeAttribute('aria-label');\n        } else {\n            this.checkbox.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.checkbox.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.checkbox.removeAttribute('aria-describedby');\n        } else {\n            this.checkbox.setAttribute('aria-describedby', val);\n        }\n    }\n    get ariaRequired() { \n        const value = this.checkbox.getAttribute('aria-required');\n        return value === null ? null : value;\n    }\n    set ariaRequired(val) { \n        if (val === null || val === undefined) {\n            this.checkbox.removeAttribute('aria-required');\n        } else {\n            this.checkbox.setAttribute('aria-required', val);\n        }\n    }\n    get ariaInvalid() { \n        const value = this.checkbox.getAttribute('aria-invalid');\n        return value === null ? null : value;\n    }\n    set ariaInvalid(val) { \n        if (val === null || val === undefined) {\n            this.checkbox.removeAttribute('aria-invalid');\n        } else {\n            this.checkbox.setAttribute('aria-invalid', val);\n        }\n    }\n    get ariaChecked() { \n        const value = this.checkbox.getAttribute('aria-checked');\n        return value === null ? null : value;\n    }\n    set ariaChecked(val) { \n        if (val === null || val === undefined) {\n            this.checkbox.removeAttribute('aria-checked');\n        } else {\n            this.checkbox.setAttribute('aria-checked', val);\n        }\n    }\n\n    // Override validateARIA for checkbox-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        \n        // Accessible name check - check host element's text content and ARIA attributes\n        const hostTextContent = this.textContent.trim();\n        const hostAriaLabel = this.getAttribute('aria-label');\n        const hostAriaLabelledBy = this.getAttribute('aria-labelledby');\n        const checkboxAriaLabel = this.checkbox.getAttribute('aria-label');\n        const checkboxAriaLabelledBy = this.checkbox.getAttribute('aria-labelledby');\n        \n        const hasName = hostTextContent || hostAriaLabel || hostAriaLabelledBy || checkboxAriaLabel || checkboxAriaLabelledBy;\n        \n        if (!hasName) {\n            errors.push('Checkbox has no accessible name (text, aria-label, or aria-labelledby required)');\n        }\n        \n        // aria-checked state management\n        if (this.checkbox.hasAttribute('aria-checked')) {\n            const val = this.checkbox.getAttribute('aria-checked');\n            if (!['true', 'false', 'mixed', 'undefined'].includes(val)) {\n                errors.push(`Invalid aria-checked value: ${val}`);\n            }\n        }\n        \n        // aria-describedby references\n        if (this.checkbox.hasAttribute('aria-describedby')) {\n            const refError = this.checkAriaReferences('aria-describedby', this.checkbox.getAttribute('aria-describedby'));\n            if (refError) errors.push(refError);\n        }\n        \n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-checkbox', DsCheckbox);\n\n// Export for use in other modules\nexport default DsCheckbox; ","/**\n * @file ds-textarea.js\n * @summary A custom Web Component that wraps a native `<textarea>` element.\n * @description\n * The `ds-textarea` component provides a styled and functional textarea for multi-line text input.\n * It supports various textarea attributes and properties while maintaining accessibility\n * and proper event handling.\n *\n * @element ds-textarea\n * @extends BaseComponent\n *\n * @attr {string} value - The current value of the textarea.\n * @attr {string} placeholder - A hint to the user of what can be entered in the textarea.\n * @attr {string} rows - The number of visible text lines in the textarea.\n * @attr {string} cols - The visible width of the textarea in average character widths.\n * @attr {boolean} disabled - If present, the textarea cannot be interacted with.\n * @attr {boolean} readonly - If present, the textarea cannot be modified by the user.\n * @attr {boolean} required - If present, the textarea must have a value before form submission.\n * @attr {string} name - The name of the textarea, used when submitting form data.\n * @attr {string} id - A unique identifier for the textarea, useful for associating with labels.\n *\n * @property {string} value - Gets or sets the current value of the textarea.\n * @property {string} placeholder - Gets or sets the placeholder text of the textarea.\n * @property {number} rows - Gets or sets the number of rows in the textarea.\n * @property {number} cols - Gets or sets the number of columns in the textarea.\n * @property {boolean} disabled - Gets or sets the disabled state of the textarea.\n * @property {boolean} readonly - Gets or sets the readonly state of the textarea.\n * @property {boolean} required - Gets or sets the required state of the textarea.\n * @property {string} name - Gets or sets the name of the textarea.\n *\n * @fires input - Fired when the value of the textarea changes.\n * @fires change - Fired when the value of the textarea is committed.\n * @fires focus - Fired when the textarea receives focus.\n * @fires blur - Fired when the textarea loses focus.\n *\n * @example\n * <!-- Basic textarea -->\n * <ds-textarea placeholder=\"Enter your message\" rows=\"4\" cols=\"50\"></ds-textarea>\n *\n * @example\n * <!-- Required textarea with pre-filled value -->\n * <ds-textarea value=\"Default text\" required rows=\"6\">Enter description</ds-textarea>\n *\n * @example\n * <!-- Disabled textarea -->\n * <ds-textarea value=\"Read-only content\" disabled rows=\"3\"></ds-textarea>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsTextarea extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-textarea\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-required',\n                'aria-invalid'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n            tokenValidation: {\n                'aria-invalid': ['grammar', 'false', 'spelling', 'true']\n            }\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <textarea id=\"textarea\" part=\"textarea\">\n                    <slot></slot>\n                </textarea>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'textarea',\n            ariaConfig,\n            events: ['input', 'change', 'focus', 'blur'],\n            observedAttributes: ['value', 'placeholder', 'rows', 'cols', 'disabled', 'readonly', 'required', 'name', 'id']\n        });\n        \n        this.textarea = this.shadowRoot.querySelector('textarea');\n    }\n    \n    static get observedAttributes() {\n        return ['value', 'placeholder', 'rows', 'cols', 'disabled', 'readonly', 'required', 'name', 'id', 'aria-label', 'aria-describedby', 'aria-required', 'aria-invalid'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            case 'value':\n                this.textarea.value = newValue || '';\n                break;\n            case 'placeholder':\n                this.textarea.placeholder = newValue || '';\n                break;\n            case 'rows':\n                this.textarea.rows = newValue || '';\n                break;\n            case 'cols':\n                this.textarea.cols = newValue || '';\n                break;\n            case 'disabled':\n                this.textarea.disabled = this.hasAttribute('disabled');\n                break;\n            case 'readonly':\n                this.textarea.readOnly = this.hasAttribute('readonly');\n                break;\n            case 'required':\n                this.textarea.required = this.hasAttribute('required');\n                break;\n            case 'name':\n                this.textarea.name = newValue || '';\n                break;\n            case 'id':\n                this.textarea.id = newValue || '';\n                break;\n        }\n    }\n    \n    get value() {\n        return this.textarea.value;\n    }\n    set value(val) {\n        this.textarea.value = val;\n    }\n    get placeholder() {\n        return this.textarea.placeholder;\n    }\n    set placeholder(val) {\n        this.textarea.placeholder = val;\n    }\n    get rows() {\n        return this.textarea.rows;\n    }\n    set rows(val) {\n        this.textarea.rows = val;\n    }\n    get cols() {\n        return this.textarea.cols;\n    }\n    set cols(val) {\n        this.textarea.cols = val;\n    }\n    get disabled() {\n        return this.textarea.disabled;\n    }\n    set disabled(val) {\n        this.textarea.disabled = val;\n    }\n    get readonly() {\n        return this.textarea.readOnly;\n    }\n    set readonly(val) {\n        this.textarea.readOnly = val;\n    }\n    get required() {\n        return this.textarea.required;\n    }\n    set required(val) {\n        this.textarea.required = val;\n    }\n    get name() {\n        return this.textarea.name;\n    }\n    set name(val) {\n        this.textarea.name = val;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.textarea.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.textarea.removeAttribute('aria-label');\n        } else {\n            this.textarea.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.textarea.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.textarea.removeAttribute('aria-describedby');\n        } else {\n            this.textarea.setAttribute('aria-describedby', val);\n        }\n    }\n    get ariaRequired() { \n        const value = this.textarea.getAttribute('aria-required');\n        return value === null ? null : value;\n    }\n    set ariaRequired(val) { \n        if (val === null || val === undefined) {\n            this.textarea.removeAttribute('aria-required');\n        } else {\n            this.textarea.setAttribute('aria-required', val);\n        }\n    }\n    get ariaInvalid() { \n        const value = this.textarea.getAttribute('aria-invalid');\n        return value === null ? null : value;\n    }\n    set ariaInvalid(val) { \n        if (val === null || val === undefined) {\n            this.textarea.removeAttribute('aria-invalid');\n        } else {\n            this.textarea.setAttribute('aria-invalid', val);\n        }\n    }\n    // Override validateARIA for textarea-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        const hostAriaLabel = this.getAttribute('aria-label');\n        const hostAriaLabelledBy = this.getAttribute('aria-labelledby');\n        const textareaAriaLabel = this.textarea.getAttribute('aria-label');\n        const textareaAriaLabelledBy = this.textarea.getAttribute('aria-labelledby');\n        const hasName = hostAriaLabel || hostAriaLabelledBy || textareaAriaLabel || textareaAriaLabelledBy;\n        if (!hasName) {\n            errors.push('Textarea has no accessible name (aria-label or aria-labelledby required)');\n        }\n        if (this.textarea.hasAttribute('aria-invalid')) {\n            const val = this.textarea.getAttribute('aria-invalid');\n            if (!['true', 'false', 'grammar', 'spelling'].includes(val)) {\n                errors.push(`Invalid aria-invalid value: ${val}`);\n            }\n        }\n        if (this.textarea.hasAttribute('aria-describedby')) {\n            const refError = this.checkAriaReferences('aria-describedby', this.textarea.getAttribute('aria-describedby'));\n            if (refError) errors.push(refError);\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-textarea', DsTextarea);\n\n// Export for use in other modules\nexport default DsTextarea; ","/**\n * @file ds-select.js\n * @summary A custom Web Component that wraps a native `<select>` element.\n * @description\n * The `ds-select` component provides a styled and functional select dropdown.\n * It supports both single and multiple selection, and can work with both native\n * `<option>` elements and custom `<ds-option>` components.\n *\n * @element ds-select\n * @extends BaseComponent\n *\n * @attr {string} value - The currently selected option's value.\n * @attr {boolean} disabled - If present, the select cannot be interacted with.\n * @attr {boolean} required - If present, a selection must be made before form submission.\n * @attr {string} name - The name of the select, used when submitting form data.\n * @attr {boolean} multiple - If present, allows multiple options to be selected.\n * @attr {string} size - The number of visible options in the dropdown (for multiple selection).\n *\n * @property {string} value - Gets or sets the currently selected option's value.\n * @property {boolean} disabled - Gets or sets the disabled state of the select.\n * @property {boolean} required - Gets or sets the required state of the select.\n * @property {string} name - Gets or sets the name of the select.\n * @property {boolean} multiple - Gets or sets the multiple selection state.\n * @property {number} size - Gets or sets the number of visible options.\n *\n * @fires change - Fired when the selection changes.\n * @fires focus - Fired when the select receives focus.\n * @fires blur - Fired when the select loses focus.\n *\n * @slot - Renders `<option>` or `<ds-option>` elements as select options.\n *\n * @example\n * <!-- Basic select with native options -->\n * <ds-select name=\"country\">\n *   <option value=\"us\">United States</option>\n *   <option value=\"ca\">Canada</option>\n *   <option value=\"uk\">United Kingdom</option>\n * </ds-select>\n *\n * @example\n * <!-- Select with custom ds-option components -->\n * <ds-select name=\"category\" required>\n *   <ds-option value=\"electronics\">Electronics</ds-option>\n *   <ds-option value=\"clothing\">Clothing</ds-option>\n *   <ds-option value=\"books\">Books</ds-option>\n * </ds-select>\n *\n * @example\n * <!-- Multiple selection select -->\n * <ds-select name=\"interests\" multiple size=\"4\">\n *   <ds-option value=\"sports\">Sports</ds-option>\n *   <ds-option value=\"music\">Music</ds-option>\n *   <ds-option value=\"reading\">Reading</ds-option>\n *   <ds-option value=\"travel\">Travel</ds-option>\n * </ds-select>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsSelect extends BaseComponent {\n    constructor() {\n        super();\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <select id=\"select\" part=\"select\">\n                    <slot></slot>\n                </select>\n            </div>\n        `;\n        \n        // Set up the component with template and observed attributes\n        this.setupComponent(template, ['value', 'disabled', 'required', 'name', 'multiple', 'size']);\n        \n        // Store reference to the internal select for attribute changes\n        this.select = this.shadowRoot.querySelector('select');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n        \n        // Set up slot change listener to handle option projection\n        this.setupSlotListener();\n    }\n    \n    /**\n     * Called when one of the component's observed attributes is added, removed, or changed.\n     * @param {string} name - The name of the attribute that changed.\n     * @param {string|null} oldValue - The attribute's old value.\n     * @param {string|null} newValue - The attribute's new value.\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'value':\n                this.select.value = newValue || '';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.select.disabled = true;\n                } else {\n                    this.select.disabled = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.select.required = true;\n                } else {\n                    this.select.required = false;\n                }\n                break;\n                \n            case 'name':\n                this.select.name = newValue || '';\n                break;\n                \n            case 'multiple':\n                if (this.hasAttribute('multiple')) {\n                    this.select.multiple = true;\n                } else {\n                    this.select.multiple = false;\n                }\n                break;\n                \n            case 'size':\n                this.select.size = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Sets up event listeners to re-dispatch events from the host element.\n     */\n    setupEventListeners() {\n        const events = ['change', 'focus', 'blur'];\n        \n        events.forEach(eventType => {\n            this.select.addEventListener(eventType, (event) => {\n                // Create a new event to dispatch from the host\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                // Copy relevant properties\n                if (eventType === 'change') {\n                    newEvent.target = this;\n                    newEvent.currentTarget = this;\n                }\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Sets up slot listener to handle option projection.\n     */\n    setupSlotListener() {\n        const slot = this.shadowRoot.querySelector('slot');\n        slot.addEventListener('slotchange', () => {\n            this.handleSlotChange();\n        });\n    }\n    \n    /**\n     * Handles slot changes to project ds-option components into the select.\n     */\n    handleSlotChange() {\n        const slot = this.shadowRoot.querySelector('slot');\n        const assignedNodes = slot.assignedNodes();\n        \n        // Clear existing options\n        this.select.innerHTML = '';\n        \n        // Process each assigned node\n        assignedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'DS-OPTION') {\n                    // Create a native option element\n                    const option = document.createElement('option');\n                    \n                    // Copy attributes from ds-option\n                    if (node.hasAttribute('value')) {\n                        option.value = node.getAttribute('value');\n                    }\n                    if (node.hasAttribute('disabled')) {\n                        option.disabled = true;\n                    }\n                    if (node.hasAttribute('selected')) {\n                        option.selected = true;\n                    }\n                    \n                    // Copy text content\n                    option.textContent = node.textContent || node.innerText || '';\n                    \n                    this.select.appendChild(option);\n                } else if (node.tagName === 'OPTION') {\n                    // Direct option element, clone it\n                    this.select.appendChild(node.cloneNode(true));\n                }\n            }\n        });\n    }\n    \n    /**\n     * Gets the currently selected option's value.\n     * @returns {string} The selected option's value.\n     */\n    get value() {\n        return this.select.value;\n    }\n    \n    /**\n     * Sets the currently selected option's value.\n     * @param {string} val - The value to select.\n     */\n    set value(val) {\n        this.select.value = val;\n    }\n    \n    /**\n     * Gets the disabled state of the select.\n     * @returns {boolean} Whether the select is disabled.\n     */\n    get disabled() {\n        return this.select.disabled;\n    }\n    \n    /**\n     * Sets the disabled state of the select.\n     * @param {boolean} val - Whether to disable the select.\n     */\n    set disabled(val) {\n        this.select.disabled = val;\n    }\n    \n    /**\n     * Gets the required state of the select.\n     * @returns {boolean} Whether the select is required.\n     */\n    get required() {\n        return this.select.required;\n    }\n    \n    /**\n     * Sets the required state of the select.\n     * @param {boolean} val - Whether to make the select required.\n     */\n    set required(val) {\n        this.select.required = val;\n    }\n    \n    /**\n     * Gets the name of the select.\n     * @returns {string} The select's name.\n     */\n    get name() {\n        return this.select.name;\n    }\n    \n    /**\n     * Sets the name of the select.\n     * @param {string} val - The new name to set.\n     */\n    set name(val) {\n        this.select.name = val;\n    }\n    \n    /**\n     * Gets the multiple selection state.\n     * @returns {boolean} Whether multiple selection is enabled.\n     */\n    get multiple() {\n        return this.select.multiple;\n    }\n    \n    /**\n     * Sets the multiple selection state.\n     * @param {boolean} val - Whether to enable multiple selection.\n     */\n    set multiple(val) {\n        this.select.multiple = val;\n    }\n    \n    /**\n     * Gets the number of visible options.\n     * @returns {number} The number of visible options.\n     */\n    get size() {\n        return this.select.size;\n    }\n    \n    /**\n     * Sets the number of visible options.\n     * @param {number} val - The number of visible options to set.\n     */\n    set size(val) {\n        this.select.size = val;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-select', DsSelect);\n\n// Export for use in other modules\nexport default DsSelect; ","/**\n * @file ds-option.js\n * @summary A custom Web Component that wraps a native `<option>` element.\n * @description\n * The `ds-option` component provides a styled and functional option element\n * for use within `<ds-select>` components. It maintains proper option behavior\n * and can be used as an alternative to native `<option>` elements.\n *\n * @element ds-option\n * @extends BaseComponent\n *\n * @attr {string} value - The value of the option when selected.\n * @attr {boolean} disabled - If present, the option cannot be selected.\n * @attr {boolean} selected - If present, the option is pre-selected.\n *\n * @property {string} value - Gets or sets the value of the option.\n * @property {boolean} selected - Gets or sets the selected state of the option.\n * @property {boolean} disabled - Gets or sets the disabled state of the option.\n *\n * @fires change - Fired when the option selection changes.\n *\n * @slot - Renders the option text content.\n *\n * @example\n * <!-- Basic option -->\n * <ds-option value=\"option1\">Option 1</ds-option>\n *\n * @example\n * <!-- Pre-selected option -->\n * <ds-option value=\"default\" selected>Default Option</ds-option>\n *\n * @example\n * <!-- Disabled option -->\n * <ds-option value=\"disabled\" disabled>Disabled Option</ds-option>\n *\n * @example\n * <!-- Usage within ds-select -->\n * <ds-select name=\"category\">\n *   <ds-option value=\"electronics\">Electronics</ds-option>\n *   <ds-option value=\"clothing\">Clothing</ds-option>\n *   <ds-option value=\"books\">Books</ds-option>\n * </ds-select>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsOption extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-option\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                :host {\n                    display: none; /* Hidden by default, shown when slotted into select */\n                }\n            </style>\n            <div>\n                <option part=\"option\">\n                    <slot></slot>\n                </option>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'option',\n            ariaConfig,\n            events: [],\n            observedAttributes: ['value', 'disabled', 'selected']\n        });\n        \n        this.option = this.shadowRoot.querySelector('option');\n    }\n    \n    static get observedAttributes() {\n        return ['value', 'disabled', 'selected', 'aria-label', 'aria-describedby'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            case 'value':\n                this.option.value = newValue || '';\n                break;\n            case 'disabled':\n                this.option.disabled = this.hasAttribute('disabled');\n                break;\n            case 'selected':\n                this.option.selected = this.hasAttribute('selected');\n                break;\n        }\n    }\n    get value() {\n        return this.option.value;\n    }\n    set value(val) {\n        this.option.value = val;\n    }\n    get selected() {\n        return this.option.selected;\n    }\n    set selected(val) {\n        this.option.selected = val;\n    }\n    get disabled() {\n        return this.option.disabled;\n    }\n    set disabled(val) {\n        this.option.disabled = val;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.option.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.option.removeAttribute('aria-label');\n        } else {\n            this.option.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.option.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.option.removeAttribute('aria-describedby');\n        } else {\n            this.option.setAttribute('aria-describedby', val);\n        }\n    }\n    // Override validateARIA for option-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        // Accessible name check: must have text or aria-label\n        const optionText = this.textContent.trim();\n        const ariaLabel = this.option.getAttribute('aria-label');\n        if (!optionText && !ariaLabel) {\n            errors.push('Option has no accessible name (text or aria-label required)');\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-option', DsOption);\n\n// Export for use in other modules\nexport default DsOption; ","/**\n * @file ds-label.js\n * @summary A custom Web Component that wraps a native `<label>` element.\n * @description\n * The `ds-label` component provides a styled and functional label element\n * for associating text with form controls. It supports the `for` attribute\n * to create explicit associations with form elements.\n *\n * @element ds-label\n * @extends BaseComponent\n *\n * @attr {string} for - The ID of the form control this label is associated with.\n *\n * @property {string} htmlFor - Gets or sets the ID of the associated form control.\n *\n * @fires click - Fired when the label is clicked.\n *\n * @slot - Renders the label text content.\n *\n * @example\n * <!-- Basic label -->\n * <ds-label>Username</ds-label>\n *\n * @example\n * <!-- Label with explicit association -->\n * <ds-label for=\"username-input\">Username</ds-label>\n * <ds-text-input id=\"username-input\"></ds-text-input>\n *\n * @example\n * <!-- Label with form control -->\n * <ds-label for=\"email-field\">Email Address</ds-label>\n * <ds-text-input type=\"email\" id=\"email-field\" required></ds-text-input>\n *\n * @example\n * <!-- Label with checkbox -->\n * <ds-label for=\"agree-terms\">I agree to the terms and conditions</ds-label>\n * <ds-checkbox id=\"agree-terms\" name=\"agree\" value=\"yes\"></ds-checkbox>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsLabel extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-label\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <label part=\"label\">\n                    <slot></slot>\n                </label>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'label',\n            ariaConfig,\n            events: ['click'],\n            observedAttributes: ['for']\n        });\n        \n        this.label = this.shadowRoot.querySelector('label');\n    }\n    \n    static get observedAttributes() {\n        return ['for', 'aria-label', 'aria-describedby'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n        switch (name) {\n            case 'for':\n                this.label.setAttribute('for', newValue || '');\n                break;\n        }\n    }\n    \n    get htmlFor() {\n        return this.label.htmlFor;\n    }\n    set htmlFor(val) {\n        this.label.htmlFor = val;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.label.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.label.removeAttribute('aria-label');\n        } else {\n            this.label.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.label.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.label.removeAttribute('aria-describedby');\n        } else {\n            this.label.setAttribute('aria-describedby', val);\n        }\n    }\n    // Override validateARIA for label-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        // Check for accessible association\n        const forAttr = this.label.getAttribute('for');\n        if (forAttr && !document.getElementById(forAttr)) {\n            errors.push(`Label 'for' attribute references missing element: ${forAttr}`);\n        }\n        // Accessible name check\n        const labelText = this.textContent.trim();\n        const ariaLabel = this.label.getAttribute('aria-label');\n        if (!labelText && !ariaLabel) {\n            errors.push('Label has no accessible name (text or aria-label required)');\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-label', DsLabel);\n\n// Export for use in other modules\nexport default DsLabel; ","/**\n * @file ds-fieldset.js\n * @summary A custom Web Component that wraps a native `<fieldset>` element.\n * @description\n * The `ds-fieldset` component provides a styled and functional fieldset element\n * for grouping related form controls together. It creates a visual and semantic\n * grouping that improves form organization and accessibility.\n *\n * @element ds-fieldset\n * @extends BaseComponent\n *\n * @slot - Renders form controls and other content within the fieldset.\n *\n * @example\n * <!-- Basic fieldset -->\n * <ds-fieldset>\n *   <ds-legend>Personal Information</ds-legend>\n *   <ds-label for=\"first-name\">First Name</ds-label>\n *   <ds-text-input id=\"first-name\" name=\"firstName\"></ds-text-input>\n *   <ds-label for=\"last-name\">Last Name</ds-label>\n *   <ds-text-input id=\"last-name\" name=\"lastName\"></ds-text-input>\n * </ds-fieldset>\n *\n * @example\n * <!-- Fieldset with radio buttons -->\n * <ds-fieldset>\n *   <ds-legend>Gender</ds-legend>\n *   <ds-radio name=\"gender\" value=\"male\" id=\"male\">Male</ds-radio>\n *   <ds-radio name=\"gender\" value=\"female\" id=\"female\">Female</ds-radio>\n *   <ds-radio name=\"gender\" value=\"other\" id=\"other\">Other</ds-radio>\n * </ds-fieldset>\n *\n * @example\n * <!-- Fieldset with checkboxes -->\n * <ds-fieldset>\n *   <ds-legend>Interests</ds-legend>\n *   <ds-checkbox name=\"interests\" value=\"sports\" id=\"sports\">Sports</ds-checkbox>\n *   <ds-checkbox name=\"interests\" value=\"music\" id=\"music\">Music</ds-checkbox>\n *   <ds-checkbox name=\"interests\" value=\"reading\" id=\"reading\">Reading</ds-checkbox>\n * </ds-fieldset>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsFieldset extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-fieldset\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <fieldset part=\"fieldset\">\n                    <slot></slot>\n                </fieldset>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'fieldset',\n            ariaConfig,\n            events: [],\n            observedAttributes: []\n        });\n        \n        this.fieldset = this.shadowRoot.querySelector('fieldset');\n    }\n    \n    static get observedAttributes() {\n        return ['aria-label', 'aria-describedby'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.fieldset.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.fieldset.removeAttribute('aria-label');\n        } else {\n            this.fieldset.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.fieldset.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.fieldset.removeAttribute('aria-describedby');\n        } else {\n            this.fieldset.setAttribute('aria-describedby', val);\n        }\n    }\n    // Override validateARIA for fieldset-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        // Accessible name check: must have a legend or aria-label\n        const legend = this.fieldset.querySelector('legend,ds-legend');\n        const ariaLabel = this.fieldset.getAttribute('aria-label');\n        if (!legend && !ariaLabel) {\n            errors.push('Fieldset has no accessible name (legend or aria-label required)');\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-fieldset', DsFieldset);\n\n// Export for use in other modules\nexport default DsFieldset; ","/**\n * @file ds-legend.js\n * @summary A custom Web Component that wraps a native `<legend>` element.\n * @description\n * The `ds-legend` component provides a styled and functional legend element\n * for providing a caption or title for a fieldset. It should be used within\n * `<ds-fieldset>` components to describe the group of form controls.\n *\n * @element ds-legend\n * @extends BaseComponent\n *\n * @slot - Renders the legend text content.\n *\n * @example\n * <!-- Basic legend within fieldset -->\n * <ds-fieldset>\n *   <ds-legend>Contact Information</ds-legend>\n *   <ds-label for=\"email\">Email</ds-label>\n *   <ds-text-input type=\"email\" id=\"email\" name=\"email\"></ds-text-input>\n * </ds-fieldset>\n *\n * @example\n * <!-- Legend with form controls -->\n * <ds-fieldset>\n *   <ds-legend>Shipping Address</ds-legend>\n *   <ds-label for=\"street\">Street Address</ds-label>\n *   <ds-text-input id=\"street\" name=\"street\"></ds-text-input>\n *   <ds-label for=\"city\">City</ds-label>\n *   <ds-text-input id=\"city\" name=\"city\"></ds-text-input>\n *   <ds-label for=\"zip\">ZIP Code</ds-label>\n *   <ds-text-input id=\"zip\" name=\"zip\"></ds-text-input>\n * </ds-fieldset>\n *\n * @example\n * <!-- Legend with radio button group -->\n * <ds-fieldset>\n *   <ds-legend>Preferred Contact Method</ds-legend>\n *   <ds-radio name=\"contact\" value=\"email\" id=\"contact-email\">Email</ds-radio>\n *   <ds-radio name=\"contact\" value=\"phone\" id=\"contact-phone\">Phone</ds-radio>\n *   <ds-radio name=\"contact\" value=\"mail\" id=\"contact-mail\">Mail</ds-radio>\n * </ds-fieldset>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsLegend extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-legend\n        const ariaConfig = {\n            staticAriaAttributes: {},\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby'],\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <legend part=\"legend\">\n                    <slot></slot>\n                </legend>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'legend',\n            ariaConfig,\n            events: [],\n            observedAttributes: []\n        });\n        \n        this.legend = this.shadowRoot.querySelector('legend');\n    }\n    \n    static get observedAttributes() {\n        return ['aria-label', 'aria-describedby'];\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        super.attributeChangedCallback(name, oldValue, newValue);\n        if (oldValue === newValue) return;\n    }\n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.legend.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.legend.removeAttribute('aria-label');\n        } else {\n            this.legend.setAttribute('aria-label', val);\n        }\n    }\n    get ariaDescribedBy() { \n        const value = this.legend.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.legend.removeAttribute('aria-describedby');\n        } else {\n            this.legend.setAttribute('aria-describedby', val);\n        }\n    }\n    // Override validateARIA for legend-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        // Accessible name check: must have text or aria-label\n        const legendText = this.textContent.trim();\n        const ariaLabel = this.legend.getAttribute('aria-label');\n        if (!legendText && !ariaLabel) {\n            errors.push('Legend has no accessible name (text or aria-label required)');\n        }\n        return errors;\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-legend', DsLegend);\n\n// Export for use in other modules\nexport default DsLegend; ","/**\n * @file ds-form.js\n * @summary A custom Web Component that wraps a native `<form>` element with enhanced ARIA support.\n * @description\n * The `ds-form` component provides a styled and functional form element with enhanced\n * accessibility features, validation support, and error state management. It wraps a\n * native form element to maintain full HTML form semantics while adding design system\n * styling and ARIA compliance features.\n *\n * @element ds-form\n * @extends BaseComponent\n *\n * @slot - Renders form controls and other content within the form.\n *\n * @example\n * <!-- Basic form -->\n * <ds-form action=\"/api/login\" method=\"post\">\n *   <ds-fieldset>\n *     <ds-legend>Login Information</ds-legend>\n *     <ds-label for=\"username\">Username</ds-label>\n *     <ds-text-input id=\"username\" name=\"username\" required></ds-text-input>\n *     <ds-label for=\"password\">Password</ds-label>\n *     <ds-text-input id=\"password\" name=\"password\" type=\"password\" required></ds-text-input>\n *   </ds-fieldset>\n *   <ds-button type=\"submit\">Login</ds-button>\n * </ds-form>\n *\n * @example\n * <!-- Form with ARIA attributes -->\n * <ds-form \n *   action=\"/api/register\" \n *   method=\"post\" \n *   aria-label=\"User registration form\"\n *   aria-describedby=\"form-instructions\">\n *   <div id=\"form-instructions\">Please fill out all required fields marked with an asterisk (*)</div>\n *   <ds-fieldset>\n *     <ds-legend>Personal Information</ds-legend>\n *     <ds-label for=\"firstName\">First Name *</ds-label>\n *     <ds-text-input id=\"firstName\" name=\"firstName\" required></ds-text-input>\n *   </ds-fieldset>\n *   <ds-button type=\"submit\">Register</ds-button>\n * </ds-form>\n *\n * @example\n * <!-- Form with custom validation -->\n * <ds-form \n *   action=\"/api/contact\" \n *   method=\"post\"\n *   novalidate\n *   data-validation=\"custom\">\n *   <ds-fieldset>\n *     <ds-legend>Contact Information</ds-legend>\n *     <ds-label for=\"email\">Email Address</ds-label>\n *     <ds-text-input id=\"email\" name=\"email\" type=\"email\" required></ds-text-input>\n *   </ds-fieldset>\n *   <ds-button type=\"submit\">Send Message</ds-button>\n * </ds-form>\n */\nimport BaseComponent from './base-component.js';\n\nclass DsForm extends BaseComponent {\n    constructor() {\n        // ARIA config for ds-form\n        const ariaConfig = {\n            staticAriaAttributes: {\n                'role': 'form'\n            },\n            dynamicAriaAttributes: [\n                'aria-label',\n                'aria-describedby',\n                'aria-labelledby'\n            ],\n            requiredAriaAttributes: [],\n            referenceAttributes: ['aria-describedby', 'aria-labelledby']\n        };\n        \n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/styles/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .form-wrapper {\n                    width: 100%;\n                }\n                \n                form[part=\"form\"] {\n                    width: 100%;\n                }\n                \n                .live-region[part=\"live-region\"] {\n                    position: absolute;\n                    left: -10000px;\n                    width: 1px;\n                    height: 1px;\n                    overflow: hidden;\n                }\n                \n                .live-region[part=\"live-region\"]:not([hidden]) {\n                    position: static;\n                    width: auto;\n                    height: auto;\n                    margin-top: var(--ds-spacing-sm);\n                    padding: var(--ds-spacing-sm);\n                    border-radius: var(--ds-form-border-radius);\n                    font-size: 0.9em;\n                }\n                \n                .live-region[part=\"live-region\"][data-type=\"error\"] {\n                    background-color: var(--ds-form-error-background);\n                    color: var(--ds-form-error-color);\n                    border: 1px solid var(--ds-form-error-border);\n                }\n                \n                .live-region[part=\"live-region\"][data-type=\"success\"] {\n                    background-color: var(--ds-form-success-background, #d4edda);\n                    color: var(--ds-form-success-color, #155724);\n                    border: 1px solid var(--ds-form-success-border, #c3e6cb);\n                }\n                \n                .live-region[part=\"live-region\"][data-type=\"info\"] {\n                    background-color: var(--ds-form-info-background, #d1ecf1);\n                    color: var(--ds-form-info-color, #0c5460);\n                    border: 1px solid var(--ds-form-info-border, #bee5eb);\n                }\n            </style>\n            <div class=\"form-wrapper\">\n                <form part=\"form\" novalidate>\n                    <slot></slot>\n                </form>\n                <div \n                    part=\"live-region\" \n                    class=\"live-region\"\n                    aria-live=\"polite\" \n                    aria-atomic=\"true\" \n                    hidden>\n                </div>\n            </div>\n        `;\n        \n        super({\n            template: template.innerHTML,\n            targetSelector: 'form',\n            ariaConfig,\n            events: ['submit', 'reset', 'input', 'change', 'invalid']\n        });\n        \n        this.form = this.shadowRoot.querySelector('form');\n        this.liveRegion = this.shadowRoot.querySelector('[part=\"live-region\"]');\n        \n        // Form state tracking\n        this.formState = {\n            submitted: false,\n            valid: true,\n            errors: new Map(),\n            hasValidationErrors: false\n        };\n        \n        // Setup form event handlers\n        this.setupFormHandlers();\n    }\n    \n    static get observedAttributes() {\n        return [\n            'action',\n            'method', \n            'enctype',\n            'target',\n            'novalidate',\n            'autocomplete',\n            'aria-label',\n            'aria-describedby',\n            'aria-labelledby'\n        ];\n    }\n    \n    /**\n     * Sets up form event handlers for validation and accessibility\n     */\n    setupFormHandlers() {\n        // Handle form submission\n        this.form.addEventListener('submit', (event) => {\n            this.handleFormSubmit(event);\n        });\n        \n        // Handle form reset\n        this.form.addEventListener('reset', (event) => {\n            this.handleFormReset(event);\n        });\n        \n        // Handle input changes for real-time validation feedback\n        this.form.addEventListener('input', (event) => {\n            this.handleInputChange(event);\n        });\n        \n        // Handle invalid events for custom validation\n        this.form.addEventListener('invalid', (event) => {\n            this.handleInvalidEvent(event);\n        });\n        \n        // Handle change events for form state tracking\n        this.form.addEventListener('change', (event) => {\n            this.handleFormChange(event);\n        });\n    }\n    \n    /**\n     * Handles form submission with validation and accessibility support\n     * @param {Event} event - The submit event\n     */\n    handleFormSubmit(event) {\n        this.formState.submitted = true;\n        \n        // Check if form is valid using our custom validation\n        const formControls = this.querySelectorAll('input, select, textarea, ds-text-input, ds-select, ds-textarea, ds-checkbox, ds-radio');\n        let hasErrors = false;\n        \n        formControls.forEach(control => {\n            if (control.hasAttribute('required')) {\n                const value = control.value || '';\n                if (!value.trim()) {\n                    hasErrors = true;\n                    this.validateInput(control);\n                }\n            }\n        });\n        \n        if (hasErrors) {\n            event.preventDefault();\n            this.handleValidationErrors();\n            return;\n        }\n        \n        // Form is valid, allow submission\n        this.clearLiveRegion();\n        this.announceToScreenReader('Form submitted successfully');\n    }\n    \n    /**\n     * Handles form reset\n     * @param {Event} event - The reset event\n     */\n    handleFormReset(event) {\n        this.formState = {\n            submitted: false,\n            valid: true,\n            errors: new Map(),\n            hasValidationErrors: false\n        };\n        \n        this.clearLiveRegion();\n        this.announceToScreenReader('Form has been reset');\n    }\n    \n    /**\n     * Handles input changes for real-time validation\n     * @param {Event} event - The input event\n     */\n    handleInputChange(event) {\n        const input = event.target;\n        \n        // Clear previous error for this input\n        if (this.formState.errors.has(input)) {\n            this.formState.errors.delete(input);\n            this.updateLiveRegion();\n        }\n        \n        // If form was previously submitted, validate on input change\n        if (this.formState.submitted) {\n            this.validateInput(input);\n        }\n    }\n    \n    /**\n     * Handles invalid events for custom validation\n     * @param {Event} event - The invalid event\n     */\n    handleInvalidEvent(event) {\n        event.preventDefault();\n        this.validateInput(event.target);\n    }\n    \n    /**\n     * Handles form change events\n     * @param {Event} event - The change event\n     */\n    handleFormChange(event) {\n        // Track form state changes\n        this.updateFormValidity();\n    }\n    \n    /**\n     * Validates a single input element\n     * @param {HTMLElement} input - The input element to validate\n     */\n    validateInput(input) {\n        let isValid = true;\n        let errorMessage = '';\n        \n        // Handle different types of inputs\n        if (input.checkValidity) {\n            // Native form elements\n            isValid = input.checkValidity();\n            errorMessage = input.validationMessage || 'This field is invalid';\n        } else if (input.tagName && input.tagName.toLowerCase().includes('ds-')) {\n            // Design system components\n            const required = input.hasAttribute('required');\n            const value = input.value || '';\n            \n            if (required && !value.trim()) {\n                isValid = false;\n                errorMessage = 'This field is required';\n            } else if (input.type === 'email' && value) {\n                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                if (!emailRegex.test(value)) {\n                    isValid = false;\n                    errorMessage = 'Please enter a valid email address';\n                }\n            }\n        }\n        \n        if (!isValid) {\n            this.formState.errors.set(input, errorMessage);\n            this.formState.hasValidationErrors = true;\n        } else {\n            this.formState.errors.delete(input);\n        }\n        \n        this.updateFormValidity();\n        this.updateLiveRegion();\n    }\n    \n    /**\n     * Updates the overall form validity state\n     */\n    updateFormValidity() {\n        this.formState.valid = this.form.checkValidity();\n        \n        // Update ARIA attributes based on form state\n        if (this.formState.hasValidationErrors) {\n            this.form.setAttribute('aria-invalid', 'true');\n        } else {\n            this.form.removeAttribute('aria-invalid');\n        }\n    }\n    \n    /**\n     * Handles validation errors and announces them to screen readers\n     */\n    handleValidationErrors() {\n        this.formState.hasValidationErrors = true;\n        this.formState.valid = false;\n        \n        // Collect all error messages\n        const errorMessages = Array.from(this.formState.errors.values());\n        \n        if (errorMessages.length > 0) {\n            const errorText = `Form has ${errorMessages.length} validation error${errorMessages.length > 1 ? 's' : ''}: ${errorMessages.join('. ')}`;\n            this.announceToScreenReader(errorText, 'error');\n        }\n        \n        this.updateLiveRegion();\n    }\n    \n    /**\n     * Updates the live region with current form state\n     */\n    updateLiveRegion() {\n        if (this.formState.errors.size === 0) {\n            this.clearLiveRegion();\n            return;\n        }\n        \n        const errorMessages = Array.from(this.formState.errors.values());\n        const errorText = errorMessages.join('. ');\n        \n        this.liveRegion.textContent = errorText;\n        this.liveRegion.setAttribute('data-type', 'error');\n        this.liveRegion.hidden = false;\n    }\n    \n    /**\n     * Clears the live region\n     */\n    clearLiveRegion() {\n        this.liveRegion.textContent = '';\n        this.liveRegion.hidden = true;\n        this.liveRegion.removeAttribute('data-type');\n    }\n    \n    /**\n     * Announces a message to screen readers\n     * @param {string} message - The message to announce\n     * @param {string} type - The type of message (error, success, info)\n     */\n    announceToScreenReader(message, type = 'info') {\n        this.liveRegion.textContent = message;\n        this.liveRegion.setAttribute('data-type', type);\n        this.liveRegion.hidden = false;\n        \n        // Hide the message after a delay\n        setTimeout(() => {\n            this.clearLiveRegion();\n        }, 5000);\n    }\n    \n    // Form attribute accessors\n    get action() { return this.form.action; }\n    set action(val) { this.form.action = val; }\n    \n    get method() { return this.form.method; }\n    set method(val) { this.form.method = val; }\n    \n    get enctype() { return this.form.enctype; }\n    set enctype(val) { this.form.enctype = val; }\n    \n    get target() { return this.form.target; }\n    set target(val) { this.form.target = val; }\n    \n    get novalidate() { return this.form.hasAttribute('novalidate'); }\n    set novalidate(val) { \n        if (val) {\n            this.form.setAttribute('novalidate', '');\n        } else {\n            this.form.removeAttribute('novalidate');\n        }\n    }\n    \n    get autocomplete() { return this.form.autocomplete; }\n    set autocomplete(val) { this.form.autocomplete = val; }\n    \n    // ARIA property accessors\n    get ariaLabel() { \n        const value = this.form.getAttribute('aria-label');\n        return value === null ? null : value;\n    }\n    set ariaLabel(val) { \n        if (val === null || val === undefined) {\n            this.form.removeAttribute('aria-label');\n        } else {\n            this.form.setAttribute('aria-label', val);\n        }\n    }\n    \n    get ariaDescribedBy() { \n        const value = this.form.getAttribute('aria-describedby');\n        return value === null ? null : value;\n    }\n    set ariaDescribedBy(val) { \n        if (val === null || val === undefined) {\n            this.form.removeAttribute('aria-describedby');\n        } else {\n            this.form.setAttribute('aria-describedby', val);\n        }\n    }\n    \n    get ariaLabelledBy() { \n        const value = this.form.getAttribute('aria-labelledby');\n        return value === null ? null : value;\n    }\n    set ariaLabelledBy(val) { \n        if (val === null || val === undefined) {\n            this.form.removeAttribute('aria-labelledby');\n        } else {\n            this.form.setAttribute('aria-labelledby', val);\n        }\n    }\n    \n    /**\n     * Submits the form programmatically\n     */\n    submit() {\n        this.form.submit();\n    }\n    \n    /**\n     * Resets the form programmatically\n     */\n    reset() {\n        this.form.reset();\n        this.handleFormReset(new Event('reset'));\n    }\n    \n    /**\n     * Checks if the form is valid\n     * @returns {boolean} True if the form is valid\n     */\n    checkValidity() {\n        return this.form.checkValidity();\n    }\n    \n    /**\n     * Reports validity of the form\n     * @returns {boolean} True if the form is valid\n     */\n    reportValidity() {\n        return this.form.reportValidity();\n    }\n    \n    /**\n     * Gets form data as FormData object\n     * @returns {FormData} The form data\n     */\n    getFormData() {\n        const formData = new FormData();\n        \n        // Get all form controls (native and custom)\n        const formControls = this.querySelectorAll('input, select, textarea, ds-text-input, ds-select, ds-textarea, ds-checkbox, ds-radio');\n        \n        formControls.forEach(control => {\n            const name = control.name || control.getAttribute('name');\n            if (!name) return;\n            \n            let value = '';\n            \n            if (control.tagName && control.tagName.toLowerCase().includes('ds-')) {\n                // Design system components\n                if (control.type === 'checkbox') {\n                    if (control.checked) {\n                        value = control.value || 'on';\n                    }\n                } else if (control.type === 'radio') {\n                    if (control.checked) {\n                        value = control.value || 'on';\n                    }\n                } else {\n                    value = control.value || '';\n                }\n            } else {\n                // Native form elements\n                if (control.type === 'checkbox') {\n                    if (control.checked) {\n                        value = control.value || 'on';\n                    }\n                } else if (control.type === 'radio') {\n                    if (control.checked) {\n                        value = control.value || 'on';\n                    }\n                } else {\n                    value = control.value || '';\n                }\n            }\n            \n            if (value !== '') {\n                formData.append(name, value);\n            }\n        });\n        \n        return formData;\n    }\n    \n    /**\n     * Gets form data as a plain object\n     * @returns {Object} The form data as key-value pairs\n     */\n    getFormDataAsObject() {\n        const formData = this.getFormData();\n        const data = {};\n        \n        for (const [key, value] of formData.entries()) {\n            data[key] = value;\n        }\n        \n        return data;\n    }\n    \n    // Override validateARIA for form-specific checks\n    validateARIA() {\n        const errors = super.validateARIA ? super.validateARIA() : [];\n        \n        // Check for accessible name (aria-label, aria-labelledby, or form title)\n        const ariaLabel = this.form.getAttribute('aria-label');\n        const ariaLabelledBy = this.form.getAttribute('aria-labelledby');\n        const formTitle = this.querySelector('h1, h2, h3, h4, h5, h6');\n        \n        if (!ariaLabel && !ariaLabelledBy && !formTitle) {\n            errors.push('Form should have an accessible name (aria-label, aria-labelledby, or heading)');\n        }\n        \n        // Check for proper form structure\n        const hasFormControls = this.querySelector('input, select, textarea, ds-text-input, ds-select, ds-textarea, ds-checkbox, ds-radio, button[type=\"submit\"]');\n        if (!hasFormControls) {\n            errors.push('Form should contain form controls');\n        }\n        \n        return errors;\n    }\n}\n\n// Register the component\ncustomElements.define('ds-form', DsForm);\n\nexport default DsForm; ","/**\n * @file init.js\n * @summary Design system initialization and configuration module\n * @description\n * Provides a way to initialize and configure the design system with custom\n * design tokens, themes, and settings. This allows developers to customize\n * the appearance and behavior of all components without modifying the core code.\n */\n\n/**\n * @typedef {Object} DesignTokens\n * @property {Object} colors - Color palette configuration\n * @property {string} colors.primary - Primary brand color\n * @property {string} colors.primaryDark - Darker shade of primary color\n * @property {string} colors.secondary - Secondary brand color\n * @property {string} colors.text - Main text color\n * @property {string} colors.background - Main background color\n * @property {string} colors.success - Success state color\n * @property {string} colors.error - Error state color\n * @property {string} colors.warning - Warning state color\n * @property {string} colors.info - Info state color\n * @property {Object} spacing - Spacing scale configuration\n * @property {string} spacing.xs - Extra small spacing\n * @property {string} spacing.sm - Small spacing\n * @property {string} spacing.md - Medium spacing\n * @property {string} spacing.lg - Large spacing\n * @property {string} spacing.xl - Extra large spacing\n * @property {string} spacing.pagePadding - Page-level padding\n * @property {Object} typography - Typography configuration\n * @property {string} typography.fontFamily - Primary font family\n * @property {string} typography.fontSize - Base font size\n * @property {string} typography.lineHeight - Base line height\n * @property {Object} forms - Form-specific configuration\n * @property {string} forms.borderColor - Form border color\n * @property {string} forms.borderRadius - Form border radius\n * @property {string} forms.textColor - Form text color\n * @property {string} forms.errorColor - Form error color\n * @property {string} forms.errorBackground - Form error background\n * @property {string} forms.errorBorder - Form error border\n * @property {string} forms.successColor - Form success color\n * @property {string} forms.successBackground - Form success background\n * @property {string} forms.successBorder - Form success border\n * @property {string} forms.infoColor - Form info color\n * @property {string} forms.infoBackground - Form info background\n * @property {string} forms.infoBorder - Form info border\n * @property {Object} layout - Layout configuration\n * @property {string} layout.pageMaxWidth - Maximum page width\n * @property {string} layout.containerPadding - Container padding\n * @property {Object} components - Component-specific overrides\n * @property {Object} components.button - Button component configuration\n * @property {string} components.button.borderRadius - Button border radius\n * @property {string} components.button.padding - Button padding\n * @property {Object} components.input - Input component configuration\n * @property {string} components.input.borderRadius - Input border radius\n * @property {string} components.input.padding - Input padding\n */\n\n/**\n * Default design tokens for the design system\n * @type {DesignTokens}\n */\nconst DEFAULT_TOKENS = {\n    colors: {\n        primary: '#007bff',\n        primaryDark: '#0056b3',\n        secondary: '#6c757d',\n        text: '#212529',\n        background: '#ffffff',\n        success: '#28a745',\n        error: '#dc3545',\n        warning: '#ffc107',\n        info: '#17a2b8'\n    },\n    spacing: {\n        xs: '4px',\n        sm: '8px',\n        md: '16px',\n        lg: '24px',\n        xl: '32px',\n        pagePadding: '20px'\n    },\n    typography: {\n        fontFamily: 'system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n        fontSize: '16px',\n        lineHeight: '1.5'\n    },\n    forms: {\n        borderColor: '#ced4da',\n        borderRadius: '4px',\n        textColor: '#495057',\n        errorColor: '#dc3545',\n        errorBackground: '#f8d7da',\n        errorBorder: '#f5c6cb',\n        successColor: '#155724',\n        successBackground: '#d4edda',\n        successBorder: '#c3e6cb',\n        infoColor: '#0c5460',\n        infoBackground: '#d1ecf1',\n        infoBorder: '#bee5eb'\n    },\n    layout: {\n        pageMaxWidth: '1200px',\n        containerPadding: '20px'\n    },\n    components: {\n        button: {\n            borderRadius: '4px',\n            padding: '8px 16px'\n        },\n        input: {\n            borderRadius: '4px',\n            padding: '8px 12px'\n        }\n    }\n};\n\n/**\n * Merges user tokens with defaults, handling nested objects\n * @param {Object} defaults - Default tokens\n * @param {Object} userTokens - User-provided tokens\n * @returns {Object} Merged tokens\n */\nfunction deepMerge(defaults, userTokens) {\n    const result = { ...defaults };\n    \n    for (const key in userTokens) {\n        if (userTokens.hasOwnProperty(key)) {\n            if (typeof userTokens[key] === 'object' && userTokens[key] !== null && !Array.isArray(userTokens[key])) {\n                result[key] = deepMerge(defaults[key] || {}, userTokens[key]);\n            } else {\n                result[key] = userTokens[key];\n            }\n        }\n    }\n    \n    return result;\n}\n\n/**\n * Converts design tokens to CSS custom properties\n * @param {DesignTokens} tokens - Design tokens object\n * @returns {string} CSS custom properties string\n */\nfunction tokensToCSS(tokens) {\n    const cssProperties = [];\n    \n    // Convert colors\n    for (const [key, value] of Object.entries(tokens.colors)) {\n        cssProperties.push(`--ds-color-${key}: ${value};`);\n    }\n    \n    // Convert spacing\n    for (const [key, value] of Object.entries(tokens.spacing)) {\n        cssProperties.push(`--ds-spacing-${key}: ${value};`);\n    }\n    \n    // Convert typography\n    for (const [key, value] of Object.entries(tokens.typography)) {\n        cssProperties.push(`--ds-font-${key}: ${value};`);\n    }\n    \n    // Convert forms\n    for (const [key, value] of Object.entries(tokens.forms)) {\n        cssProperties.push(`--ds-form-${key}: ${value};`);\n    }\n    \n    // Convert layout\n    for (const [key, value] of Object.entries(tokens.layout)) {\n        cssProperties.push(`--ds-${key}: ${value};`);\n    }\n    \n    // Convert component-specific tokens\n    for (const [component, config] of Object.entries(tokens.components)) {\n        for (const [key, value] of Object.entries(config)) {\n            cssProperties.push(`--ds-${component}-${key}: ${value};`);\n        }\n    }\n    \n    return cssProperties.join('\\n  ');\n}\n\n/**\n * Injects CSS custom properties into the document\n * @param {string} css - CSS custom properties string\n */\nfunction injectCSS(css) {\n    const styleId = 'ds-design-tokens';\n    let styleElement = document.getElementById(styleId);\n    \n    if (!styleElement) {\n        styleElement = document.createElement('style');\n        styleElement.id = styleId;\n        document.head.appendChild(styleElement);\n    }\n    \n    styleElement.textContent = `:root {\\n  ${css}\\n}`;\n}\n\n/**\n * Validates design tokens for required properties and correct types\n * @param {DesignTokens} tokens - Design tokens to validate\n * @returns {Object} Validation result with isValid boolean and errors array\n */\nfunction validateTokens(tokens) {\n    const errors = [];\n    \n    // Validate colors\n    if (tokens.colors) {\n        const requiredColors = ['primary', 'text', 'background'];\n        for (const color of requiredColors) {\n            if (!tokens.colors[color]) {\n                errors.push(`Missing required color: ${color}`);\n            }\n        }\n    } else {\n        errors.push('Missing colors configuration');\n    }\n    \n    // Validate spacing\n    if (tokens.spacing) {\n        const requiredSpacing = ['xs', 'sm', 'md', 'lg'];\n        for (const space of requiredSpacing) {\n            if (!tokens.spacing[space]) {\n                errors.push(`Missing required spacing: ${space}`);\n            }\n        }\n    } else {\n        errors.push('Missing spacing configuration');\n    }\n    \n    // Validate typography\n    if (tokens.typography) {\n        if (!tokens.typography.fontFamily) {\n            errors.push('Missing required typography.fontFamily');\n        }\n    } else {\n        errors.push('Missing typography configuration');\n    }\n    \n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n\n/**\n * Initializes the design system with custom tokens\n * @param {DesignTokens} userTokens - User-provided design tokens\n * @param {Object} options - Initialization options\n * @param {boolean} options.validate - Whether to validate tokens (default: true)\n * @param {boolean} options.injectCSS - Whether to inject CSS into document (default: true)\n * @param {boolean} options.console - Whether to log initialization info (default: true)\n * @returns {Object} Initialization result\n */\nexport function init(userTokens = {}, options = {}) {\n    const {\n        validate = true,\n        injectCSS: shouldInjectCSS = true,\n        console: shouldLog = true\n    } = options;\n    \n    try {\n        // Merge user tokens with defaults\n        const tokens = deepMerge(DEFAULT_TOKENS, userTokens);\n        \n        // Validate tokens if requested\n        if (validate) {\n            const validation = validateTokens(tokens);\n            if (!validation.isValid) {\n                const errorMessage = `Design system initialization failed:\\n${validation.errors.join('\\n')}`;\n                if (shouldLog) {\n                    console.error(errorMessage);\n                }\n                return {\n                    success: false,\n                    errors: validation.errors,\n                    tokens: null\n                };\n            }\n        }\n        \n        // Convert tokens to CSS\n        const css = tokensToCSS(tokens);\n        \n        // Inject CSS if requested and in browser environment\n        if (shouldInjectCSS && typeof document !== 'undefined') {\n            injectCSS(css);\n        }\n        \n        // Log success if requested\n        if (shouldLog) {\n            console.log('🎨 Design system initialized successfully');\n            console.log('📦 Tokens applied:', tokens);\n        }\n        \n        return {\n            success: true,\n            errors: [],\n            tokens,\n            css\n        };\n        \n    } catch (error) {\n        const errorMessage = `Design system initialization failed: ${error.message}`;\n        if (shouldLog) {\n            console.error(errorMessage);\n        }\n        return {\n            success: false,\n            errors: [error.message],\n            tokens: null\n        };\n    }\n}\n\n/**\n * Updates design tokens after initialization\n * @param {DesignTokens} newTokens - New design tokens\n * @param {Object} options - Update options\n * @param {boolean} options.injectCSS - Whether to inject updated CSS (default: true)\n * @returns {Object} Update result\n */\nexport function updateTokens(newTokens, options = {}) {\n    const { injectCSS: shouldInjectCSS = true } = options;\n    \n    try {\n        // Merge with current tokens (stored in CSS custom properties)\n        const currentTokens = getCurrentTokens();\n        const tokens = deepMerge(currentTokens, newTokens);\n        \n        // Convert to CSS and inject\n        const css = tokensToCSS(tokens);\n        if (shouldInjectCSS && typeof document !== 'undefined') {\n            injectCSS(css);\n        }\n        \n        console.log('🎨 Design tokens updated successfully');\n        \n        return {\n            success: true,\n            tokens,\n            css\n        };\n        \n    } catch (error) {\n        console.error(`Failed to update design tokens: ${error.message}`);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n\n/**\n * Gets current design tokens from CSS custom properties\n * @returns {Object} Current design tokens\n */\nexport function getCurrentTokens() {\n    if (typeof document === 'undefined') {\n        return DEFAULT_TOKENS;\n    }\n    \n    const style = getComputedStyle(document.documentElement);\n    const tokens = { ...DEFAULT_TOKENS };\n    \n    // Extract colors\n    for (const key of Object.keys(DEFAULT_TOKENS.colors)) {\n        const value = style.getPropertyValue(`--ds-color-${key}`).trim();\n        if (value) {\n            tokens.colors[key] = value;\n        }\n    }\n    \n    // Extract spacing\n    for (const key of Object.keys(DEFAULT_TOKENS.spacing)) {\n        const value = style.getPropertyValue(`--ds-spacing-${key}`).trim();\n        if (value) {\n            tokens.spacing[key] = value;\n        }\n    }\n    \n    // Extract typography\n    for (const key of Object.keys(DEFAULT_TOKENS.typography)) {\n        const value = style.getPropertyValue(`--ds-font-${key}`).trim();\n        if (value) {\n            tokens.typography[key] = value;\n        }\n    }\n    \n    // Extract forms\n    for (const key of Object.keys(DEFAULT_TOKENS.forms)) {\n        const value = style.getPropertyValue(`--ds-form-${key}`).trim();\n        if (value) {\n            tokens.forms[key] = value;\n        }\n    }\n    \n    return tokens;\n}\n\n/**\n * Resets design tokens to defaults\n * @returns {Object} Reset result\n */\nexport function resetTokens() {\n    return init({}, { validate: false, console: false });\n}\n\n// Export default tokens for reference\nexport { DEFAULT_TOKENS }; ","/**\n * @file index.js\n * @summary Main entry point for the standards-ui design system\n * @description Exports all web components and provides a convenient way to import the entire design system\n */\n\n// Import all components\nimport './components/ds-page.js';\nimport './components/ds-row.js';\nimport './components/ds-col.js';\nimport './components/ds-text-input.js';\nimport './components/ds-button.js';\nimport './components/ds-radio.js';\nimport './components/ds-checkbox.js';\nimport './components/ds-textarea.js';\nimport './components/ds-select.js';\nimport './components/ds-option.js';\nimport './components/ds-label.js';\nimport './components/ds-fieldset.js';\nimport './components/ds-legend.js';\nimport './components/ds-form.js';\n\n// Export component classes for advanced usage\nexport { default as DsPage } from './components/ds-page.js';\nexport { default as DsRow } from './components/ds-row.js';\nexport { default as DsCol } from './components/ds-col.js';\nexport { default as DsTextInput } from './components/ds-text-input.js';\nexport { default as DsButton } from './components/ds-button.js';\nexport { default as DsRadio } from './components/ds-radio.js';\nexport { default as DsCheckbox } from './components/ds-checkbox.js';\nexport { default as DsTextarea } from './components/ds-textarea.js';\nexport { default as DsSelect } from './components/ds-select.js';\nexport { default as DsOption } from './components/ds-option.js';\nexport { default as DsLabel } from './components/ds-label.js';\nexport { default as DsFieldset } from './components/ds-fieldset.js';\nexport { default as DsLegend } from './components/ds-legend.js';\nexport { default as DsForm } from './components/ds-form.js';\n\n// Export the base component for custom component development\nexport { default as BaseComponent } from './components/base-component.js';\n\n// Export initialization functions\nexport { init, updateTokens, getCurrentTokens, resetTokens, DEFAULT_TOKENS } from './init.js';\n\n// Version info\nexport const VERSION = '1.0.0'; "],"names":["BaseComponent","HTMLElement","constructor","options","super","ariaConfig","this","requiredAriaAttributes","staticAriaAttributes","dynamicAriaAttributes","ariaObserved","display","observedAttributes","Array","from","Set","attributeHandlers","events","targetSelector","template","addAriaAttributeHandlers","setupShadowDOM","setupARIA","setupEventListeners","shadowRoot","attachShadow","mode","document","createElement","innerHTML","appendChild","content","cloneNode","targetElement","querySelector","length","forEach","eventType","addEventListener","event","newEvent","Event","bubbles","composed","cancelable","Object","defineProperty","value","writable","e","dispatchEvent","attributeChangedCallback","name","oldValue","newValue","includes","createAriaAttributeHandler","call","validateAndWarnARIA","handler","connectedCallback","style","offsetHeight","attr","getAttribute","setTimeout","warnMissingARIA","createBooleanHandler","propertyName","attributeName","hasAttribute","createStringHandler","defaultValue","createSetAttributeHandler","removeAttribute","setAttribute","createPropertyAccessor","get","set","val","entries","staticValue","console","warn","createAriaPropertyHandler","createAriaStateHandler","stateName","validateAriaTokens","allowedTokens","join","checkAriaReferences","ids","split","id","getElementById","validateARIA","errors","push","tokenValidation","referenceAttributes","refError","msg","DsPage","setupComponent","pageContainer","customElements","define","DsRow","rowContainer","justifyContent","alignItems","gap","flexWrap","ariaLabel","ariaDescribedBy","DsCol","colContainer","flexGrow","flexShrink","flexBasis","alignSelf","order","DsTextInput","input","type","placeholder","disabled","readOnly","required","readonly","ariaRequired","ariaInvalid","ariaAutocomplete","ariaControls","ariaActiveDescendant","hostAriaLabel","hostAriaLabelledBy","inputAriaLabel","inputAriaLabelledBy","DsButton","role","button","classList","remove","add","variant","ariaPressed","ariaExpanded","ariaHasPopup","hostTextContent","textContent","trim","buttonAriaLabel","buttonAriaLabelledBy","DsRadio","radio","checked","ariaChecked","radioAriaLabel","radioAriaLabelledBy","DsCheckbox","checkbox","checkboxAriaLabel","checkboxAriaLabelledBy","DsTextarea","textarea","rows","cols","textareaAriaLabel","textareaAriaLabelledBy","DsSelect","select","setupSlotListener","multiple","size","target","currentTarget","handleSlotChange","assignedNodes","node","nodeType","Node","ELEMENT_NODE","tagName","option","selected","innerText","DsOption","optionText","DsLabel","label","htmlFor","forAttr","labelText","DsFieldset","fieldset","legend","DsLegend","legendText","DsForm","form","liveRegion","formState","submitted","valid","Map","hasValidationErrors","setupFormHandlers","handleFormSubmit","handleFormReset","handleInputChange","handleInvalidEvent","handleFormChange","formControls","querySelectorAll","hasErrors","control","validateInput","preventDefault","handleValidationErrors","clearLiveRegion","announceToScreenReader","has","delete","updateLiveRegion","updateFormValidity","isValid","errorMessage","checkValidity","validationMessage","toLowerCase","test","errorMessages","values","errorText","hidden","message","action","method","enctype","novalidate","autocomplete","ariaLabelledBy","submit","reset","reportValidity","getFormData","formData","FormData","append","getFormDataAsObject","data","key","formTitle","DEFAULT_TOKENS","colors","primary","primaryDark","secondary","text","background","success","error","warning","info","spacing","xs","sm","md","lg","xl","pagePadding","typography","fontFamily","fontSize","lineHeight","forms","borderColor","borderRadius","textColor","errorColor","errorBackground","errorBorder","successColor","successBackground","successBorder","infoColor","infoBackground","infoBorder","layout","pageMaxWidth","containerPadding","components","padding","deepMerge","defaults","userTokens","result","hasOwnProperty","isArray","tokensToCSS","tokens","cssProperties","component","config","injectCSS","css","styleId","styleElement","head","init","validate","shouldInjectCSS","shouldLog","validation","requiredColors","color","requiredSpacing","space","validateTokens","log","getCurrentTokens","getComputedStyle","documentElement","keys","getPropertyValue","newTokens"],"mappings":"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"}