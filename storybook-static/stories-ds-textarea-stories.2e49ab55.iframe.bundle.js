(self.webpackChunkai_design_system=self.webpackChunkai_design_system||[]).push([[311],{"./src/components/ds-textarea.js":()=>{class DsTextarea extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <textarea id="textarea" part="textarea">\n                    <slot></slot>\n                </textarea>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.textarea=shadowRoot.querySelector("textarea"),this.setupEventListeners()}static get observedAttributes(){return["value","placeholder","rows","cols","disabled","readonly","required","name","id"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"value":this.textarea.value=newValue||"";break;case"placeholder":this.textarea.placeholder=newValue||"";break;case"rows":this.textarea.rows=newValue||"";break;case"cols":this.textarea.cols=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.textarea.disabled=!0:this.textarea.disabled=!1;break;case"readonly":this.hasAttribute("readonly")?this.textarea.readOnly=!0:this.textarea.readOnly=!1;break;case"required":this.hasAttribute("required")?this.textarea.required=!0:this.textarea.required=!1;break;case"name":this.textarea.name=newValue||"";break;case"id":this.textarea.id=newValue||""}}setupEventListeners(){["input","change","focus","blur"].forEach(eventType=>{this.textarea.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});"input"!==eventType&&"change"!==eventType||(newEvent.target=this,newEvent.currentTarget=this),this.dispatchEvent(newEvent)})})}get value(){return this.textarea.value}set value(val){this.textarea.value=val}get placeholder(){return this.textarea.placeholder}set placeholder(val){this.textarea.placeholder=val}get rows(){return this.textarea.rows}set rows(val){this.textarea.rows=val}get cols(){return this.textarea.cols}set cols(val){this.textarea.cols=val}get disabled(){return this.textarea.disabled}set disabled(val){this.textarea.disabled=val}get readonly(){return this.textarea.readOnly}set readonly(val){this.textarea.readOnly=val}get required(){return this.textarea.required}set required(val){this.textarea.required=val}get name(){return this.textarea.name}set name(val){this.textarea.name=val}connectedCallback(){this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("placeholder",null,this.getAttribute("placeholder")),this.attributeChangedCallback("rows",null,this.getAttribute("rows")),this.attributeChangedCallback("cols",null,this.getAttribute("cols")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("readonly",null,this.getAttribute("readonly")),this.attributeChangedCallback("required",null,this.getAttribute("required")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("id",null,this.getAttribute("id"))}}customElements.define("ds-textarea",DsTextarea)},"./src/stories/ds-textarea.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,Large:()=>Large,Readonly:()=>Readonly,Required:()=>Required,Small:()=>Small,WithValue:()=>WithValue,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./src/components/ds-textarea.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ds-textarea",component:"ds-textarea",parameters:{docs:{description:{component:"A textarea component that wraps native textarea elements with support for multi-line text input."}}},argTypes:{value:{control:"text",description:"The current value of the textarea"},placeholder:{control:"text",description:"Placeholder text for the textarea"},rows:{control:"number",description:"Number of visible rows"},cols:{control:"number",description:"Number of visible columns"},disabled:{control:"boolean",description:"Whether the textarea is disabled"},readonly:{control:"boolean",description:"Whether the textarea is read-only"},required:{control:"boolean",description:"Whether the textarea is required"},name:{control:"text",description:"The name attribute for form submission"},id:{control:"text",description:"The unique identifier for the textarea"}}},Template=args=>{const element=document.createElement("ds-textarea");return args.value&&element.setAttribute("value",args.value),args.placeholder&&element.setAttribute("placeholder",args.placeholder),args.rows&&element.setAttribute("rows",args.rows),args.cols&&element.setAttribute("cols",args.cols),args.disabled&&element.setAttribute("disabled",""),args.readonly&&element.setAttribute("readonly",""),args.required&&element.setAttribute("required",""),args.name&&element.setAttribute("name",args.name),args.id&&element.setAttribute("id",args.id),element},Default=Template.bind({});Default.args={placeholder:"Enter your message here...",rows:4,name:"message"};const WithValue=Template.bind({});WithValue.args={value:"This is a pre-filled textarea with some content that demonstrates how the component handles existing text.",rows:4,name:"message"};const Large=Template.bind({});Large.args={placeholder:"Enter a longer message...",rows:8,cols:50,name:"long-message"};const Small=Template.bind({});Small.args={placeholder:"Short message...",rows:2,cols:30,name:"short-message"};const Disabled=Template.bind({});Disabled.args={value:"This textarea is disabled and cannot be edited.",rows:4,disabled:!0,name:"disabled-message"};const Readonly=Template.bind({});Readonly.args={value:"This textarea is read-only and cannot be edited.",rows:4,readonly:!0,name:"readonly-message"};const Required=Template.bind({});Required.args={placeholder:"This field is required...",rows:4,required:!0,name:"required-message"};const __namedExportsOrder=["Default","WithValue","Large","Small","Disabled","Readonly","Required"]}}]);