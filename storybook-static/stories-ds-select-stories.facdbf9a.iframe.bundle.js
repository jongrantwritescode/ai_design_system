(self.webpackChunkai_design_system=self.webpackChunkai_design_system||[]).push([[145],{"./src/components/ds-option.js":()=>{class DsOption extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML="\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: none; /* Hidden by default, shown when slotted into select */\n                }\n            </style>\n            <div>\n                <option part=\"option\">\n                    <slot></slot>\n                </option>\n            </div>\n        ",shadowRoot.appendChild(template.content.cloneNode(!0)),this.option=shadowRoot.querySelector("option"),this.setupEventListeners()}static get observedAttributes(){return["value","disabled","selected"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"value":this.option.value=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.option.disabled=!0:this.option.disabled=!1;break;case"selected":this.hasAttribute("selected")?this.option.selected=!0:this.option.selected=!1}}setupEventListeners(){this.option.addEventListener("change",event=>{const newEvent=new Event("change",{bubbles:!0,composed:!0,cancelable:!0});this.dispatchEvent(newEvent)})}get value(){return this.option.value}set value(val){this.option.value=val}get selected(){return this.option.selected}set selected(val){this.option.selected=val}get disabled(){return this.option.disabled}set disabled(val){this.option.disabled=val}connectedCallback(){this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("selected",null,this.getAttribute("selected"))}}customElements.define("ds-option",DsOption)},"./src/components/ds-select.js":()=>{class DsSelect extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <select id="select" part="select">\n                    <slot></slot>\n                </select>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.select=shadowRoot.querySelector("select"),this.setupEventListeners(),this.setupSlotListener()}static get observedAttributes(){return["value","disabled","required","name","multiple","size"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"value":this.select.value=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.select.disabled=!0:this.select.disabled=!1;break;case"required":this.hasAttribute("required")?this.select.required=!0:this.select.required=!1;break;case"name":this.select.name=newValue||"";break;case"multiple":this.hasAttribute("multiple")?this.select.multiple=!0:this.select.multiple=!1;break;case"size":this.select.size=newValue||""}}setupEventListeners(){["change","focus","blur"].forEach(eventType=>{this.select.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});"change"===eventType&&(newEvent.target=this,newEvent.currentTarget=this),this.dispatchEvent(newEvent)})})}setupSlotListener(){this.shadowRoot.querySelector("slot").addEventListener("slotchange",()=>{this.handleSlotChange()})}handleSlotChange(){const assignedNodes=this.shadowRoot.querySelector("slot").assignedNodes();this.select.innerHTML="",assignedNodes.forEach(node=>{if(node.nodeType===Node.ELEMENT_NODE)if("DS-OPTION"===node.tagName){const option=document.createElement("option");node.hasAttribute("value")&&(option.value=node.getAttribute("value")),node.hasAttribute("disabled")&&(option.disabled=!0),node.hasAttribute("selected")&&(option.selected=!0),option.textContent=node.textContent||node.innerText||"",this.select.appendChild(option)}else"OPTION"===node.tagName&&this.select.appendChild(node.cloneNode(!0))})}get value(){return this.select.value}set value(val){this.select.value=val}get disabled(){return this.select.disabled}set disabled(val){this.select.disabled=val}get required(){return this.select.required}set required(val){this.select.required=val}get name(){return this.select.name}set name(val){this.select.name=val}get multiple(){return this.select.multiple}set multiple(val){this.select.multiple=val}get size(){return this.select.size}set size(val){this.select.size=val}connectedCallback(){this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("required",null,this.getAttribute("required")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("multiple",null,this.getAttribute("multiple")),this.attributeChangedCallback("size",null,this.getAttribute("size")),this.handleSlotChange()}}customElements.define("ds-select",DsSelect)},"./src/stories/ds-select.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,Multiple:()=>Multiple,Required:()=>Required,WithOptions:()=>WithOptions,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./src/components/ds-select.js"),__webpack_require__("./src/components/ds-option.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ds-select",component:"ds-select",parameters:{docs:{description:{component:"A select component that wraps native select elements with support for single and multiple selection."}}},argTypes:{value:{control:"text",description:"The currently selected value"},disabled:{control:"boolean",description:"Whether the select is disabled"},required:{control:"boolean",description:"Whether the select is required"},name:{control:"text",description:"The name attribute for form submission"},multiple:{control:"boolean",description:"Whether multiple options can be selected"},size:{control:"number",description:"Number of visible options"}}},Default=(args=>{const element=document.createElement("ds-select");return args.value&&element.setAttribute("value",args.value),args.disabled&&element.setAttribute("disabled",""),args.required&&element.setAttribute("required",""),args.name&&element.setAttribute("name",args.name),args.multiple&&element.setAttribute("multiple",""),args.size&&element.setAttribute("size",args.size),element}).bind({});Default.args={name:"country-select"};const WithOptions=()=>{const select=document.createElement("ds-select");select.setAttribute("name","country-select");const option1=document.createElement("ds-option");option1.setAttribute("value","us"),option1.innerHTML="United States";const option2=document.createElement("ds-option");option2.setAttribute("value","ca"),option2.setAttribute("selected",""),option2.innerHTML="Canada";const option3=document.createElement("ds-option");option3.setAttribute("value","uk"),option3.innerHTML="United Kingdom";const option4=document.createElement("ds-option");return option4.setAttribute("value","au"),option4.innerHTML="Australia",select.appendChild(option1),select.appendChild(option2),select.appendChild(option3),select.appendChild(option4),select},Disabled=()=>{const select=document.createElement("ds-select");select.setAttribute("name","disabled-select"),select.setAttribute("disabled","");const option1=document.createElement("ds-option");option1.setAttribute("value","option1"),option1.innerHTML="Option 1";const option2=document.createElement("ds-option");return option2.setAttribute("value","option2"),option2.innerHTML="Option 2",select.appendChild(option1),select.appendChild(option2),select},Required=()=>{const select=document.createElement("ds-select");select.setAttribute("name","required-select"),select.setAttribute("required","");const option1=document.createElement("ds-option");option1.setAttribute("value",""),option1.innerHTML="Please select an option...";const option2=document.createElement("ds-option");option2.setAttribute("value","option1"),option2.innerHTML="Option 1";const option3=document.createElement("ds-option");return option3.setAttribute("value","option2"),option3.innerHTML="Option 2",select.appendChild(option1),select.appendChild(option2),select.appendChild(option3),select},Multiple=()=>{const select=document.createElement("ds-select");select.setAttribute("name","multiple-select"),select.setAttribute("multiple",""),select.setAttribute("size","4");const option1=document.createElement("ds-option");option1.setAttribute("value","red"),option1.innerHTML="Red";const option2=document.createElement("ds-option");option2.setAttribute("value","green"),option2.setAttribute("selected",""),option2.innerHTML="Green";const option3=document.createElement("ds-option");option3.setAttribute("value","blue"),option3.setAttribute("selected",""),option3.innerHTML="Blue";const option4=document.createElement("ds-option");return option4.setAttribute("value","yellow"),option4.innerHTML="Yellow",select.appendChild(option1),select.appendChild(option2),select.appendChild(option3),select.appendChild(option4),select},__namedExportsOrder=["Default","WithOptions","Disabled","Required","Multiple"]}}]);