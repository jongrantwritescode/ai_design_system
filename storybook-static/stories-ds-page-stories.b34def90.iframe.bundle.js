(self.webpackChunkai_design_system=self.webpackChunkai_design_system||[]).push([[692],{"./src/components/ds-button.js":()=>{class DsButton extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <button part="button" type="button">\n                    <slot></slot>\n                </button>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.button=shadowRoot.querySelector("button"),this.setupEventListeners()}static get observedAttributes(){return["type","disabled","name","value"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"type":this.button.type=newValue||"button";break;case"disabled":this.hasAttribute("disabled")?this.button.disabled=!0:this.button.disabled=!1;break;case"name":this.button.name=newValue||"";break;case"value":this.button.value=newValue||""}}setupEventListeners(){["click","focus","blur"].forEach(eventType=>{this.button.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});this.dispatchEvent(newEvent)})})}get type(){return this.button.type}set type(val){this.button.type=val}get disabled(){return this.button.disabled}set disabled(val){this.button.disabled=val}get name(){return this.button.name}set name(val){this.button.name=val}get value(){return this.button.value}set value(val){this.button.value=val}connectedCallback(){this.attributeChangedCallback("type",null,this.getAttribute("type")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("value",null,this.getAttribute("value"))}}customElements.define("ds-button",DsButton)},"./src/components/ds-col.js":()=>{class DsCol extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML="\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    /* Flex item properties will be applied by ds-row parent's context */\n                }\n                \n                .col-container {\n                    display: flex; /* Make it a flex container for its own children */\n                    flex-direction: column;\n                    /* Default flex-wrap for its own children */\n                }\n            </style>\n            <div class=\"col-container\">\n                <slot></slot>\n            </div>\n        ",shadowRoot.appendChild(template.content.cloneNode(!0)),this.colContainer=shadowRoot.querySelector(".col-container")}static get observedAttributes(){return["flex-grow","flex-shrink","flex-basis","align-self","order","justify-content","align-items","gap","wrap"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"flex-grow":this.style.flexGrow=newValue||"";break;case"flex-shrink":this.style.flexShrink=newValue||"";break;case"flex-basis":this.style.flexBasis=newValue||"";break;case"align-self":this.style.alignSelf=newValue||"";break;case"order":this.style.order=newValue||"";break;case"justify-content":this.colContainer.style.justifyContent=newValue||"";break;case"align-items":this.colContainer.style.alignItems=newValue||"";break;case"gap":this.colContainer.style.gap=newValue||"";break;case"wrap":this.hasAttribute("wrap")?this.colContainer.style.flexWrap="wrap":this.colContainer.style.flexWrap="nowrap"}}connectedCallback(){this.attributeChangedCallback("flex-grow",null,this.getAttribute("flex-grow")),this.attributeChangedCallback("flex-shrink",null,this.getAttribute("flex-shrink")),this.attributeChangedCallback("flex-basis",null,this.getAttribute("flex-basis")),this.attributeChangedCallback("align-self",null,this.getAttribute("align-self")),this.attributeChangedCallback("order",null,this.getAttribute("order")),this.attributeChangedCallback("justify-content",null,this.getAttribute("justify-content")),this.attributeChangedCallback("align-items",null,this.getAttribute("align-items")),this.attributeChangedCallback("gap",null,this.getAttribute("gap")),this.attributeChangedCallback("wrap",null,this.getAttribute("wrap"))}}customElements.define("ds-col",DsCol)},"./src/components/ds-label.js":()=>{class DsLabel extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <label part="label">\n                    <slot></slot>\n                </label>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.label=shadowRoot.querySelector("label"),this.setupEventListeners()}static get observedAttributes(){return["for"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue&&"for"===name)this.label.setAttribute("for",newValue||"")}setupEventListeners(){this.label.addEventListener("click",event=>{const newEvent=new Event("click",{bubbles:!0,composed:!0,cancelable:!0});this.dispatchEvent(newEvent)})}get htmlFor(){return this.label.htmlFor}set htmlFor(val){this.label.htmlFor=val}connectedCallback(){this.attributeChangedCallback("for",null,this.getAttribute("for"))}}customElements.define("ds-label",DsLabel)},"./src/components/ds-page.js":()=>{class DsPage extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML="\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    width: 100%;\n                    min-height: 100vh; /* Ensures it takes full viewport height */\n                    box-sizing: border-box; /* Include padding/border in element's total width/height */\n                }\n                \n                .page-container {\n                    display: flex; /* Makes the main element a flex container for its children */\n                    flex-direction: column; /* Stacks children vertically by default */\n                    width: 100%;\n                    padding: var(--ds-spacing-page-padding, 20px); /* Default padding, can be overridden by CSS variable */\n                    margin: 0 auto; /* Center content if width is limited */\n                    max-width: var(--ds-page-max-width, 1200px); /* Optional max-width for content */\n                }\n            </style>\n            <main class=\"page-container\">\n                <slot></slot>\n            </main>\n        ",shadowRoot.appendChild(template.content.cloneNode(!0)),this.pageContainer=shadowRoot.querySelector(".page-container")}static get observedAttributes(){return[]}connectedCallback(){}}customElements.define("ds-page",DsPage)},"./src/components/ds-row.js":()=>{class DsRow extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML="\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                }\n                \n                .row-container {\n                    display: flex;\n                    flex-direction: row;\n                    /* Default flex-wrap will be controlled by attribute */\n                }\n            </style>\n            <div class=\"row-container\">\n                <slot></slot>\n            </div>\n        ",shadowRoot.appendChild(template.content.cloneNode(!0)),this.rowContainer=shadowRoot.querySelector(".row-container")}static get observedAttributes(){return["justify-content","align-items","gap","wrap"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"justify-content":this.rowContainer.style.justifyContent=newValue||"";break;case"align-items":this.rowContainer.style.alignItems=newValue||"";break;case"gap":this.rowContainer.style.gap=newValue||"";break;case"wrap":this.hasAttribute("wrap")?this.rowContainer.style.flexWrap="wrap":this.rowContainer.style.flexWrap="nowrap"}}connectedCallback(){this.attributeChangedCallback("justify-content",null,this.getAttribute("justify-content")),this.attributeChangedCallback("align-items",null,this.getAttribute("align-items")),this.attributeChangedCallback("gap",null,this.getAttribute("gap")),this.attributeChangedCallback("wrap",null,this.getAttribute("wrap"))}}customElements.define("ds-row",DsRow)},"./src/components/ds-text-input.js":()=>{class DsTextInput extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <input id="input" part="input" type="text">\n                <slot></slot>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.input=shadowRoot.querySelector("input"),this.setupEventListeners()}static get observedAttributes(){return["type","value","placeholder","disabled","readonly","required","name","id","aria-label"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"type":this.input.type=newValue||"text";break;case"value":this.input.value=newValue||"";break;case"placeholder":this.input.placeholder=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.input.disabled=!0:this.input.disabled=!1;break;case"readonly":this.hasAttribute("readonly")?this.input.readOnly=!0:this.input.readOnly=!1;break;case"required":this.hasAttribute("required")?this.input.required=!0:this.input.required=!1;break;case"name":this.input.name=newValue||"";break;case"id":this.input.id=newValue||"";break;case"aria-label":this.input.setAttribute("aria-label",newValue||"")}}setupEventListeners(){["input","change","focus","blur"].forEach(eventType=>{this.input.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});"input"!==eventType&&"change"!==eventType||(newEvent.target=this,newEvent.currentTarget=this),this.dispatchEvent(newEvent)})})}get value(){return this.input.value}set value(val){this.input.value=val}get type(){return this.input.type}set type(val){this.input.type=val}get disabled(){return this.input.disabled}set disabled(val){this.input.disabled=val}get readonly(){return this.input.readOnly}set readonly(val){this.input.readOnly=val}get required(){return this.input.required}set required(val){this.input.required=val}connectedCallback(){this.attributeChangedCallback("type",null,this.getAttribute("type")),this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("placeholder",null,this.getAttribute("placeholder")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("readonly",null,this.getAttribute("readonly")),this.attributeChangedCallback("required",null,this.getAttribute("required")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("id",null,this.getAttribute("id")),this.attributeChangedCallback("aria-label",null,this.getAttribute("aria-label"))}}customElements.define("ds-text-input",DsTextInput)},"./src/components/ds-textarea.js":()=>{class DsTextarea extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <textarea id="textarea" part="textarea">\n                    <slot></slot>\n                </textarea>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.textarea=shadowRoot.querySelector("textarea"),this.setupEventListeners()}static get observedAttributes(){return["value","placeholder","rows","cols","disabled","readonly","required","name","id"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"value":this.textarea.value=newValue||"";break;case"placeholder":this.textarea.placeholder=newValue||"";break;case"rows":this.textarea.rows=newValue||"";break;case"cols":this.textarea.cols=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.textarea.disabled=!0:this.textarea.disabled=!1;break;case"readonly":this.hasAttribute("readonly")?this.textarea.readOnly=!0:this.textarea.readOnly=!1;break;case"required":this.hasAttribute("required")?this.textarea.required=!0:this.textarea.required=!1;break;case"name":this.textarea.name=newValue||"";break;case"id":this.textarea.id=newValue||""}}setupEventListeners(){["input","change","focus","blur"].forEach(eventType=>{this.textarea.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});"input"!==eventType&&"change"!==eventType||(newEvent.target=this,newEvent.currentTarget=this),this.dispatchEvent(newEvent)})})}get value(){return this.textarea.value}set value(val){this.textarea.value=val}get placeholder(){return this.textarea.placeholder}set placeholder(val){this.textarea.placeholder=val}get rows(){return this.textarea.rows}set rows(val){this.textarea.rows=val}get cols(){return this.textarea.cols}set cols(val){this.textarea.cols=val}get disabled(){return this.textarea.disabled}set disabled(val){this.textarea.disabled=val}get readonly(){return this.textarea.readOnly}set readonly(val){this.textarea.readOnly=val}get required(){return this.textarea.required}set required(val){this.textarea.required=val}get name(){return this.textarea.name}set name(val){this.textarea.name=val}connectedCallback(){this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("placeholder",null,this.getAttribute("placeholder")),this.attributeChangedCallback("rows",null,this.getAttribute("rows")),this.attributeChangedCallback("cols",null,this.getAttribute("cols")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("readonly",null,this.getAttribute("readonly")),this.attributeChangedCallback("required",null,this.getAttribute("required")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("id",null,this.getAttribute("id"))}}customElements.define("ds-textarea",DsTextarea)},"./src/stories/ds-page.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ComplexLayout:()=>ComplexLayout,Default:()=>Default,FormLayout:()=>FormLayout,SimpleContent:()=>SimpleContent,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./src/components/ds-page.js"),__webpack_require__("./src/components/ds-row.js"),__webpack_require__("./src/components/ds-col.js"),__webpack_require__("./src/components/ds-button.js"),__webpack_require__("./src/components/ds-text-input.js"),__webpack_require__("./src/components/ds-textarea.js"),__webpack_require__("./src/components/ds-label.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ds-page",component:"ds-page",parameters:{docs:{description:{component:"A consistent wrapper around application content, handling page-level layout and margins."}}}},Default=()=>{const element=document.createElement("ds-page");return element.innerHTML='\n    <header style="background: var(--ds-color-primary); color: white; padding: 16px; text-align: center;">\n      <h1>My Application</h1>\n    </header>\n    \n    <ds-row justify-content="space-between" align-items="flex-start" gap="24px" style="margin: 24px 0;">\n      <ds-col flex-grow="1" style="background: white; padding: 16px; border-radius: 8px;">\n        <h2>Main Content Area</h2>\n        <p>This is the main content area that grows to fill available space.</p>\n        <p>It can contain any content and will expand to fill the remaining space.</p>\n      </ds-col>\n      \n      <ds-col flex-basis="250px" style="background: white; padding: 16px; border-radius: 8px;">\n        <h3>Sidebar</h3>\n        <p>This sidebar has a fixed width of 250px.</p>\n        <ul>\n          <li>Navigation item 1</li>\n          <li>Navigation item 2</li>\n          <li>Navigation item 3</li>\n        </ul>\n      </ds-col>\n    </ds-row>\n    \n    <footer style="background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;">\n      <p>&copy; 2025 My Application</p>\n    </footer>\n  ',element},ComplexLayout=()=>{const element=document.createElement("ds-page");return element.innerHTML='\n    <header style="background: var(--ds-color-primary); color: white; padding: 16px;">\n      <ds-row justify-content="space-between" align-items="center">\n        <h1>Complex Layout Example</h1>\n        <nav>\n          <ds-row gap="16px">\n            <a href="#" style="color: white; text-decoration: none;">Home</a>\n            <a href="#" style="color: white; text-decoration: none;">About</a>\n            <a href="#" style="color: white; text-decoration: none;">Contact</a>\n          </ds-row>\n        </nav>\n      </ds-row>\n    </header>\n    \n    <ds-row gap="24px" style="margin: 24px 0;">\n      <ds-col flex-grow="1">\n        <ds-row gap="16px" wrap>\n          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">\n            <h3>Card 1</h3>\n            <p>This card demonstrates responsive behavior.</p>\n          </ds-col>\n          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">\n            <h3>Card 2</h3>\n            <p>Cards will wrap to new lines on smaller screens.</p>\n          </ds-col>\n          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">\n            <h3>Card 3</h3>\n            <p>Each card maintains its minimum width.</p>\n          </ds-col>\n        </ds-row>\n      </ds-col>\n    </ds-row>\n    \n    <footer style="background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;">\n      <p>&copy; 2025 Complex Layout Example</p>\n    </footer>\n  ',element},SimpleContent=()=>{const element=document.createElement("ds-page");return element.innerHTML='\n    <ds-row justify-content="center" align-items="center" style="min-height: 60vh;">\n      <ds-col style="text-align: center; max-width: 600px;">\n        <h1>Welcome to the Design System</h1>\n        <p style="font-size: 1.2em; margin: 24px 0;">\n          This is a simple example showing how ds-page can be used to create clean, centered content layouts.\n        </p>\n        <ds-row justify-content="center" gap="16px">\n          <ds-button type="button">Get Started</ds-button>\n          <ds-button type="button">Learn More</ds-button>\n        </ds-row>\n      </ds-col>\n    </ds-row>\n  ',element},FormLayout=()=>{const element=document.createElement("ds-page");return element.innerHTML='\n    <ds-row justify-content="center" style="margin: 24px 0;">\n      <ds-col flex-basis="500px" style="background: white; padding: 32px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">\n        <h2 style="text-align: center; margin-bottom: 24px;">Contact Form</h2>\n        \n        <ds-col gap="16px">\n          <div>\n            <ds-label for="name-input">Name</ds-label>\n            <ds-text-input id="name-input" type="text" name="name"></ds-text-input>\n          </div>\n          \n          <div>\n            <ds-label for="email-input">Email</ds-label>\n            <ds-text-input id="email-input" type="email" name="email"></ds-text-input>\n          </div>\n          \n          <div>\n            <ds-label for="message-textarea">Message</ds-label>\n            <ds-textarea id="message-textarea" name="message" rows="4"></ds-textarea>\n          </div>\n          \n          <ds-row justify-content="center" style="margin-top: 24px;">\n            <ds-button type="submit">Send Message</ds-button>\n          </ds-row>\n        </ds-col>\n      </ds-col>\n    </ds-row>\n  ',element},__namedExportsOrder=["Default","ComplexLayout","SimpleContent","FormLayout"]}}]);