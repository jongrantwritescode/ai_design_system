(self.webpackChunkai_design_system=self.webpackChunkai_design_system||[]).push([[257],{"./src/components/ds-button.js":()=>{class DsButton extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <button part="button" type="button">\n                    <slot></slot>\n                </button>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.button=shadowRoot.querySelector("button"),this.setupEventListeners()}static get observedAttributes(){return["type","disabled","name","value"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"type":this.button.type=newValue||"button";break;case"disabled":this.hasAttribute("disabled")?this.button.disabled=!0:this.button.disabled=!1;break;case"name":this.button.name=newValue||"";break;case"value":this.button.value=newValue||""}}setupEventListeners(){["click","focus","blur"].forEach(eventType=>{this.button.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});this.dispatchEvent(newEvent)})})}get type(){return this.button.type}set type(val){this.button.type=val}get disabled(){return this.button.disabled}set disabled(val){this.button.disabled=val}get name(){return this.button.name}set name(val){this.button.name=val}get value(){return this.button.value}set value(val){this.button.value=val}connectedCallback(){this.attributeChangedCallback("type",null,this.getAttribute("type")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("value",null,this.getAttribute("value"))}}customElements.define("ds-button",DsButton)},"./src/stories/ds-button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,Primary:()=>Primary,Reset:()=>Reset,Secondary:()=>Secondary,Submit:()=>Submit,WithValue:()=>WithValue,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./src/components/ds-button.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ds-button",component:"ds-button",parameters:{docs:{description:{component:"A button component that wraps native button elements with support for various button types."}}},argTypes:{type:{control:"select",options:["button","submit","reset"],description:"The type of button"},disabled:{control:"boolean",description:"Whether the button is disabled"},name:{control:"text",description:"The name attribute for form submission"},value:{control:"text",description:"The value attribute for form submission"},content:{control:"text",description:"The text content of the button"}}},Template=args=>{const element=document.createElement("ds-button");return args.type&&element.setAttribute("type",args.type),args.disabled&&element.setAttribute("disabled",""),args.name&&element.setAttribute("name",args.name),args.value&&element.setAttribute("value",args.value),element.innerHTML=args.content||"Button",element},Default=Template.bind({});Default.args={type:"button",content:"Click me"};const Submit=Template.bind({});Submit.args={type:"submit",content:"Submit Form"};const Reset=Template.bind({});Reset.args={type:"reset",content:"Reset Form"};const Disabled=Template.bind({});Disabled.args={type:"button",content:"Disabled Button",disabled:!0};const WithValue=Template.bind({});WithValue.args={type:"button",content:"Button with Value",value:"button-value",name:"action-button"};const Primary=Template.bind({});Primary.args={type:"button",content:"Primary Action"};const Secondary=Template.bind({});Secondary.args={type:"button",content:"Secondary Action"};const __namedExportsOrder=["Default","Submit","Reset","Disabled","WithValue","Primary","Secondary"]}}]);