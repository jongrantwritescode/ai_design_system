(self.webpackChunkai_design_system=self.webpackChunkai_design_system||[]).push([[601],{"./src/components/ds-label.js":()=>{class DsLabel extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <label part="label">\n                    <slot></slot>\n                </label>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.label=shadowRoot.querySelector("label"),this.setupEventListeners()}static get observedAttributes(){return["for"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue&&"for"===name)this.label.setAttribute("for",newValue||"")}setupEventListeners(){this.label.addEventListener("click",event=>{const newEvent=new Event("click",{bubbles:!0,composed:!0,cancelable:!0});this.dispatchEvent(newEvent)})}get htmlFor(){return this.label.htmlFor}set htmlFor(val){this.label.htmlFor=val}connectedCallback(){this.attributeChangedCallback("for",null,this.getAttribute("for"))}}customElements.define("ds-label",DsLabel)},"./src/components/ds-text-input.js":()=>{class DsTextInput extends HTMLElement{constructor(){super();const shadowRoot=this.attachShadow({mode:"open"}),template=document.createElement("template");template.innerHTML='\n            <style>\n                @import url(\'/src/design_system/styles.css\');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class="wrapper">\n                <input id="input" part="input" type="text">\n                <slot></slot>\n            </div>\n        ',shadowRoot.appendChild(template.content.cloneNode(!0)),this.input=shadowRoot.querySelector("input"),this.setupEventListeners()}static get observedAttributes(){return["type","value","placeholder","disabled","readonly","required","name","id","aria-label"]}attributeChangedCallback(name,oldValue,newValue){if(oldValue!==newValue)switch(name){case"type":this.input.type=newValue||"text";break;case"value":this.input.value=newValue||"";break;case"placeholder":this.input.placeholder=newValue||"";break;case"disabled":this.hasAttribute("disabled")?this.input.disabled=!0:this.input.disabled=!1;break;case"readonly":this.hasAttribute("readonly")?this.input.readOnly=!0:this.input.readOnly=!1;break;case"required":this.hasAttribute("required")?this.input.required=!0:this.input.required=!1;break;case"name":this.input.name=newValue||"";break;case"id":this.input.id=newValue||"";break;case"aria-label":this.input.setAttribute("aria-label",newValue||"")}}setupEventListeners(){["input","change","focus","blur"].forEach(eventType=>{this.input.addEventListener(eventType,event=>{const newEvent=new Event(eventType,{bubbles:!0,composed:!0,cancelable:!0});"input"!==eventType&&"change"!==eventType||(newEvent.target=this,newEvent.currentTarget=this),this.dispatchEvent(newEvent)})})}get value(){return this.input.value}set value(val){this.input.value=val}get type(){return this.input.type}set type(val){this.input.type=val}get disabled(){return this.input.disabled}set disabled(val){this.input.disabled=val}get readonly(){return this.input.readOnly}set readonly(val){this.input.readOnly=val}get required(){return this.input.required}set required(val){this.input.required=val}connectedCallback(){this.attributeChangedCallback("type",null,this.getAttribute("type")),this.attributeChangedCallback("value",null,this.getAttribute("value")),this.attributeChangedCallback("placeholder",null,this.getAttribute("placeholder")),this.attributeChangedCallback("disabled",null,this.getAttribute("disabled")),this.attributeChangedCallback("readonly",null,this.getAttribute("readonly")),this.attributeChangedCallback("required",null,this.getAttribute("required")),this.attributeChangedCallback("name",null,this.getAttribute("name")),this.attributeChangedCallback("id",null,this.getAttribute("id")),this.attributeChangedCallback("aria-label",null,this.getAttribute("aria-label"))}}customElements.define("ds-text-input",DsTextInput)},"./src/stories/ds-label.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,LongText:()=>LongText,Required:()=>Required,WithFor:()=>WithFor,WithInput:()=>WithInput,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./src/components/ds-label.js"),__webpack_require__("./src/components/ds-text-input.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ds-label",component:"ds-label",parameters:{docs:{description:{component:"A label component that wraps native label elements with support for form control association."}}},argTypes:{for:{control:"text",description:"The ID of the associated form control"},content:{control:"text",description:"The text content of the label"}}},Template=args=>{const element=document.createElement("ds-label");return args.for&&element.setAttribute("for",args.for),element.innerHTML=args.content||"Label",element},Default=Template.bind({});Default.args={content:"Username"};const WithFor=Template.bind({});WithFor.args={for:"username-input",content:"Username"};const Required=Template.bind({});Required.args={content:"Email Address *"};const LongText=Template.bind({});LongText.args={content:"This is a very long label that demonstrates how the component handles text wrapping and overflow"};const WithInput=()=>{const container=document.createElement("div");container.style.cssText="display: flex; flex-direction: column; gap: 8px;";const label=document.createElement("ds-label");label.setAttribute("for","example-input"),label.innerHTML="Example Input:";const input=document.createElement("ds-text-input");return input.setAttribute("type","text"),input.setAttribute("id","example-input"),input.setAttribute("placeholder","Enter text here..."),container.appendChild(label),container.appendChild(input),container},__namedExportsOrder=["Default","WithFor","Required","LongText","WithInput"]}}]);