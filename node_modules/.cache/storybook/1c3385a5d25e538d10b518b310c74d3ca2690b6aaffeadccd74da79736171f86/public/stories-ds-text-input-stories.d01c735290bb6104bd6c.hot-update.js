self["webpackHotUpdateai_design_system"]("stories-ds-text-input-stories",{

/***/ "./src/components/ds-text-input.js":
/*!*****************************************!*\
  !*** ./src/components/ds-text-input.js ***!
  \*****************************************/
/***/ (() => {

/**
 * ds-text-input - A text input component that wraps native input elements
 * Supports: text, email, password, number, tel, url, search
 */
class DsTextInput extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <input id="input" part="input" type="text">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal input for attribute changes
        this.input = shadowRoot.querySelector('input');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['type', 'value', 'placeholder', 'disabled', 'readonly', 'required', 'name', 'id', 'aria-label'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal input
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'type':
                this.input.type = newValue || 'text';
                break;
                
            case 'value':
                this.input.value = newValue || '';
                break;
                
            case 'placeholder':
                this.input.placeholder = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.input.disabled = true;
                } else {
                    this.input.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.input.readOnly = true;
                } else {
                    this.input.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.input.required = true;
                } else {
                    this.input.required = false;
                }
                break;
                
            case 'name':
                this.input.name = newValue || '';
                break;
                
            case 'id':
                this.input.id = newValue || '';
                break;
                
            case 'aria-label':
                this.input.setAttribute('aria-label', newValue || '');
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['input', 'change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.input.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'input' || eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal input
     */
    get value() {
        return this.input.value;
    }
    
    set value(val) {
        this.input.value = val;
    }
    
    get type() {
        return this.input.type;
    }
    
    set type(val) {
        this.input.type = val;
    }
    
    get disabled() {
        return this.input.disabled;
    }
    
    set disabled(val) {
        this.input.disabled = val;
    }
    
    get readonly() {
        return this.input.readOnly;
    }
    
    set readonly(val) {
        this.input.readOnly = val;
    }
    
    get required() {
        return this.input.required;
    }
    
    set required(val) {
        this.input.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('type', null, this.getAttribute('type'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('placeholder', null, this.getAttribute('placeholder'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
        this.attributeChangedCallback('aria-label', null, this.getAttribute('aria-label'));
    }
}

// Register the custom element
customElements.define('ds-text-input', DsTextInput); 

/***/ }),

/***/ "./src/stories/ds-text-input.stories.js":
/*!**********************************************!*\
  !*** ./src/stories/ds-text-input.stories.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Email: () => (/* binding */ Email),
/* harmony export */   Number: () => (/* binding */ Number),
/* harmony export */   Password: () => (/* binding */ Password),
/* harmony export */   Readonly: () => (/* binding */ Readonly),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   WithValue: () => (/* binding */ WithValue),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-text-input.js */ "./src/components/ds-text-input.js");
/* harmony import */ var _components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-text-input',
  component: 'ds-text-input',
  parameters: {
    docs: {
      description: {
        component: 'A text input component that wraps native input elements with support for various input types.'
      }
    }
  },
  argTypes: {
    type: {
      control: 'select',
      options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'],
      description: 'The type of input field'
    },
    value: {
      control: 'text',
      description: 'The current value of the input'
    },
    placeholder: {
      control: 'text',
      description: 'Placeholder text for the input'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the input is disabled'
    },
    readonly: {
      control: 'boolean',
      description: 'Whether the input is read-only'
    },
    required: {
      control: 'boolean',
      description: 'Whether the input is required'
    },
    name: {
      control: 'text',
      description: 'The name attribute for form submission'
    },
    id: {
      control: 'text',
      description: 'The unique identifier for the input'
    },
    'aria-label': {
      control: 'text',
      description: 'Accessibility label for the input'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-text-input');
  
  // Set attributes
  if (args.type) {
    element.setAttribute('type', args.type);
  }
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.placeholder) {
    element.setAttribute('placeholder', args.placeholder);
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.readonly) {
    element.setAttribute('readonly', '');
  }
  if (args.required) {
    element.setAttribute('required', '');
  }
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.id) {
    element.setAttribute('id', args.id);
  }
  if (args['aria-label']) {
    element.setAttribute('aria-label', args['aria-label']);
  }
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  type: 'text',
  placeholder: 'Enter text here...',
  name: 'text-input'
};

const Email = Template.bind({});
Email.args = {
  type: 'email',
  placeholder: 'Enter your email...',
  name: 'email-input',
  required: true
};

const Password = Template.bind({});
Password.args = {
  type: 'password',
  placeholder: 'Enter your password...',
  name: 'password-input',
  required: true
};

const Number = Template.bind({});
Number.args = {
  type: 'number',
  placeholder: 'Enter a number...',
  name: 'number-input'
};

const Disabled = Template.bind({});
Disabled.args = {
  type: 'text',
  value: 'This input is disabled',
  disabled: true,
  name: 'disabled-input'
};

const Readonly = Template.bind({});
Readonly.args = {
  type: 'text',
  value: 'This input is read-only',
  readonly: true,
  name: 'readonly-input'
};

const WithValue = Template.bind({});
WithValue.args = {
  type: 'text',
  value: 'Pre-filled value',
  name: 'value-input'
};

const Required = Template.bind({});
Required.args = {
  type: 'text',
  placeholder: 'This field is required...',
  required: true,
  name: 'required-input'
}; ;const __namedExportsOrder = ["Default","Email","Password","Number","Disabled","Readonly","WithValue","Required"];

/***/ })

});
//# sourceMappingURL=stories-ds-text-input-stories.d01c735290bb6104bd6c.hot-update.js.map