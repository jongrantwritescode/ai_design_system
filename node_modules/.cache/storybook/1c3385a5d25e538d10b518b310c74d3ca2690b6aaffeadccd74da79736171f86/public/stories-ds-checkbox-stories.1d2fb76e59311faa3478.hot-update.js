self["webpackHotUpdateai_design_system"]("stories-ds-checkbox-stories",{

/***/ "./src/components/ds-checkbox.js":
/*!***************************************!*\
  !*** ./src/components/ds-checkbox.js ***!
  \***************************************/
/***/ (() => {

/**
 * ds-checkbox - A checkbox component that wraps native checkbox input elements
 */
class DsCheckbox extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: inline-block;
                }
                
                .wrapper {
                    display: flex;
                    align-items: center;
                }
            </style>
            <div class="wrapper">
                <input type="checkbox" id="checkbox" part="checkbox">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal checkbox for attribute changes
        this.checkbox = shadowRoot.querySelector('input[type="checkbox"]');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal checkbox
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'name':
                this.checkbox.name = newValue || '';
                break;
                
            case 'value':
                this.checkbox.value = newValue || '';
                break;
                
            case 'checked':
                if (this.hasAttribute('checked')) {
                    this.checkbox.checked = true;
                } else {
                    this.checkbox.checked = false;
                }
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.checkbox.disabled = true;
                } else {
                    this.checkbox.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.checkbox.readOnly = true;
                } else {
                    this.checkbox.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.checkbox.required = true;
                } else {
                    this.checkbox.required = false;
                }
                break;
                
            case 'id':
                this.checkbox.id = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.checkbox.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal checkbox
     */
    get checked() {
        return this.checkbox.checked;
    }
    
    set checked(val) {
        this.checkbox.checked = val;
    }
    
    get value() {
        return this.checkbox.value;
    }
    
    set value(val) {
        this.checkbox.value = val;
    }
    
    get name() {
        return this.checkbox.name;
    }
    
    set name(val) {
        this.checkbox.name = val;
    }
    
    get disabled() {
        return this.checkbox.disabled;
    }
    
    set disabled(val) {
        this.checkbox.disabled = val;
    }
    
    get readonly() {
        return this.checkbox.readOnly;
    }
    
    set readonly(val) {
        this.checkbox.readOnly = val;
    }
    
    get required() {
        return this.checkbox.required;
    }
    
    set required(val) {
        this.checkbox.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('checked', null, this.getAttribute('checked'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
    }
}

// Register the custom element
customElements.define('ds-checkbox', DsCheckbox); 

/***/ }),

/***/ "./src/stories/ds-checkbox.stories.js":
/*!********************************************!*\
  !*** ./src/stories/ds-checkbox.stories.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxGroup: () => (/* binding */ CheckboxGroup),
/* harmony export */   Checked: () => (/* binding */ Checked),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-checkbox.js */ "./src/components/ds-checkbox.js");
/* harmony import */ var _components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-checkbox',
  component: 'ds-checkbox',
  parameters: {
    docs: {
      description: {
        component: 'A checkbox component that wraps native checkbox input elements with support for individual and grouped checkboxes.'
      }
    }
  },
  argTypes: {
    name: {
      control: 'text',
      description: 'The name attribute for checkbox group association'
    },
    value: {
      control: 'text',
      description: 'The value of the checkbox'
    },
    checked: {
      control: 'boolean',
      description: 'Whether the checkbox is checked'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the checkbox is disabled'
    },
    readonly: {
      control: 'boolean',
      description: 'Whether the checkbox is read-only'
    },
    required: {
      control: 'boolean',
      description: 'Whether the checkbox is required'
    },
    id: {
      control: 'text',
      description: 'The unique identifier for the checkbox'
    },
    content: {
      control: 'text',
      description: 'The label text for the checkbox'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-checkbox');
  
  // Set attributes
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.checked) {
    element.setAttribute('checked', '');
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.readonly) {
    element.setAttribute('readonly', '');
  }
  if (args.required) {
    element.setAttribute('required', '');
  }
  if (args.id) {
    element.setAttribute('id', args.id);
  }
  
  // Set content
  element.innerHTML = args.content || 'Checkbox Option';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  name: 'checkbox-option',
  value: 'option1',
  content: 'Accept terms and conditions'
};

const Checked = Template.bind({});
Checked.args = {
  name: 'checkbox-option',
  value: 'option2',
  checked: true,
  content: 'Subscribe to newsletter (Checked)'
};

const Disabled = Template.bind({});
Disabled.args = {
  name: 'checkbox-option',
  value: 'option3',
  disabled: true,
  content: 'Premium feature (Disabled)'
};

const Required = Template.bind({});
Required.args = {
  name: 'checkbox-option',
  value: 'option4',
  required: true,
  content: 'I agree to the terms (Required)'
};

// Checkbox Group Example
const CheckboxGroup = () => {
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  
  const checkbox1 = document.createElement('ds-checkbox');
  checkbox1.setAttribute('name', 'interests');
  checkbox1.setAttribute('value', 'technology');
  checkbox1.innerHTML = 'Technology';
  
  const checkbox2 = document.createElement('ds-checkbox');
  checkbox2.setAttribute('name', 'interests');
  checkbox2.setAttribute('value', 'sports');
  checkbox2.setAttribute('checked', '');
  checkbox2.innerHTML = 'Sports';
  
  const checkbox3 = document.createElement('ds-checkbox');
  checkbox3.setAttribute('name', 'interests');
  checkbox3.setAttribute('value', 'music');
  checkbox3.innerHTML = 'Music';
  
  const checkbox4 = document.createElement('ds-checkbox');
  checkbox4.setAttribute('name', 'interests');
  checkbox4.setAttribute('value', 'travel');
  checkbox4.innerHTML = 'Travel';
  
  container.appendChild(checkbox1);
  container.appendChild(checkbox2);
  container.appendChild(checkbox3);
  container.appendChild(checkbox4);
  
  return container;
}; ;const __namedExportsOrder = ["Default","Checked","Disabled","Required","CheckboxGroup"];

/***/ })

});
//# sourceMappingURL=stories-ds-checkbox-stories.1d2fb76e59311faa3478.hot-update.js.map