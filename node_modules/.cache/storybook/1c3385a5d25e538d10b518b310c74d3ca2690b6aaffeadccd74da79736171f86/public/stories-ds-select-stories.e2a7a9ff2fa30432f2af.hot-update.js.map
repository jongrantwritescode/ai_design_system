{"version":3,"file":"stories-ds-select-stories.e2a7a9ff2fa30432f2af.hot-update.js","mappingsjnsources":["webpack://ai-design-system/./src/components/ds-option.js","webpack://ai-design-system/./src/components/ds-select.js","webpack://ai-design-system/./src/stories/ds-select.stories.js"],"sourcesContent":["/**\n * ds-option - An option component that wraps native option elements\n * Primarily used inside ds-select components\n */\nclass DsOption extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: none; /* Hidden by default, shown when slotted into select */\n                }\n            </style>\n            <div>\n                <option part=\"option\">\n                    <slot></slot>\n                </option>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal option for attribute changes\n        this.option = shadowRoot.querySelector('option');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['value', 'disabled', 'selected'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal option\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'value':\n                this.option.value = newValue || '';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.option.disabled = true;\n                } else {\n                    this.option.disabled = false;\n                }\n                break;\n                \n            case 'selected':\n                if (this.hasAttribute('selected')) {\n                    this.option.selected = true;\n                } else {\n                    this.option.selected = false;\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Options don't typically have interactive events, but we can listen for changes\n        this.option.addEventListener('change', (event) => {\n            const newEvent = new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true\n            });\n            this.dispatchEvent(newEvent);\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal option\n     */\n    get value() {\n        return this.option.value;\n    }\n    \n    set value(val) {\n        this.option.value = val;\n    }\n    \n    get selected() {\n        return this.option.selected;\n    }\n    \n    set selected(val) {\n        this.option.selected = val;\n    }\n    \n    get disabled() {\n        return this.option.disabled;\n    }\n    \n    set disabled(val) {\n        this.option.disabled = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('selected', null, this.getAttribute('selected'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-option', DsOption); ","/**\n * ds-select - A select component that wraps native select elements\n * Supports multiple selection and option projection\n */\nclass DsSelect extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <select id=\"select\" part=\"select\">\n                    <slot></slot>\n                </select>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal select for attribute changes\n        this.select = shadowRoot.querySelector('select');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n        \n        // Set up slot change listener to handle option projection\n        this.setupSlotListener();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['value', 'disabled', 'required', 'name', 'multiple', 'size'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal select\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'value':\n                this.select.value = newValue || '';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.select.disabled = true;\n                } else {\n                    this.select.disabled = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.select.required = true;\n                } else {\n                    this.select.required = false;\n                }\n                break;\n                \n            case 'name':\n                this.select.name = newValue || '';\n                break;\n                \n            case 'multiple':\n                if (this.hasAttribute('multiple')) {\n                    this.select.multiple = true;\n                } else {\n                    this.select.multiple = false;\n                }\n                break;\n                \n            case 'size':\n                this.select.size = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners to re-dispatch events from the host element\n     */\n    setupEventListeners() {\n        const events = ['change', 'focus', 'blur'];\n        \n        events.forEach(eventType => {\n            this.select.addEventListener(eventType, (event) => {\n                // Create a new event to dispatch from the host\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                // Copy relevant properties\n                if (eventType === 'change') {\n                    newEvent.target = this;\n                    newEvent.currentTarget = this;\n                }\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Set up slot listener to handle option projection\n     */\n    setupSlotListener() {\n        const slot = this.shadowRoot.querySelector('slot');\n        slot.addEventListener('slotchange', () => {\n            this.handleSlotChange();\n        });\n    }\n    \n    /**\n     * Handle slot changes to project ds-option components into the select\n     */\n    handleSlotChange() {\n        const slot = this.shadowRoot.querySelector('slot');\n        const assignedNodes = slot.assignedNodes();\n        \n        // Clear existing options\n        this.select.innerHTML = '';\n        \n        // Process each assigned node\n        assignedNodes.forEach(node => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'DS-OPTION') {\n                    // Create a native option element\n                    const option = document.createElement('option');\n                    \n                    // Copy attributes from ds-option\n                    if (node.hasAttribute('value')) {\n                        option.value = node.getAttribute('value');\n                    }\n                    if (node.hasAttribute('disabled')) {\n                        option.disabled = true;\n                    }\n                    if (node.hasAttribute('selected')) {\n                        option.selected = true;\n                    }\n                    \n                    // Copy text content\n                    option.textContent = node.textContent || node.innerText || '';\n                    \n                    this.select.appendChild(option);\n                } else if (node.tagName === 'OPTION') {\n                    // Direct option element, clone it\n                    this.select.appendChild(node.cloneNode(true));\n                }\n            }\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal select\n     */\n    get value() {\n        return this.select.value;\n    }\n    \n    set value(val) {\n        this.select.value = val;\n    }\n    \n    get disabled() {\n        return this.select.disabled;\n    }\n    \n    set disabled(val) {\n        this.select.disabled = val;\n    }\n    \n    get required() {\n        return this.select.required;\n    }\n    \n    set required(val) {\n        this.select.required = val;\n    }\n    \n    get name() {\n        return this.select.name;\n    }\n    \n    set name(val) {\n        this.select.name = val;\n    }\n    \n    get multiple() {\n        return this.select.multiple;\n    }\n    \n    set multiple(val) {\n        this.select.multiple = val;\n    }\n    \n    get size() {\n        return this.select.size;\n    }\n    \n    set size(val) {\n        this.select.size = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('required', null, this.getAttribute('required'));\n        this.attributeChangedCallback('name', null, this.getAttribute('name'));\n        this.attributeChangedCallback('multiple', null, this.getAttribute('multiple'));\n        this.attributeChangedCallback('size', null, this.getAttribute('size'));\n        \n        // Handle initial slot content\n        this.handleSlotChange();\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-select', DsSelect); ","import '../components/ds-select.js';\nimport '../components/ds-option.js';\n\nexport default {\n  title: 'Components/ds-select',\n  component: 'ds-select',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A select component that wraps native select elements with support for single and multiple selection.'\n      }\n    }\n  },\n  argTypes: {\n    value: {\n      control: 'text',\n      description: 'The currently selected value'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the select is disabled'\n    },\n    required: {\n      control: 'boolean',\n      description: 'Whether the select is required'\n    },\n    name: {\n      control: 'text',\n      description: 'The name attribute for form submission'\n    },\n    multiple: {\n      control: 'boolean',\n      description: 'Whether multiple options can be selected'\n    },\n    size: {\n      control: 'number',\n      description: 'Number of visible options'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-select');\n  \n  // Set attributes\n  if (args.value) {\n    element.setAttribute('value', args.value);\n  }\n  if (args.disabled) {\n    element.setAttribute('disabled', '');\n  }\n  if (args.required) {\n    element.setAttribute('required', '');\n  }\n  if (args.name) {\n    element.setAttribute('name', args.name);\n  }\n  if (args.multiple) {\n    element.setAttribute('multiple', '');\n  }\n  if (args.size) {\n    element.setAttribute('size', args.size);\n  }\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  name: 'country-select'\n};\n\nexport const WithOptions = () => {\n  const select = document.createElement('ds-select');\n  select.setAttribute('name', 'country-select');\n  \n  const option1 = document.createElement('ds-option');\n  option1.setAttribute('value', 'us');\n  option1.innerHTML = 'United States';\n  \n  const option2 = document.createElement('ds-option');\n  option2.setAttribute('value', 'ca');\n  option2.setAttribute('selected', '');\n  option2.innerHTML = 'Canada';\n  \n  const option3 = document.createElement('ds-option');\n  option3.setAttribute('value', 'uk');\n  option3.innerHTML = 'United Kingdom';\n  \n  const option4 = document.createElement('ds-option');\n  option4.setAttribute('value', 'au');\n  option4.innerHTML = 'Australia';\n  \n  select.appendChild(option1);\n  select.appendChild(option2);\n  select.appendChild(option3);\n  select.appendChild(option4);\n  \n  return select;\n};\n\nexport const Disabled = () => {\n  const select = document.createElement('ds-select');\n  select.setAttribute('name', 'disabled-select');\n  select.setAttribute('disabled', '');\n  \n  const option1 = document.createElement('ds-option');\n  option1.setAttribute('value', 'option1');\n  option1.innerHTML = 'Option 1';\n  \n  const option2 = document.createElement('ds-option');\n  option2.setAttribute('value', 'option2');\n  option2.innerHTML = 'Option 2';\n  \n  select.appendChild(option1);\n  select.appendChild(option2);\n  \n  return select;\n};\n\nexport const Required = () => {\n  const select = document.createElement('ds-select');\n  select.setAttribute('name', 'required-select');\n  select.setAttribute('required', '');\n  \n  const option1 = document.createElement('ds-option');\n  option1.setAttribute('value', '');\n  option1.innerHTML = 'Please select an option...';\n  \n  const option2 = document.createElement('ds-option');\n  option2.setAttribute('value', 'option1');\n  option2.innerHTML = 'Option 1';\n  \n  const option3 = document.createElement('ds-option');\n  option3.setAttribute('value', 'option2');\n  option3.innerHTML = 'Option 2';\n  \n  select.appendChild(option1);\n  select.appendChild(option2);\n  select.appendChild(option3);\n  \n  return select;\n};\n\nexport const Multiple = () => {\n  const select = document.createElement('ds-select');\n  select.setAttribute('name', 'multiple-select');\n  select.setAttribute('multiple', '');\n  select.setAttribute('size', '4');\n  \n  const option1 = document.createElement('ds-option');\n  option1.setAttribute('value', 'red');\n  option1.innerHTML = 'Red';\n  \n  const option2 = document.createElement('ds-option');\n  option2.setAttribute('value', 'green');\n  option2.setAttribute('selected', '');\n  option2.innerHTML = 'Green';\n  \n  const option3 = document.createElement('ds-option');\n  option3.setAttribute('value', 'blue');\n  option3.setAttribute('selected', '');\n  option3.innerHTML = 'Blue';\n  \n  const option4 = document.createElement('ds-option');\n  option4.setAttribute('value', 'yellow');\n  option4.innerHTML = 'Yellow';\n  \n  select.appendChild(option1);\n  select.appendChild(option2);\n  select.appendChild(option3);\n  select.appendChild(option4);\n  \n  return select;\n}; ;export const __namedExportsOrder = [\"Default\",\"WithOptions\",\"Disabled\",\"Required\",\"Multiple\"];"],"names":[],"sourceRoot":""}