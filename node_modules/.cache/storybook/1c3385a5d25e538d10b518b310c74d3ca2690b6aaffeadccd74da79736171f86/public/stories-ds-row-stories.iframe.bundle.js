(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-row-stories"],{

/***/ "./src/components/ds-row.js":
/*!**********************************!*\
  !*** ./src/components/ds-row.js ***!
  \**********************************/
/***/ (() => {

/**
 * ds-row - A Flexbox container for horizontal layouts
 * Observable attributes: justify-content, align-items, gap, wrap
 */
class DsRow extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block; /* Custom elements are inline by default */
                }
                
                .row-container {
                    display: flex;
                    flex-direction: row;
                    /* Default flex-wrap will be controlled by attribute */
                }
            </style>
            <div class="row-container">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal container for attribute changes
        this.rowContainer = shadowRoot.querySelector('.row-container');
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['justify-content', 'align-items', 'gap', 'wrap'];
    }
    
    /**
     * React to attribute changes and apply corresponding styles
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'justify-content':
                this.rowContainer.style.justifyContent = newValue || '';
                break;
                
            case 'align-items':
                this.rowContainer.style.alignItems = newValue || '';
                break;
                
            case 'gap':
                this.rowContainer.style.gap = newValue || '';
                break;
                
            case 'wrap':
                // Boolean attribute - check if present
                if (this.hasAttribute('wrap')) {
                    this.rowContainer.style.flexWrap = 'wrap';
                } else {
                    this.rowContainer.style.flexWrap = 'nowrap';
                }
                break;
        }
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial styles based on current attributes
     */
    connectedCallback() {
        // Apply initial styles for all observed attributes
        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));
        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));
        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));
        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));
    }
}

// Register the custom element
customElements.define('ds-row', DsRow); 

/***/ }),

/***/ "./src/stories/ds-row.stories.js":
/*!***************************************!*\
  !*** ./src/stories/ds-row.stories.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlignEnd: () => (/* binding */ AlignEnd),
/* harmony export */   Centered: () => (/* binding */ Centered),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   SpaceAround: () => (/* binding */ SpaceAround),
/* harmony export */   SpaceBetween: () => (/* binding */ SpaceBetween),
/* harmony export */   Wrapped: () => (/* binding */ Wrapped),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_row_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-row.js */ "./src/components/ds-row.js");
/* harmony import */ var _components_ds_row_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_row_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-row',
  component: 'ds-row',
  parameters: {
    docs: {
      description: {
        component: 'A Flexbox container for horizontal layouts with configurable alignment, spacing, and wrapping.'
      }
    }
  },
  argTypes: {
    'justify-content': {
      control: 'select',
      options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],
      description: 'Controls horizontal alignment of flex items'
    },
    'align-items': {
      control: 'select',
      options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
      description: 'Controls vertical alignment of flex items'
    },
    'gap': {
      control: 'text',
      description: 'Spacing between flex items'
    },
    'wrap': {
      control: 'boolean',
      description: 'Whether flex items should wrap to new lines'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-row');
  
  if (args['justify-content']) {
    element.setAttribute('justify-content', args['justify-content']);
  }
  if (args['align-items']) {
    element.setAttribute('align-items', args['align-items']);
  }
  if (args.gap) {
    element.setAttribute('gap', args.gap);
  }
  if (args.wrap) {
    element.setAttribute('wrap', '');
  }
  
  element.innerHTML = `
    <div style="background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;">Item 1</div>
    <div style="background: var(--ds-color-secondary); color: white; padding: 8px; border-radius: 4px;">Item 2</div>
    <div style="background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;">Item 3</div>
  `;
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  'justify-content': 'flex-start',
  'align-items': 'stretch',
  gap: '16px',
  wrap: false
};

const Centered = Template.bind({});
Centered.args = {
  'justify-content': 'center',
  'align-items': 'center',
  gap: '24px',
  wrap: false
};

const SpaceBetween = Template.bind({});
SpaceBetween.args = {
  'justify-content': 'space-between',
  'align-items': 'center',
  gap: '16px',
  wrap: false
};

const Wrapped = Template.bind({});
Wrapped.args = {
  'justify-content': 'flex-start',
  'align-items': 'flex-start',
  gap: '12px',
  wrap: true
};

// Additional examples
const AlignEnd = Template.bind({});
AlignEnd.args = {
  'justify-content': 'flex-end',
  'align-items': 'flex-end',
  gap: '16px',
  wrap: false
};

const SpaceAround = Template.bind({});
SpaceAround.args = {
  'justify-content': 'space-around',
  'align-items': 'center',
  gap: '20px',
  wrap: false
}; ;const __namedExportsOrder = ["Default","Centered","SpaceBetween","Wrapped","AlignEnd","SpaceAround"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-row-stories.iframe.bundle.js.map