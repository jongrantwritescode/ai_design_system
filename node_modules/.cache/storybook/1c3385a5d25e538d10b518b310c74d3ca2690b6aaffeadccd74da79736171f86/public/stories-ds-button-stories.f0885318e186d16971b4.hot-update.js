self["webpackHotUpdateai_design_system"]("stories-ds-button-stories",{

/***/ "./src/components/ds-button.js":
/*!*************************************!*\
  !*** ./src/components/ds-button.js ***!
  \*************************************/
/***/ (() => {

/**
 * ds-button - A button component that wraps native button elements
 * Supports: submit, reset, button types
 */
class DsButton extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: inline-block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <button part="button" type="button">
                    <slot></slot>
                </button>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal button for attribute changes
        this.button = shadowRoot.querySelector('button');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['type', 'disabled', 'name', 'value'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal button
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'type':
                this.button.type = newValue || 'button';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.button.disabled = true;
                } else {
                    this.button.disabled = false;
                }
                break;
                
            case 'name':
                this.button.name = newValue || '';
                break;
                
            case 'value':
                this.button.value = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['click', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.button.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal button
     */
    get type() {
        return this.button.type;
    }
    
    set type(val) {
        this.button.type = val;
    }
    
    get disabled() {
        return this.button.disabled;
    }
    
    set disabled(val) {
        this.button.disabled = val;
    }
    
    get name() {
        return this.button.name;
    }
    
    set name(val) {
        this.button.name = val;
    }
    
    get value() {
        return this.button.value;
    }
    
    set value(val) {
        this.button.value = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('type', null, this.getAttribute('type'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
    }
}

// Register the custom element
customElements.define('ds-button', DsButton); 

/***/ }),

/***/ "./src/stories/ds-button.stories.js":
/*!******************************************!*\
  !*** ./src/stories/ds-button.stories.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Primary: () => (/* binding */ Primary),
/* harmony export */   Reset: () => (/* binding */ Reset),
/* harmony export */   Secondary: () => (/* binding */ Secondary),
/* harmony export */   Submit: () => (/* binding */ Submit),
/* harmony export */   WithValue: () => (/* binding */ WithValue),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_button_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-button.js */ "./src/components/ds-button.js");
/* harmony import */ var _components_ds_button_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_button_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-button',
  component: 'ds-button',
  parameters: {
    docs: {
      description: {
        component: 'A button component that wraps native button elements with support for various button types.'
      }
    }
  },
  argTypes: {
    type: {
      control: 'select',
      options: ['button', 'submit', 'reset'],
      description: 'The type of button'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the button is disabled'
    },
    name: {
      control: 'text',
      description: 'The name attribute for form submission'
    },
    value: {
      control: 'text',
      description: 'The value attribute for form submission'
    },
    content: {
      control: 'text',
      description: 'The text content of the button'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-button');
  
  // Set attributes
  if (args.type) {
    element.setAttribute('type', args.type);
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  
  // Set content
  element.innerHTML = args.content || 'Button';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  type: 'button',
  content: 'Click me'
};

const Submit = Template.bind({});
Submit.args = {
  type: 'submit',
  content: 'Submit Form'
};

const Reset = Template.bind({});
Reset.args = {
  type: 'reset',
  content: 'Reset Form'
};

const Disabled = Template.bind({});
Disabled.args = {
  type: 'button',
  content: 'Disabled Button',
  disabled: true
};

const WithValue = Template.bind({});
WithValue.args = {
  type: 'button',
  content: 'Button with Value',
  value: 'button-value',
  name: 'action-button'
};

const Primary = Template.bind({});
Primary.args = {
  type: 'button',
  content: 'Primary Action'
};

const Secondary = Template.bind({});
Secondary.args = {
  type: 'button',
  content: 'Secondary Action'
}; ;const __namedExportsOrder = ["Default","Submit","Reset","Disabled","WithValue","Primary","Secondary"];

/***/ })

});
//# sourceMappingURL=stories-ds-button-stories.f0885318e186d16971b4.hot-update.js.map