(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-option-stories"],{

/***/ "./src/components/ds-option.js":
/*!*************************************!*\
  !*** ./src/components/ds-option.js ***!
  \*************************************/
/***/ (() => {

/**
 * ds-option - An option component that wraps native option elements
 * Primarily used inside ds-select components
 */
class DsOption extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: none; /* Hidden by default, shown when slotted into select */
                }
            </style>
            <div>
                <option part="option">
                    <slot></slot>
                </option>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal option for attribute changes
        this.option = shadowRoot.querySelector('option');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['value', 'disabled', 'selected'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal option
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'value':
                this.option.value = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.option.disabled = true;
                } else {
                    this.option.disabled = false;
                }
                break;
                
            case 'selected':
                if (this.hasAttribute('selected')) {
                    this.option.selected = true;
                } else {
                    this.option.selected = false;
                }
                break;
        }
    }
    
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Options don't typically have interactive events, but we can listen for changes
        this.option.addEventListener('change', (event) => {
            const newEvent = new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true
            });
            this.dispatchEvent(newEvent);
        });
    }
    
    /**
     * Property getters and setters to mirror the internal option
     */
    get value() {
        return this.option.value;
    }
    
    set value(val) {
        this.option.value = val;
    }
    
    get selected() {
        return this.option.selected;
    }
    
    set selected(val) {
        this.option.selected = val;
    }
    
    get disabled() {
        return this.option.disabled;
    }
    
    set disabled(val) {
        this.option.disabled = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('selected', null, this.getAttribute('selected'));
    }
}

// Register the custom element
customElements.define('ds-option', DsOption); 

/***/ }),

/***/ "./src/stories/ds-option.stories.js":
/*!******************************************!*\
  !*** ./src/stories/ds-option.stories.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   OptionGroup: () => (/* binding */ OptionGroup),
/* harmony export */   Selected: () => (/* binding */ Selected),
/* harmony export */   WithValue: () => (/* binding */ WithValue),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_option_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-option.js */ "./src/components/ds-option.js");
/* harmony import */ var _components_ds_option_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_option_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-option',
  component: 'ds-option',
  parameters: {
    docs: {
      description: {
        component: 'An option component that wraps native option elements, primarily used within ds-select components.'
      }
    }
  },
  argTypes: {
    value: {
      control: 'text',
      description: 'The value of the option'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the option is disabled'
    },
    selected: {
      control: 'boolean',
      description: 'Whether the option is selected'
    },
    content: {
      control: 'text',
      description: 'The text content of the option'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-option');
  
  // Set attributes
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.selected) {
    element.setAttribute('selected', '');
  }
  
  // Set content
  element.innerHTML = args.content || 'Option';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  value: 'option1',
  content: 'Option 1'
};

const Selected = Template.bind({});
Selected.args = {
  value: 'option2',
  selected: true,
  content: 'Option 2 (Selected)'
};

const Disabled = Template.bind({});
Disabled.args = {
  value: 'option3',
  disabled: true,
  content: 'Option 3 (Disabled)'
};

const WithValue = Template.bind({});
WithValue.args = {
  value: 'custom-value',
  content: 'Custom Option'
};

// Option Group Example
const OptionGroup = () => {
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  
  const option1 = document.createElement('ds-option');
  option1.setAttribute('value', 'apple');
  option1.innerHTML = 'Apple';
  
  const option2 = document.createElement('ds-option');
  option2.setAttribute('value', 'banana');
  option2.setAttribute('selected', '');
  option2.innerHTML = 'Banana';
  
  const option3 = document.createElement('ds-option');
  option3.setAttribute('value', 'orange');
  option3.innerHTML = 'Orange';
  
  const option4 = document.createElement('ds-option');
  option4.setAttribute('value', 'grape');
  option4.setAttribute('disabled', '');
  option4.innerHTML = 'Grape (Disabled)';
  
  container.appendChild(option1);
  container.appendChild(option2);
  container.appendChild(option3);
  container.appendChild(option4);
  
  return container;
}; ;const __namedExportsOrder = ["Default","Selected","Disabled","WithValue","OptionGroup"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-option-stories.iframe.bundle.js.map