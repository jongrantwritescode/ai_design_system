{"version":3,"file":"stories-ds-page-stories.iframe.bundle.js","mappingshsources":["webpack://ai-design-system/./src/components/ds-col.js","webpack://ai-design-system/./src/components/ds-page.js","webpack://ai-design-system/./src/components/ds-row.js","webpack://ai-design-system/./src/stories/ds-page.stories.js"],"sourcesContent":["/**\n * ds-col - A Flexbox item that can also act as a Flexbox container for vertical layouts\n * Observable attributes: flex-grow, flex-shrink, flex-basis, align-self, order (flex item properties)\n *                      justify-content, align-items, gap, wrap (flex container properties)\n */\nclass DsCol extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    /* Flex item properties will be applied by ds-row parent's context */\n                }\n                \n                .col-container {\n                    display: flex; /* Make it a flex container for its own children */\n                    flex-direction: column;\n                    /* Default flex-wrap for its own children */\n                }\n            </style>\n            <div class=\"col-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal container for attribute changes\n        this.colContainer = shadowRoot.querySelector('.col-container');\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return [\n            // Flex Item Properties (applied to :host)\n            'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',\n            // Flex Container Properties (applied to .col-container)\n            'justify-content', 'align-items', 'gap', 'wrap'\n        ];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding styles\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            // Flex Item Properties (applied to :host)\n            case 'flex-grow':\n                this.style.flexGrow = newValue || '';\n                break;\n                \n            case 'flex-shrink':\n                this.style.flexShrink = newValue || '';\n                break;\n                \n            case 'flex-basis':\n                this.style.flexBasis = newValue || '';\n                break;\n                \n            case 'align-self':\n                this.style.alignSelf = newValue || '';\n                break;\n                \n            case 'order':\n                this.style.order = newValue || '';\n                break;\n                \n            // Flex Container Properties (applied to .col-container)\n            case 'justify-content':\n                this.colContainer.style.justifyContent = newValue || '';\n                break;\n                \n            case 'align-items':\n                this.colContainer.style.alignItems = newValue || '';\n                break;\n                \n            case 'gap':\n                this.colContainer.style.gap = newValue || '';\n                break;\n                \n            case 'wrap':\n                // Boolean attribute - check if present\n                if (this.hasAttribute('wrap')) {\n                    this.colContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.colContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial styles based on current attributes\n     */\n    connectedCallback() {\n        // Apply initial styles for all observed attributes\n        this.attributeChangedCallback('flex-grow', null, this.getAttribute('flex-grow'));\n        this.attributeChangedCallback('flex-shrink', null, this.getAttribute('flex-shrink'));\n        this.attributeChangedCallback('flex-basis', null, this.getAttribute('flex-basis'));\n        this.attributeChangedCallback('align-self', null, this.getAttribute('align-self'));\n        this.attributeChangedCallback('order', null, this.getAttribute('order'));\n        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));\n        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));\n        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));\n        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-col', DsCol); ","/**\n * ds-page - A consistent wrapper around application content, handling page-level layout and margins\n * No specific observable attributes beyond standard HTML attributes\n */\nclass DsPage extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    width: 100%;\n                    min-height: 100vh; /* Ensures it takes full viewport height */\n                    box-sizing: border-box; /* Include padding/border in element's total width/height */\n                }\n                \n                .page-container {\n                    display: flex; /* Makes the main element a flex container for its children */\n                    flex-direction: column; /* Stacks children vertically by default */\n                    width: 100%;\n                    padding: var(--ds-spacing-page-padding, 20px); /* Default padding, can be overridden by CSS variable */\n                    margin: 0 auto; /* Center content if width is limited */\n                    max-width: var(--ds-page-max-width, 1200px); /* Optional max-width for content */\n                }\n            </style>\n            <main class=\"page-container\">\n                <slot></slot>\n            </main>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal container\n        this.pageContainer = shadowRoot.querySelector('.page-container');\n    }\n    \n    /**\n     * No specific observable attributes for ds-page\n     * It's designed to be a simple, opinionated page wrapper\n     */\n    static get observedAttributes() {\n        return []; // No specific attributes to observe\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply any initial setup if needed\n     */\n    connectedCallback() {\n        // No specific initialization needed for ds-page\n        // It's designed to be a simple wrapper\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-page', DsPage); ","/**\n * ds-row - A Flexbox container for horizontal layouts\n * Observable attributes: justify-content, align-items, gap, wrap\n */\nclass DsRow extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                }\n                \n                .row-container {\n                    display: flex;\n                    flex-direction: row;\n                    /* Default flex-wrap will be controlled by attribute */\n                }\n            </style>\n            <div class=\"row-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal container for attribute changes\n        this.rowContainer = shadowRoot.querySelector('.row-container');\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['justify-content', 'align-items', 'gap', 'wrap'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding styles\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'justify-content':\n                this.rowContainer.style.justifyContent = newValue || '';\n                break;\n                \n            case 'align-items':\n                this.rowContainer.style.alignItems = newValue || '';\n                break;\n                \n            case 'gap':\n                this.rowContainer.style.gap = newValue || '';\n                break;\n                \n            case 'wrap':\n                // Boolean attribute - check if present\n                if (this.hasAttribute('wrap')) {\n                    this.rowContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.rowContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial styles based on current attributes\n     */\n    connectedCallback() {\n        // Apply initial styles for all observed attributes\n        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));\n        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));\n        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));\n        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-row', DsRow); ","import '../components/ds-page.js';\nimport '../components/ds-row.js';\nimport '../components/ds-col.js';\n\nexport default {\n  title: 'Components/ds-page',\n  component: 'ds-page',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A consistent wrapper around application content, handling page-level layout and margins.'\n      }\n    }\n  }\n};\n\nexport const Default = () => {\n  const element = document.createElement('ds-page');\n  element.innerHTML = `\n    <header style=\"background: var(--ds-color-primary); color: white; padding: 16px; text-align: center;\">\n      <h1>My Application</h1>\n    </header>\n    \n    <ds-row justify-content=\"space-between\" align-items=\"flex-start\" gap=\"24px\" style=\"margin: 24px 0;\">\n      <ds-col flex-grow=\"1\" style=\"background: white; padding: 16px; border-radius: 8px;\">\n        <h2>Main Content Area</h2>\n        <p>This is the main content area that grows to fill available space.</p>\n        <p>It can contain any content and will expand to fill the remaining space.</p>\n      </ds-col>\n      \n      <ds-col flex-basis=\"250px\" style=\"background: white; padding: 16px; border-radius: 8px;\">\n        <h3>Sidebar</h3>\n        <p>This sidebar has a fixed width of 250px.</p>\n        <ul>\n          <li>Navigation item 1</li>\n          <li>Navigation item 2</li>\n          <li>Navigation item 3</li>\n        </ul>\n      </ds-col>\n    </ds-row>\n    \n    <footer style=\"background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;\">\n      <p>&copy; 2025 My Application</p>\n    </footer>\n  `;\n  return element;\n};\n\nexport const ComplexLayout = () => {\n  const element = document.createElement('ds-page');\n  element.innerHTML = `\n    <header style=\"background: var(--ds-color-primary); color: white; padding: 16px;\">\n      <ds-row justify-content=\"space-between\" align-items=\"center\">\n        <h1>Complex Layout Example</h1>\n        <nav>\n          <ds-row gap=\"16px\">\n            <a href=\"#\" style=\"color: white; text-decoration: none;\">Home</a>\n            <a href=\"#\" style=\"color: white; text-decoration: none;\">About</a>\n            <a href=\"#\" style=\"color: white; text-decoration: none;\">Contact</a>\n          </ds-row>\n        </nav>\n      </ds-row>\n    </header>\n    \n    <ds-row gap=\"24px\" style=\"margin: 24px 0;\">\n      <ds-col flex-grow=\"1\">\n        <ds-row gap=\"16px\" wrap>\n          <ds-col flex-basis=\"300px\" style=\"background: white; padding: 16px; border-radius: 8px;\">\n            <h3>Card 1</h3>\n            <p>This card demonstrates responsive behavior.</p>\n          </ds-col>\n          <ds-col flex-basis=\"300px\" style=\"background: white; padding: 16px; border-radius: 8px;\">\n            <h3>Card 2</h3>\n            <p>Cards will wrap to new lines on smaller screens.</p>\n          </ds-col>\n          <ds-col flex-basis=\"300px\" style=\"background: white; padding: 16px; border-radius: 8px;\">\n            <h3>Card 3</h3>\n            <p>Each card maintains its minimum width.</p>\n          </ds-col>\n        </ds-row>\n      </ds-col>\n    </ds-row>\n    \n    <footer style=\"background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;\">\n      <p>&copy; 2025 Complex Layout Example</p>\n    </footer>\n  `;\n  return element;\n};\n\nexport const SimpleContent = () => {\n  const element = document.createElement('ds-page');\n  element.innerHTML = `\n    <ds-row justify-content=\"center\" align-items=\"center\" style=\"min-height: 60vh;\">\n      <ds-col style=\"text-align: center; max-width: 600px;\">\n        <h1>Welcome to the Design System</h1>\n        <p style=\"font-size: 1.2em; margin: 24px 0;\">\n          This is a simple example showing how ds-page can be used to create clean, centered content layouts.\n        </p>\n        <ds-row justify-content=\"center\" gap=\"16px\">\n          <button style=\"background: var(--ds-color-primary); color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer;\">\n            Get Started\n          </button>\n          <button style=\"background: var(--ds-color-secondary); color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer;\">\n            Learn More\n          </button>\n        </ds-row>\n      </ds-col>\n    </ds-row>\n  `;\n  return element;\n};\n\nexport const FormLayout = () => {\n  const element = document.createElement('ds-page');\n  element.innerHTML = `\n    <ds-row justify-content=\"center\" style=\"margin: 24px 0;\">\n      <ds-col flex-basis=\"500px\" style=\"background: white; padding: 32px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n        <h2 style=\"text-align: center; margin-bottom: 24px;\">Contact Form</h2>\n        \n        <ds-col gap=\"16px\">\n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: bold;\">Name</label>\n            <input type=\"text\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box;\">\n          </div>\n          \n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: bold;\">Email</label>\n            <input type=\"email\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box;\">\n          </div>\n          \n          <div>\n            <label style=\"display: block; margin-bottom: 4px; font-weight: bold;\">Message</label>\n            <textarea rows=\"4\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; resize: vertical;\"></textarea>\n          </div>\n          \n          <ds-row justify-content=\"center\" style=\"margin-top: 24px;\">\n            <button style=\"background: var(--ds-color-primary); color: white; border: none; padding: 12px 32px; border-radius: 4px; cursor: pointer; font-size: 16px;\">\n              Send Message\n            </button>\n          </ds-row>\n        </ds-col>\n      </ds-col>\n    </ds-row>\n  `;\n  return element;\n}; ;export const __namedExportsOrder = [\"Default\",\"ComplexLayout\",\"SimpleContent\",\"FormLayout\"];"],"names":[],"sourceRoot":""}