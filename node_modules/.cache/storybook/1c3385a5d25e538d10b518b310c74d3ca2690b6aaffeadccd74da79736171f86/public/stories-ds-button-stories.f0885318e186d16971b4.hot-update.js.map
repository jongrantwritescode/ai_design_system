{"version":3,"file":"stories-ds-button-stories.f0885318e186d16971b4.hot-update.js","mappingsnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ai-design-system/./src/components/ds-button.js","webpack://ai-design-system/./src/stories/ds-button.stories.js"],"sourcesContent":["/**\n * ds-button - A button component that wraps native button elements\n * Supports: submit, reset, button types\n */\nclass DsButton extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <button part=\"button\" type=\"button\">\n                    <slot></slot>\n                </button>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal button for attribute changes\n        this.button = shadowRoot.querySelector('button');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['type', 'disabled', 'name', 'value'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal button\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'type':\n                this.button.type = newValue || 'button';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.button.disabled = true;\n                } else {\n                    this.button.disabled = false;\n                }\n                break;\n                \n            case 'name':\n                this.button.name = newValue || '';\n                break;\n                \n            case 'value':\n                this.button.value = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners to re-dispatch events from the host element\n     */\n    setupEventListeners() {\n        const events = ['click', 'focus', 'blur'];\n        \n        events.forEach(eventType => {\n            this.button.addEventListener(eventType, (event) => {\n                // Create a new event to dispatch from the host\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal button\n     */\n    get type() {\n        return this.button.type;\n    }\n    \n    set type(val) {\n        this.button.type = val;\n    }\n    \n    get disabled() {\n        return this.button.disabled;\n    }\n    \n    set disabled(val) {\n        this.button.disabled = val;\n    }\n    \n    get name() {\n        return this.button.name;\n    }\n    \n    set name(val) {\n        this.button.name = val;\n    }\n    \n    get value() {\n        return this.button.value;\n    }\n    \n    set value(val) {\n        this.button.value = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('type', null, this.getAttribute('type'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('name', null, this.getAttribute('name'));\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-button', DsButton); ","import '../components/ds-button.js';\n\nexport default {\n  title: 'Components/ds-button',\n  component: 'ds-button',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A button component that wraps native button elements with support for various button types.'\n      }\n    }\n  },\n  argTypes: {\n    type: {\n      control: 'select',\n      options: ['button', 'submit', 'reset'],\n      description: 'The type of button'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled'\n    },\n    name: {\n      control: 'text',\n      description: 'The name attribute for form submission'\n    },\n    value: {\n      control: 'text',\n      description: 'The value attribute for form submission'\n    },\n    content: {\n      control: 'text',\n      description: 'The text content of the button'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-button');\n  \n  // Set attributes\n  if (args.type) {\n    element.setAttribute('type', args.type);\n  }\n  if (args.disabled) {\n    element.setAttribute('disabled', '');\n  }\n  if (args.name) {\n    element.setAttribute('name', args.name);\n  }\n  if (args.value) {\n    element.setAttribute('value', args.value);\n  }\n  \n  // Set content\n  element.innerHTML = args.content || 'Button';\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  type: 'button',\n  content: 'Click me'\n};\n\nexport const Submit = Template.bind({});\nSubmit.args = {\n  type: 'submit',\n  content: 'Submit Form'\n};\n\nexport const Reset = Template.bind({});\nReset.args = {\n  type: 'reset',\n  content: 'Reset Form'\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  type: 'button',\n  content: 'Disabled Button',\n  disabled: true\n};\n\nexport const WithValue = Template.bind({});\nWithValue.args = {\n  type: 'button',\n  content: 'Button with Value',\n  value: 'button-value',\n  name: 'action-button'\n};\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  type: 'button',\n  content: 'Primary Action'\n};\n\nexport const Secondary = Template.bind({});\nSecondary.args = {\n  type: 'button',\n  content: 'Secondary Action'\n}; ;export const __namedExportsOrder = [\"Default\",\"Submit\",\"Reset\",\"Disabled\",\"WithValue\",\"Primary\",\"Secondary\"];"],"names":[],"sourceRoot":""}