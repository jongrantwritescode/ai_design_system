{"version":3,"file":"stories-ds-option-stories.0407afc9dc7c3bff4fc7.hot-update.js","mappingsjsources":["webpack://ai-design-system/./src/components/ds-option.js","webpack://ai-design-system/./src/stories/ds-option.stories.js"],"sourcesContent":["/**\n * ds-option - An option component that wraps native option elements\n * Primarily used inside ds-select components\n */\nclass DsOption extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: none; /* Hidden by default, shown when slotted into select */\n                }\n            </style>\n            <div>\n                <option part=\"option\">\n                    <slot></slot>\n                </option>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal option for attribute changes\n        this.option = shadowRoot.querySelector('option');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['value', 'disabled', 'selected'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal option\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'value':\n                this.option.value = newValue || '';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.option.disabled = true;\n                } else {\n                    this.option.disabled = false;\n                }\n                break;\n                \n            case 'selected':\n                if (this.hasAttribute('selected')) {\n                    this.option.selected = true;\n                } else {\n                    this.option.selected = false;\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Options don't typically have interactive events, but we can listen for changes\n        this.option.addEventListener('change', (event) => {\n            const newEvent = new Event('change', {\n                bubbles: true,\n                composed: true,\n                cancelable: true\n            });\n            this.dispatchEvent(newEvent);\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal option\n     */\n    get value() {\n        return this.option.value;\n    }\n    \n    set value(val) {\n        this.option.value = val;\n    }\n    \n    get selected() {\n        return this.option.selected;\n    }\n    \n    set selected(val) {\n        this.option.selected = val;\n    }\n    \n    get disabled() {\n        return this.option.disabled;\n    }\n    \n    set disabled(val) {\n        this.option.disabled = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('selected', null, this.getAttribute('selected'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-option', DsOption); ","import '../components/ds-option.js';\n\nexport default {\n  title: 'Components/ds-option',\n  component: 'ds-option',\n  parameters: {\n    docs: {\n      description: {\n        component: 'An option component that wraps native option elements, primarily used within ds-select components.'\n      }\n    }\n  },\n  argTypes: {\n    value: {\n      control: 'text',\n      description: 'The value of the option'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the option is disabled'\n    },\n    selected: {\n      control: 'boolean',\n      description: 'Whether the option is selected'\n    },\n    content: {\n      control: 'text',\n      description: 'The text content of the option'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-option');\n  \n  // Set attributes\n  if (args.value) {\n    element.setAttribute('value', args.value);\n  }\n  if (args.disabled) {\n    element.setAttribute('disabled', '');\n  }\n  if (args.selected) {\n    element.setAttribute('selected', '');\n  }\n  \n  // Set content\n  element.innerHTML = args.content || 'Option';\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  value: 'option1',\n  content: 'Option 1'\n};\n\nexport const Selected = Template.bind({});\nSelected.args = {\n  value: 'option2',\n  selected: true,\n  content: 'Option 2 (Selected)'\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  value: 'option3',\n  disabled: true,\n  content: 'Option 3 (Disabled)'\n};\n\nexport const WithValue = Template.bind({});\nWithValue.args = {\n  value: 'custom-value',\n  content: 'Custom Option'\n};\n\n// Option Group Example\nexport const OptionGroup = () => {\n  const container = document.createElement('div');\n  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';\n  \n  const option1 = document.createElement('ds-option');\n  option1.setAttribute('value', 'apple');\n  option1.innerHTML = 'Apple';\n  \n  const option2 = document.createElement('ds-option');\n  option2.setAttribute('value', 'banana');\n  option2.setAttribute('selected', '');\n  option2.innerHTML = 'Banana';\n  \n  const option3 = document.createElement('ds-option');\n  option3.setAttribute('value', 'orange');\n  option3.innerHTML = 'Orange';\n  \n  const option4 = document.createElement('ds-option');\n  option4.setAttribute('value', 'grape');\n  option4.setAttribute('disabled', '');\n  option4.innerHTML = 'Grape (Disabled)';\n  \n  container.appendChild(option1);\n  container.appendChild(option2);\n  container.appendChild(option3);\n  container.appendChild(option4);\n  \n  return container;\n}; ;export const __namedExportsOrder = [\"Default\",\"Selected\",\"Disabled\",\"WithValue\",\"OptionGroup\"];"],"names":[],"sourceRoot":""}