{"version":3,"file":"stories-ds-checkbox-stories.iframe.bundle.js","mappingsnsources":["webpack://ai-design-system/./src/components/ds-checkbox.js","webpack://ai-design-system/./src/stories/ds-checkbox.stories.js"],"sourcesContent":["/**\n * ds-checkbox - A checkbox component that wraps native checkbox input elements\n */\nclass DsCheckbox extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: inline-block;\n                }\n                \n                .wrapper {\n                    display: flex;\n                    align-items: center;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <input type=\"checkbox\" id=\"checkbox\" part=\"checkbox\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal checkbox for attribute changes\n        this.checkbox = shadowRoot.querySelector('input[type=\"checkbox\"]');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal checkbox\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'name':\n                this.checkbox.name = newValue || '';\n                break;\n                \n            case 'value':\n                this.checkbox.value = newValue || '';\n                break;\n                \n            case 'checked':\n                if (this.hasAttribute('checked')) {\n                    this.checkbox.checked = true;\n                } else {\n                    this.checkbox.checked = false;\n                }\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.checkbox.disabled = true;\n                } else {\n                    this.checkbox.disabled = false;\n                }\n                break;\n                \n            case 'readonly':\n                if (this.hasAttribute('readonly')) {\n                    this.checkbox.readOnly = true;\n                } else {\n                    this.checkbox.readOnly = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.checkbox.required = true;\n                } else {\n                    this.checkbox.required = false;\n                }\n                break;\n                \n            case 'id':\n                this.checkbox.id = newValue || '';\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners to re-dispatch events from the host element\n     */\n    setupEventListeners() {\n        const events = ['change', 'focus', 'blur'];\n        \n        events.forEach(eventType => {\n            this.checkbox.addEventListener(eventType, (event) => {\n                // Create a new event to dispatch from the host\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                // Copy relevant properties\n                if (eventType === 'change') {\n                    newEvent.target = this;\n                    newEvent.currentTarget = this;\n                }\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal checkbox\n     */\n    get checked() {\n        return this.checkbox.checked;\n    }\n    \n    set checked(val) {\n        this.checkbox.checked = val;\n    }\n    \n    get value() {\n        return this.checkbox.value;\n    }\n    \n    set value(val) {\n        this.checkbox.value = val;\n    }\n    \n    get name() {\n        return this.checkbox.name;\n    }\n    \n    set name(val) {\n        this.checkbox.name = val;\n    }\n    \n    get disabled() {\n        return this.checkbox.disabled;\n    }\n    \n    set disabled(val) {\n        this.checkbox.disabled = val;\n    }\n    \n    get readonly() {\n        return this.checkbox.readOnly;\n    }\n    \n    set readonly(val) {\n        this.checkbox.readOnly = val;\n    }\n    \n    get required() {\n        return this.checkbox.required;\n    }\n    \n    set required(val) {\n        this.checkbox.required = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('name', null, this.getAttribute('name'));\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n        this.attributeChangedCallback('checked', null, this.getAttribute('checked'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));\n        this.attributeChangedCallback('required', null, this.getAttribute('required'));\n        this.attributeChangedCallback('id', null, this.getAttribute('id'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-checkbox', DsCheckbox); ","import '../components/ds-checkbox.js';\n\nexport default {\n  title: 'Components/ds-checkbox',\n  component: 'ds-checkbox',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A checkbox component that wraps native checkbox input elements with support for individual and grouped checkboxes.'\n      }\n    }\n  },\n  argTypes: {\n    name: {\n      control: 'text',\n      description: 'The name attribute for checkbox group association'\n    },\n    value: {\n      control: 'text',\n      description: 'The value of the checkbox'\n    },\n    checked: {\n      control: 'boolean',\n      description: 'Whether the checkbox is checked'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the checkbox is disabled'\n    },\n    readonly: {\n      control: 'boolean',\n      description: 'Whether the checkbox is read-only'\n    },\n    required: {\n      control: 'boolean',\n      description: 'Whether the checkbox is required'\n    },\n    id: {\n      control: 'text',\n      description: 'The unique identifier for the checkbox'\n    },\n    content: {\n      control: 'text',\n      description: 'The label text for the checkbox'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-checkbox');\n  \n  // Set attributes\n  if (args.name) {\n    element.setAttribute('name', args.name);\n  }\n  if (args.value) {\n    element.setAttribute('value', args.value);\n  }\n  if (args.checked) {\n    element.setAttribute('checked', '');\n  }\n  if (args.disabled) {\n    element.setAttribute('disabled', '');\n  }\n  if (args.readonly) {\n    element.setAttribute('readonly', '');\n  }\n  if (args.required) {\n    element.setAttribute('required', '');\n  }\n  if (args.id) {\n    element.setAttribute('id', args.id);\n  }\n  \n  // Set content\n  element.innerHTML = args.content || 'Checkbox Option';\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  name: 'checkbox-option',\n  value: 'option1',\n  content: 'Accept terms and conditions'\n};\n\nexport const Checked = Template.bind({});\nChecked.args = {\n  name: 'checkbox-option',\n  value: 'option2',\n  checked: true,\n  content: 'Subscribe to newsletter (Checked)'\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  name: 'checkbox-option',\n  value: 'option3',\n  disabled: true,\n  content: 'Premium feature (Disabled)'\n};\n\nexport const Required = Template.bind({});\nRequired.args = {\n  name: 'checkbox-option',\n  value: 'option4',\n  required: true,\n  content: 'I agree to the terms (Required)'\n};\n\n// Checkbox Group Example\nexport const CheckboxGroup = () => {\n  const container = document.createElement('div');\n  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';\n  \n  const checkbox1 = document.createElement('ds-checkbox');\n  checkbox1.setAttribute('name', 'interests');\n  checkbox1.setAttribute('value', 'technology');\n  checkbox1.innerHTML = 'Technology';\n  \n  const checkbox2 = document.createElement('ds-checkbox');\n  checkbox2.setAttribute('name', 'interests');\n  checkbox2.setAttribute('value', 'sports');\n  checkbox2.setAttribute('checked', '');\n  checkbox2.innerHTML = 'Sports';\n  \n  const checkbox3 = document.createElement('ds-checkbox');\n  checkbox3.setAttribute('name', 'interests');\n  checkbox3.setAttribute('value', 'music');\n  checkbox3.innerHTML = 'Music';\n  \n  const checkbox4 = document.createElement('ds-checkbox');\n  checkbox4.setAttribute('name', 'interests');\n  checkbox4.setAttribute('value', 'travel');\n  checkbox4.innerHTML = 'Travel';\n  \n  container.appendChild(checkbox1);\n  container.appendChild(checkbox2);\n  container.appendChild(checkbox3);\n  container.appendChild(checkbox4);\n  \n  return container;\n}; ;export const __namedExportsOrder = [\"Default\",\"Checked\",\"Disabled\",\"Required\",\"CheckboxGroup\"];"],"names":[],"sourceRoot":""}