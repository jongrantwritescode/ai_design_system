(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-select-stories"],{

/***/ "./src/components/ds-option.js":
/*!*************************************!*\
  !*** ./src/components/ds-option.js ***!
  \*************************************/
/***/ (() => {

/**
 * ds-option - An option component that wraps native option elements
 * Primarily used inside ds-select components
 */
class DsOption extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: none; /* Hidden by default, shown when slotted into select */
                }
            </style>
            <div>
                <option part="option">
                    <slot></slot>
                </option>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal option for attribute changes
        this.option = shadowRoot.querySelector('option');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['value', 'disabled', 'selected'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal option
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'value':
                this.option.value = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.option.disabled = true;
                } else {
                    this.option.disabled = false;
                }
                break;
                
            case 'selected':
                if (this.hasAttribute('selected')) {
                    this.option.selected = true;
                } else {
                    this.option.selected = false;
                }
                break;
        }
    }
    
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Options don't typically have interactive events, but we can listen for changes
        this.option.addEventListener('change', (event) => {
            const newEvent = new Event('change', {
                bubbles: true,
                composed: true,
                cancelable: true
            });
            this.dispatchEvent(newEvent);
        });
    }
    
    /**
     * Property getters and setters to mirror the internal option
     */
    get value() {
        return this.option.value;
    }
    
    set value(val) {
        this.option.value = val;
    }
    
    get selected() {
        return this.option.selected;
    }
    
    set selected(val) {
        this.option.selected = val;
    }
    
    get disabled() {
        return this.option.disabled;
    }
    
    set disabled(val) {
        this.option.disabled = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('selected', null, this.getAttribute('selected'));
    }
}

// Register the custom element
customElements.define('ds-option', DsOption); 

/***/ }),

/***/ "./src/components/ds-select.js":
/*!*************************************!*\
  !*** ./src/components/ds-select.js ***!
  \*************************************/
/***/ (() => {

/**
 * ds-select - A select component that wraps native select elements
 * Supports multiple selection and option projection
 */
class DsSelect extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <select id="select" part="select">
                    <slot></slot>
                </select>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal select for attribute changes
        this.select = shadowRoot.querySelector('select');
        
        // Set up event listeners
        this.setupEventListeners();
        
        // Set up slot change listener to handle option projection
        this.setupSlotListener();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['value', 'disabled', 'required', 'name', 'multiple', 'size'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal select
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'value':
                this.select.value = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.select.disabled = true;
                } else {
                    this.select.disabled = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.select.required = true;
                } else {
                    this.select.required = false;
                }
                break;
                
            case 'name':
                this.select.name = newValue || '';
                break;
                
            case 'multiple':
                if (this.hasAttribute('multiple')) {
                    this.select.multiple = true;
                } else {
                    this.select.multiple = false;
                }
                break;
                
            case 'size':
                this.select.size = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.select.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Set up slot listener to handle option projection
     */
    setupSlotListener() {
        const slot = this.shadowRoot.querySelector('slot');
        slot.addEventListener('slotchange', () => {
            this.handleSlotChange();
        });
    }
    
    /**
     * Handle slot changes to project ds-option components into the select
     */
    handleSlotChange() {
        const slot = this.shadowRoot.querySelector('slot');
        const assignedNodes = slot.assignedNodes();
        
        // Clear existing options
        this.select.innerHTML = '';
        
        // Process each assigned node
        assignedNodes.forEach(node => {
            if (node.nodeType === Node.ELEMENT_NODE) {
                if (node.tagName === 'DS-OPTION') {
                    // Create a native option element
                    const option = document.createElement('option');
                    
                    // Copy attributes from ds-option
                    if (node.hasAttribute('value')) {
                        option.value = node.getAttribute('value');
                    }
                    if (node.hasAttribute('disabled')) {
                        option.disabled = true;
                    }
                    if (node.hasAttribute('selected')) {
                        option.selected = true;
                    }
                    
                    // Copy text content
                    option.textContent = node.textContent || node.innerText || '';
                    
                    this.select.appendChild(option);
                } else if (node.tagName === 'OPTION') {
                    // Direct option element, clone it
                    this.select.appendChild(node.cloneNode(true));
                }
            }
        });
    }
    
    /**
     * Property getters and setters to mirror the internal select
     */
    get value() {
        return this.select.value;
    }
    
    set value(val) {
        this.select.value = val;
    }
    
    get disabled() {
        return this.select.disabled;
    }
    
    set disabled(val) {
        this.select.disabled = val;
    }
    
    get required() {
        return this.select.required;
    }
    
    set required(val) {
        this.select.required = val;
    }
    
    get name() {
        return this.select.name;
    }
    
    set name(val) {
        this.select.name = val;
    }
    
    get multiple() {
        return this.select.multiple;
    }
    
    set multiple(val) {
        this.select.multiple = val;
    }
    
    get size() {
        return this.select.size;
    }
    
    set size(val) {
        this.select.size = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('multiple', null, this.getAttribute('multiple'));
        this.attributeChangedCallback('size', null, this.getAttribute('size'));
        
        // Handle initial slot content
        this.handleSlotChange();
    }
}

// Register the custom element
customElements.define('ds-select', DsSelect); 

/***/ }),

/***/ "./src/stories/ds-select.stories.js":
/*!******************************************!*\
  !*** ./src/stories/ds-select.stories.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Multiple: () => (/* binding */ Multiple),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   WithOptions: () => (/* binding */ WithOptions),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_select_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-select.js */ "./src/components/ds-select.js");
/* harmony import */ var _components_ds_select_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_select_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_ds_option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/ds-option.js */ "./src/components/ds-option.js");
/* harmony import */ var _components_ds_option_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_ds_option_js__WEBPACK_IMPORTED_MODULE_1__);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-select',
  component: 'ds-select',
  parameters: {
    docs: {
      description: {
        component: 'A select component that wraps native select elements with support for single and multiple selection.'
      }
    }
  },
  argTypes: {
    value: {
      control: 'text',
      description: 'The currently selected value'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the select is disabled'
    },
    required: {
      control: 'boolean',
      description: 'Whether the select is required'
    },
    name: {
      control: 'text',
      description: 'The name attribute for form submission'
    },
    multiple: {
      control: 'boolean',
      description: 'Whether multiple options can be selected'
    },
    size: {
      control: 'number',
      description: 'Number of visible options'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-select');
  
  // Set attributes
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.required) {
    element.setAttribute('required', '');
  }
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.multiple) {
    element.setAttribute('multiple', '');
  }
  if (args.size) {
    element.setAttribute('size', args.size);
  }
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  name: 'country-select'
};

const WithOptions = () => {
  const select = document.createElement('ds-select');
  select.setAttribute('name', 'country-select');
  
  const option1 = document.createElement('ds-option');
  option1.setAttribute('value', 'us');
  option1.innerHTML = 'United States';
  
  const option2 = document.createElement('ds-option');
  option2.setAttribute('value', 'ca');
  option2.setAttribute('selected', '');
  option2.innerHTML = 'Canada';
  
  const option3 = document.createElement('ds-option');
  option3.setAttribute('value', 'uk');
  option3.innerHTML = 'United Kingdom';
  
  const option4 = document.createElement('ds-option');
  option4.setAttribute('value', 'au');
  option4.innerHTML = 'Australia';
  
  select.appendChild(option1);
  select.appendChild(option2);
  select.appendChild(option3);
  select.appendChild(option4);
  
  return select;
};

const Disabled = () => {
  const select = document.createElement('ds-select');
  select.setAttribute('name', 'disabled-select');
  select.setAttribute('disabled', '');
  
  const option1 = document.createElement('ds-option');
  option1.setAttribute('value', 'option1');
  option1.innerHTML = 'Option 1';
  
  const option2 = document.createElement('ds-option');
  option2.setAttribute('value', 'option2');
  option2.innerHTML = 'Option 2';
  
  select.appendChild(option1);
  select.appendChild(option2);
  
  return select;
};

const Required = () => {
  const select = document.createElement('ds-select');
  select.setAttribute('name', 'required-select');
  select.setAttribute('required', '');
  
  const option1 = document.createElement('ds-option');
  option1.setAttribute('value', '');
  option1.innerHTML = 'Please select an option...';
  
  const option2 = document.createElement('ds-option');
  option2.setAttribute('value', 'option1');
  option2.innerHTML = 'Option 1';
  
  const option3 = document.createElement('ds-option');
  option3.setAttribute('value', 'option2');
  option3.innerHTML = 'Option 2';
  
  select.appendChild(option1);
  select.appendChild(option2);
  select.appendChild(option3);
  
  return select;
};

const Multiple = () => {
  const select = document.createElement('ds-select');
  select.setAttribute('name', 'multiple-select');
  select.setAttribute('multiple', '');
  select.setAttribute('size', '4');
  
  const option1 = document.createElement('ds-option');
  option1.setAttribute('value', 'red');
  option1.innerHTML = 'Red';
  
  const option2 = document.createElement('ds-option');
  option2.setAttribute('value', 'green');
  option2.setAttribute('selected', '');
  option2.innerHTML = 'Green';
  
  const option3 = document.createElement('ds-option');
  option3.setAttribute('value', 'blue');
  option3.setAttribute('selected', '');
  option3.innerHTML = 'Blue';
  
  const option4 = document.createElement('ds-option');
  option4.setAttribute('value', 'yellow');
  option4.innerHTML = 'Yellow';
  
  select.appendChild(option1);
  select.appendChild(option2);
  select.appendChild(option3);
  select.appendChild(option4);
  
  return select;
}; ;const __namedExportsOrder = ["Default","WithOptions","Disabled","Required","Multiple"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-select-stories.iframe.bundle.js.map