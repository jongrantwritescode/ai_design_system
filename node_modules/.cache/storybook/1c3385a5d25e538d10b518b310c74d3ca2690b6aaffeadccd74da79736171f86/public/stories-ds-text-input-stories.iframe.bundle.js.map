{"version":3,"file":"stories-ds-text-input-stories.iframe.bundle.js","mappingsjsources":["webpack://ai-design-system/./src/components/ds-text-input.js","webpack://ai-design-system/./src/stories/ds-text-input.stories.js"],"sourcesContent":["/**\n * ds-text-input - A text input component that wraps native input elements\n * Supports: text, email, password, number, tel, url, search\n */\nclass DsTextInput extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <input id=\"input\" part=\"input\" type=\"text\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal input for attribute changes\n        this.input = shadowRoot.querySelector('input');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['type', 'value', 'placeholder', 'disabled', 'readonly', 'required', 'name', 'id', 'aria-label'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal input\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'type':\n                this.input.type = newValue || 'text';\n                break;\n                \n            case 'value':\n                this.input.value = newValue || '';\n                break;\n                \n            case 'placeholder':\n                this.input.placeholder = newValue || '';\n                break;\n                \n            case 'disabled':\n                if (this.hasAttribute('disabled')) {\n                    this.input.disabled = true;\n                } else {\n                    this.input.disabled = false;\n                }\n                break;\n                \n            case 'readonly':\n                if (this.hasAttribute('readonly')) {\n                    this.input.readOnly = true;\n                } else {\n                    this.input.readOnly = false;\n                }\n                break;\n                \n            case 'required':\n                if (this.hasAttribute('required')) {\n                    this.input.required = true;\n                } else {\n                    this.input.required = false;\n                }\n                break;\n                \n            case 'name':\n                this.input.name = newValue || '';\n                break;\n                \n            case 'id':\n                this.input.id = newValue || '';\n                break;\n                \n            case 'aria-label':\n                this.input.setAttribute('aria-label', newValue || '');\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners to re-dispatch events from the host element\n     */\n    setupEventListeners() {\n        const events = ['input', 'change', 'focus', 'blur'];\n        \n        events.forEach(eventType => {\n            this.input.addEventListener(eventType, (event) => {\n                // Create a new event to dispatch from the host\n                const newEvent = new Event(eventType, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true\n                });\n                \n                // Copy relevant properties\n                if (eventType === 'input' || eventType === 'change') {\n                    newEvent.target = this;\n                    newEvent.currentTarget = this;\n                }\n                \n                this.dispatchEvent(newEvent);\n            });\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal input\n     */\n    get value() {\n        return this.input.value;\n    }\n    \n    set value(val) {\n        this.input.value = val;\n    }\n    \n    get type() {\n        return this.input.type;\n    }\n    \n    set type(val) {\n        this.input.type = val;\n    }\n    \n    get disabled() {\n        return this.input.disabled;\n    }\n    \n    set disabled(val) {\n        this.input.disabled = val;\n    }\n    \n    get readonly() {\n        return this.input.readOnly;\n    }\n    \n    set readonly(val) {\n        this.input.readOnly = val;\n    }\n    \n    get required() {\n        return this.input.required;\n    }\n    \n    set required(val) {\n        this.input.required = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('type', null, this.getAttribute('type'));\n        this.attributeChangedCallback('value', null, this.getAttribute('value'));\n        this.attributeChangedCallback('placeholder', null, this.getAttribute('placeholder'));\n        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));\n        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));\n        this.attributeChangedCallback('required', null, this.getAttribute('required'));\n        this.attributeChangedCallback('name', null, this.getAttribute('name'));\n        this.attributeChangedCallback('id', null, this.getAttribute('id'));\n        this.attributeChangedCallback('aria-label', null, this.getAttribute('aria-label'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-text-input', DsTextInput); ","import '../components/ds-text-input.js';\n\nexport default {\n  title: 'Components/ds-text-input',\n  component: 'ds-text-input',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A text input component that wraps native input elements with support for various input types.'\n      }\n    }\n  },\n  argTypes: {\n    type: {\n      control: 'select',\n      options: ['text', 'email', 'password', 'number', 'tel', 'url', 'search'],\n      description: 'The type of input field'\n    },\n    value: {\n      control: 'text',\n      description: 'The current value of the input'\n    },\n    placeholder: {\n      control: 'text',\n      description: 'Placeholder text for the input'\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the input is disabled'\n    },\n    readonly: {\n      control: 'boolean',\n      description: 'Whether the input is read-only'\n    },\n    required: {\n      control: 'boolean',\n      description: 'Whether the input is required'\n    },\n    name: {\n      control: 'text',\n      description: 'The name attribute for form submission'\n    },\n    id: {\n      control: 'text',\n      description: 'The unique identifier for the input'\n    },\n    'aria-label': {\n      control: 'text',\n      description: 'Accessibility label for the input'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-text-input');\n  \n  // Set attributes\n  if (args.type) {\n    element.setAttribute('type', args.type);\n  }\n  if (args.value) {\n    element.setAttribute('value', args.value);\n  }\n  if (args.placeholder) {\n    element.setAttribute('placeholder', args.placeholder);\n  }\n  if (args.disabled) {\n    element.setAttribute('disabled', '');\n  }\n  if (args.readonly) {\n    element.setAttribute('readonly', '');\n  }\n  if (args.required) {\n    element.setAttribute('required', '');\n  }\n  if (args.name) {\n    element.setAttribute('name', args.name);\n  }\n  if (args.id) {\n    element.setAttribute('id', args.id);\n  }\n  if (args['aria-label']) {\n    element.setAttribute('aria-label', args['aria-label']);\n  }\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  type: 'text',\n  placeholder: 'Enter text here...',\n  name: 'text-input'\n};\n\nexport const Email = Template.bind({});\nEmail.args = {\n  type: 'email',\n  placeholder: 'Enter your email...',\n  name: 'email-input',\n  required: true\n};\n\nexport const Password = Template.bind({});\nPassword.args = {\n  type: 'password',\n  placeholder: 'Enter your password...',\n  name: 'password-input',\n  required: true\n};\n\nexport const Number = Template.bind({});\nNumber.args = {\n  type: 'number',\n  placeholder: 'Enter a number...',\n  name: 'number-input'\n};\n\nexport const Disabled = Template.bind({});\nDisabled.args = {\n  type: 'text',\n  value: 'This input is disabled',\n  disabled: true,\n  name: 'disabled-input'\n};\n\nexport const Readonly = Template.bind({});\nReadonly.args = {\n  type: 'text',\n  value: 'This input is read-only',\n  readonly: true,\n  name: 'readonly-input'\n};\n\nexport const WithValue = Template.bind({});\nWithValue.args = {\n  type: 'text',\n  value: 'Pre-filled value',\n  name: 'value-input'\n};\n\nexport const Required = Template.bind({});\nRequired.args = {\n  type: 'text',\n  placeholder: 'This field is required...',\n  required: true,\n  name: 'required-input'\n}; ;export const __namedExportsOrder = [\"Default\",\"Email\",\"Password\",\"Number\",\"Disabled\",\"Readonly\",\"WithValue\",\"Required\"];"],"names":[],"sourceRoot":""}