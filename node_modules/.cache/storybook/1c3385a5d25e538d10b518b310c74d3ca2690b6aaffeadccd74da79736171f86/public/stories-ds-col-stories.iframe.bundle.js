(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-col-stories"],{

/***/ "./src/components/ds-col.js":
/*!**********************************!*\
  !*** ./src/components/ds-col.js ***!
  \**********************************/
/***/ (() => {

/**
 * ds-col - A Flexbox item that can also act as a Flexbox container for vertical layouts
 * Observable attributes: flex-grow, flex-shrink, flex-basis, align-self, order (flex item properties)
 *                      justify-content, align-items, gap, wrap (flex container properties)
 */
class DsCol extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block; /* Custom elements are inline by default */
                    /* Flex item properties will be applied by ds-row parent's context */
                }
                
                .col-container {
                    display: flex; /* Make it a flex container for its own children */
                    flex-direction: column;
                    /* Default flex-wrap for its own children */
                }
            </style>
            <div class="col-container">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal container for attribute changes
        this.colContainer = shadowRoot.querySelector('.col-container');
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return [
            // Flex Item Properties (applied to :host)
            'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',
            // Flex Container Properties (applied to .col-container)
            'justify-content', 'align-items', 'gap', 'wrap'
        ];
    }
    
    /**
     * React to attribute changes and apply corresponding styles
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            // Flex Item Properties (applied to :host)
            case 'flex-grow':
                this.style.flexGrow = newValue || '';
                break;
                
            case 'flex-shrink':
                this.style.flexShrink = newValue || '';
                break;
                
            case 'flex-basis':
                this.style.flexBasis = newValue || '';
                break;
                
            case 'align-self':
                this.style.alignSelf = newValue || '';
                break;
                
            case 'order':
                this.style.order = newValue || '';
                break;
                
            // Flex Container Properties (applied to .col-container)
            case 'justify-content':
                this.colContainer.style.justifyContent = newValue || '';
                break;
                
            case 'align-items':
                this.colContainer.style.alignItems = newValue || '';
                break;
                
            case 'gap':
                this.colContainer.style.gap = newValue || '';
                break;
                
            case 'wrap':
                // Boolean attribute - check if present
                if (this.hasAttribute('wrap')) {
                    this.colContainer.style.flexWrap = 'wrap';
                } else {
                    this.colContainer.style.flexWrap = 'nowrap';
                }
                break;
        }
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial styles based on current attributes
     */
    connectedCallback() {
        // Apply initial styles for all observed attributes
        this.attributeChangedCallback('flex-grow', null, this.getAttribute('flex-grow'));
        this.attributeChangedCallback('flex-shrink', null, this.getAttribute('flex-shrink'));
        this.attributeChangedCallback('flex-basis', null, this.getAttribute('flex-basis'));
        this.attributeChangedCallback('align-self', null, this.getAttribute('align-self'));
        this.attributeChangedCallback('order', null, this.getAttribute('order'));
        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));
        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));
        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));
        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));
    }
}

// Register the custom element
customElements.define('ds-col', DsCol); 

/***/ }),

/***/ "./src/stories/ds-col.stories.js":
/*!***************************************!*\
  !*** ./src/stories/ds-col.stories.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CenteredContent: () => (/* binding */ CenteredContent),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   FixedWidth: () => (/* binding */ FixedWidth),
/* harmony export */   GrowingColumn: () => (/* binding */ GrowingColumn),
/* harmony export */   Reordered: () => (/* binding */ Reordered),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_col_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-col.js */ "./src/components/ds-col.js");
/* harmony import */ var _components_ds_col_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_col_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-col',
  component: 'ds-col',
  parameters: {
    docs: {
      description: {
        component: 'A Flexbox item that can also act as a Flexbox container for vertical layouts.'
      }
    }
  },
  argTypes: {
    // Flex Item Properties
    'flex-grow': {
      control: 'number',
      description: 'How much the item can grow relative to other flex items'
    },
    'flex-shrink': {
      control: 'number',
      description: 'How much the item can shrink relative to other flex items'
    },
    'flex-basis': {
      control: 'text',
      description: 'Initial size of the flex item'
    },
    'align-self': {
      control: 'select',
      options: ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
      description: 'Alignment of this item within its flex container'
    },
    'order': {
      control: 'number',
      description: 'Order of this item within its flex container'
    },
    // Flex Container Properties
    'justify-content': {
      control: 'select',
      options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],
      description: 'Controls vertical alignment of flex items within this column'
    },
    'align-items': {
      control: 'select',
      options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],
      description: 'Controls horizontal alignment of flex items within this column'
    },
    'gap': {
      control: 'text',
      description: 'Spacing between flex items within this column'
    },
    'wrap': {
      control: 'boolean',
      description: 'Whether flex items within this column should wrap'
    }
  }
});

const Template = (args) => {
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; height: 200px; background: #f0f0f0; padding: 16px;';
  
  const element = document.createElement('ds-col');
  
  // Set flex item properties
  if (args['flex-grow'] !== undefined) {
    element.setAttribute('flex-grow', args['flex-grow']);
  }
  if (args['flex-shrink'] !== undefined) {
    element.setAttribute('flex-shrink', args['flex-shrink']);
  }
  if (args['flex-basis']) {
    element.setAttribute('flex-basis', args['flex-basis']);
  }
  if (args['align-self']) {
    element.setAttribute('align-self', args['align-self']);
  }
  if (args.order !== undefined) {
    element.setAttribute('order', args.order);
  }
  
  // Set flex container properties
  if (args['justify-content']) {
    element.setAttribute('justify-content', args['justify-content']);
  }
  if (args['align-items']) {
    element.setAttribute('align-items', args['align-items']);
  }
  if (args.gap) {
    element.setAttribute('gap', args.gap);
  }
  if (args.wrap) {
    element.setAttribute('wrap', '');
  }
  
  element.style.cssText = 'background: white; padding: 16px; border-radius: 8px;';
  element.innerHTML = `
    <div style="background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;">Content 1</div>
    <div style="background: var(--ds-color-secondary); color: white; padding: 8px; border-radius: 4px;">Content 2</div>
    <div style="background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;">Content 3</div>
  `;
  
  container.appendChild(element);
  return container;
};

const Default = Template.bind({});
Default.args = {
  'flex-grow': 1,
  'flex-shrink': 1,
  'flex-basis': 'auto',
  'align-self': 'stretch',
  'order': 0,
  'justify-content': 'flex-start',
  'align-items': 'stretch',
  'gap': '8px',
  'wrap': false
};

const GrowingColumn = Template.bind({});
GrowingColumn.args = {
  'flex-grow': 2,
  'flex-shrink': 1,
  'flex-basis': 'auto',
  'align-self': 'stretch',
  'order': 0,
  'justify-content': 'space-around',
  'align-items': 'center',
  'gap': '16px',
  'wrap': false
};

const FixedWidth = Template.bind({});
FixedWidth.args = {
  'flex-grow': 0,
  'flex-shrink': 0,
  'flex-basis': '200px',
  'align-self': 'flex-start',
  'order': 0,
  'justify-content': 'center',
  'align-items': 'center',
  'gap': '12px',
  'wrap': false
};

const CenteredContent = Template.bind({});
CenteredContent.args = {
  'flex-grow': 1,
  'flex-shrink': 1,
  'flex-basis': 'auto',
  'align-self': 'center',
  'order': 0,
  'justify-content': 'center',
  'align-items': 'center',
  'gap': '20px',
  'wrap': false
};

const Reordered = Template.bind({});
Reordered.args = {
  'flex-grow': 1,
  'flex-shrink': 1,
  'flex-basis': 'auto',
  'align-self': 'stretch',
  'order': 2,
  'justify-content': 'space-between',
  'align-items': 'stretch',
  'gap': '8px',
  'wrap': false
}; ;const __namedExportsOrder = ["Default","GrowingColumn","FixedWidth","CenteredContent","Reordered"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-col-stories.iframe.bundle.js.map