(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-page-stories"],{

/***/ "./src/components/ds-col.js":
/*!**********************************!*\
  !*** ./src/components/ds-col.js ***!
  \**********************************/
/***/ (() => {

/**
 * ds-col - A Flexbox item that can also act as a Flexbox container for vertical layouts
 * Observable attributes: flex-grow, flex-shrink, flex-basis, align-self, order (flex item properties)
 *                      justify-content, align-items, gap, wrap (flex container properties)
 */
class DsCol extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block; /* Custom elements are inline by default */
                    /* Flex item properties will be applied by ds-row parent's context */
                }
                
                .col-container {
                    display: flex; /* Make it a flex container for its own children */
                    flex-direction: column;
                    /* Default flex-wrap for its own children */
                }
            </style>
            <div class="col-container">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal container for attribute changes
        this.colContainer = shadowRoot.querySelector('.col-container');
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return [
            // Flex Item Properties (applied to :host)
            'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',
            // Flex Container Properties (applied to .col-container)
            'justify-content', 'align-items', 'gap', 'wrap'
        ];
    }
    
    /**
     * React to attribute changes and apply corresponding styles
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            // Flex Item Properties (applied to :host)
            case 'flex-grow':
                this.style.flexGrow = newValue || '';
                break;
                
            case 'flex-shrink':
                this.style.flexShrink = newValue || '';
                break;
                
            case 'flex-basis':
                this.style.flexBasis = newValue || '';
                break;
                
            case 'align-self':
                this.style.alignSelf = newValue || '';
                break;
                
            case 'order':
                this.style.order = newValue || '';
                break;
                
            // Flex Container Properties (applied to .col-container)
            case 'justify-content':
                this.colContainer.style.justifyContent = newValue || '';
                break;
                
            case 'align-items':
                this.colContainer.style.alignItems = newValue || '';
                break;
                
            case 'gap':
                this.colContainer.style.gap = newValue || '';
                break;
                
            case 'wrap':
                // Boolean attribute - check if present
                if (this.hasAttribute('wrap')) {
                    this.colContainer.style.flexWrap = 'wrap';
                } else {
                    this.colContainer.style.flexWrap = 'nowrap';
                }
                break;
        }
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial styles based on current attributes
     */
    connectedCallback() {
        // Apply initial styles for all observed attributes
        this.attributeChangedCallback('flex-grow', null, this.getAttribute('flex-grow'));
        this.attributeChangedCallback('flex-shrink', null, this.getAttribute('flex-shrink'));
        this.attributeChangedCallback('flex-basis', null, this.getAttribute('flex-basis'));
        this.attributeChangedCallback('align-self', null, this.getAttribute('align-self'));
        this.attributeChangedCallback('order', null, this.getAttribute('order'));
        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));
        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));
        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));
        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));
    }
}

// Register the custom element
customElements.define('ds-col', DsCol); 

/***/ }),

/***/ "./src/components/ds-page.js":
/*!***********************************!*\
  !*** ./src/components/ds-page.js ***!
  \***********************************/
/***/ (() => {

/**
 * ds-page - A consistent wrapper around application content, handling page-level layout and margins
 * No specific observable attributes beyond standard HTML attributes
 */
class DsPage extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block; /* Custom elements are inline by default */
                    width: 100%;
                    min-height: 100vh; /* Ensures it takes full viewport height */
                    box-sizing: border-box; /* Include padding/border in element's total width/height */
                }
                
                .page-container {
                    display: flex; /* Makes the main element a flex container for its children */
                    flex-direction: column; /* Stacks children vertically by default */
                    width: 100%;
                    padding: var(--ds-spacing-page-padding, 20px); /* Default padding, can be overridden by CSS variable */
                    margin: 0 auto; /* Center content if width is limited */
                    max-width: var(--ds-page-max-width, 1200px); /* Optional max-width for content */
                }
            </style>
            <main class="page-container">
                <slot></slot>
            </main>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal container
        this.pageContainer = shadowRoot.querySelector('.page-container');
    }
    
    /**
     * No specific observable attributes for ds-page
     * It's designed to be a simple, opinionated page wrapper
     */
    static get observedAttributes() {
        return []; // No specific attributes to observe
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply any initial setup if needed
     */
    connectedCallback() {
        // No specific initialization needed for ds-page
        // It's designed to be a simple wrapper
    }
}

// Register the custom element
customElements.define('ds-page', DsPage); 

/***/ }),

/***/ "./src/components/ds-row.js":
/*!**********************************!*\
  !*** ./src/components/ds-row.js ***!
  \**********************************/
/***/ (() => {

/**
 * ds-row - A Flexbox container for horizontal layouts
 * Observable attributes: justify-content, align-items, gap, wrap
 */
class DsRow extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block; /* Custom elements are inline by default */
                }
                
                .row-container {
                    display: flex;
                    flex-direction: row;
                    /* Default flex-wrap will be controlled by attribute */
                }
            </style>
            <div class="row-container">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal container for attribute changes
        this.rowContainer = shadowRoot.querySelector('.row-container');
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['justify-content', 'align-items', 'gap', 'wrap'];
    }
    
    /**
     * React to attribute changes and apply corresponding styles
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'justify-content':
                this.rowContainer.style.justifyContent = newValue || '';
                break;
                
            case 'align-items':
                this.rowContainer.style.alignItems = newValue || '';
                break;
                
            case 'gap':
                this.rowContainer.style.gap = newValue || '';
                break;
                
            case 'wrap':
                // Boolean attribute - check if present
                if (this.hasAttribute('wrap')) {
                    this.rowContainer.style.flexWrap = 'wrap';
                } else {
                    this.rowContainer.style.flexWrap = 'nowrap';
                }
                break;
        }
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial styles based on current attributes
     */
    connectedCallback() {
        // Apply initial styles for all observed attributes
        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));
        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));
        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));
        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));
    }
}

// Register the custom element
customElements.define('ds-row', DsRow); 

/***/ }),

/***/ "./src/stories/ds-page.stories.js":
/*!****************************************!*\
  !*** ./src/stories/ds-page.stories.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ComplexLayout: () => (/* binding */ ComplexLayout),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   FormLayout: () => (/* binding */ FormLayout),
/* harmony export */   SimpleContent: () => (/* binding */ SimpleContent),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_page_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-page.js */ "./src/components/ds-page.js");
/* harmony import */ var _components_ds_page_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_page_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_ds_row_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/ds-row.js */ "./src/components/ds-row.js");
/* harmony import */ var _components_ds_row_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_ds_row_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_ds_col_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/ds-col.js */ "./src/components/ds-col.js");
/* harmony import */ var _components_ds_col_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_components_ds_col_js__WEBPACK_IMPORTED_MODULE_2__);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-page',
  component: 'ds-page',
  parameters: {
    docs: {
      description: {
        component: 'A consistent wrapper around application content, handling page-level layout and margins.'
      }
    }
  }
});

const Default = () => {
  const element = document.createElement('ds-page');
  element.innerHTML = `
    <header style="background: var(--ds-color-primary); color: white; padding: 16px; text-align: center;">
      <h1>My Application</h1>
    </header>
    
    <ds-row justify-content="space-between" align-items="flex-start" gap="24px" style="margin: 24px 0;">
      <ds-col flex-grow="1" style="background: white; padding: 16px; border-radius: 8px;">
        <h2>Main Content Area</h2>
        <p>This is the main content area that grows to fill available space.</p>
        <p>It can contain any content and will expand to fill the remaining space.</p>
      </ds-col>
      
      <ds-col flex-basis="250px" style="background: white; padding: 16px; border-radius: 8px;">
        <h3>Sidebar</h3>
        <p>This sidebar has a fixed width of 250px.</p>
        <ul>
          <li>Navigation item 1</li>
          <li>Navigation item 2</li>
          <li>Navigation item 3</li>
        </ul>
      </ds-col>
    </ds-row>
    
    <footer style="background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;">
      <p>&copy; 2025 My Application</p>
    </footer>
  `;
  return element;
};

const ComplexLayout = () => {
  const element = document.createElement('ds-page');
  element.innerHTML = `
    <header style="background: var(--ds-color-primary); color: white; padding: 16px;">
      <ds-row justify-content="space-between" align-items="center">
        <h1>Complex Layout Example</h1>
        <nav>
          <ds-row gap="16px">
            <a href="#" style="color: white; text-decoration: none;">Home</a>
            <a href="#" style="color: white; text-decoration: none;">About</a>
            <a href="#" style="color: white; text-decoration: none;">Contact</a>
          </ds-row>
        </nav>
      </ds-row>
    </header>
    
    <ds-row gap="24px" style="margin: 24px 0;">
      <ds-col flex-grow="1">
        <ds-row gap="16px" wrap>
          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">
            <h3>Card 1</h3>
            <p>This card demonstrates responsive behavior.</p>
          </ds-col>
          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">
            <h3>Card 2</h3>
            <p>Cards will wrap to new lines on smaller screens.</p>
          </ds-col>
          <ds-col flex-basis="300px" style="background: white; padding: 16px; border-radius: 8px;">
            <h3>Card 3</h3>
            <p>Each card maintains its minimum width.</p>
          </ds-col>
        </ds-row>
      </ds-col>
    </ds-row>
    
    <footer style="background: var(--ds-color-secondary); color: white; padding: 16px; text-align: center;">
      <p>&copy; 2025 Complex Layout Example</p>
    </footer>
  `;
  return element;
};

const SimpleContent = () => {
  const element = document.createElement('ds-page');
  element.innerHTML = `
    <ds-row justify-content="center" align-items="center" style="min-height: 60vh;">
      <ds-col style="text-align: center; max-width: 600px;">
        <h1>Welcome to the Design System</h1>
        <p style="font-size: 1.2em; margin: 24px 0;">
          This is a simple example showing how ds-page can be used to create clean, centered content layouts.
        </p>
        <ds-row justify-content="center" gap="16px">
          <button style="background: var(--ds-color-primary); color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer;">
            Get Started
          </button>
          <button style="background: var(--ds-color-secondary); color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: pointer;">
            Learn More
          </button>
        </ds-row>
      </ds-col>
    </ds-row>
  `;
  return element;
};

const FormLayout = () => {
  const element = document.createElement('ds-page');
  element.innerHTML = `
    <ds-row justify-content="center" style="margin: 24px 0;">
      <ds-col flex-basis="500px" style="background: white; padding: 32px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        <h2 style="text-align: center; margin-bottom: 24px;">Contact Form</h2>
        
        <ds-col gap="16px">
          <div>
            <label style="display: block; margin-bottom: 4px; font-weight: bold;">Name</label>
            <input type="text" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box;">
          </div>
          
          <div>
            <label style="display: block; margin-bottom: 4px; font-weight: bold;">Email</label>
            <input type="email" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box;">
          </div>
          
          <div>
            <label style="display: block; margin-bottom: 4px; font-weight: bold;">Message</label>
            <textarea rows="4" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; resize: vertical;"></textarea>
          </div>
          
          <ds-row justify-content="center" style="margin-top: 24px;">
            <button style="background: var(--ds-color-primary); color: white; border: none; padding: 12px 32px; border-radius: 4px; cursor: pointer; font-size: 16px;">
              Send Message
            </button>
          </ds-row>
        </ds-col>
      </ds-col>
    </ds-row>
  `;
  return element;
}; ;const __namedExportsOrder = ["Default","ComplexLayout","SimpleContent","FormLayout"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-page-stories.iframe.bundle.js.map