self["webpackHotUpdateai_design_system"]("stories-ds-label-stories",{

/***/ "./src/components/ds-label.js":
/*!************************************!*\
  !*** ./src/components/ds-label.js ***!
  \************************************/
/***/ (() => {

/**
 * ds-label - A label component that wraps native label elements
 * Supports for/id association patterns
 */
class DsLabel extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <label part="label">
                    <slot></slot>
                </label>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal label for attribute changes
        this.label = shadowRoot.querySelector('label');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['for'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal label
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'for':
                this.label.setAttribute('for', newValue || '');
                break;
        }
    }
    
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Labels don't typically have interactive events, but we can listen for clicks
        this.label.addEventListener('click', (event) => {
            const newEvent = new Event('click', {
                bubbles: true,
                composed: true,
                cancelable: true
            });
            this.dispatchEvent(newEvent);
        });
    }
    
    /**
     * Property getters and setters to mirror the internal label
     */
    get htmlFor() {
        return this.label.htmlFor;
    }
    
    set htmlFor(val) {
        this.label.htmlFor = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('for', null, this.getAttribute('for'));
    }
}

// Register the custom element
customElements.define('ds-label', DsLabel); 

/***/ }),

/***/ "./src/stories/ds-label.stories.js":
/*!*****************************************!*\
  !*** ./src/stories/ds-label.stories.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   LongText: () => (/* binding */ LongText),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   WithFor: () => (/* binding */ WithFor),
/* harmony export */   WithInput: () => (/* binding */ WithInput),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_label_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-label.js */ "./src/components/ds-label.js");
/* harmony import */ var _components_ds_label_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_label_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-label',
  component: 'ds-label',
  parameters: {
    docs: {
      description: {
        component: 'A label component that wraps native label elements with support for form control association.'
      }
    }
  },
  argTypes: {
    for: {
      control: 'text',
      description: 'The ID of the form control this label is associated with'
    },
    content: {
      control: 'text',
      description: 'The text content of the label'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-label');
  
  // Set attributes
  if (args.for) {
    element.setAttribute('for', args.for);
  }
  
  // Set content
  element.innerHTML = args.content || 'Label';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  content: 'Username'
};

const WithFor = Template.bind({});
WithFor.args = {
  for: 'username-input',
  content: 'Username'
};

const Required = Template.bind({});
Required.args = {
  content: 'Email Address *'
};

const LongText = Template.bind({});
LongText.args = {
  content: 'This is a very long label that demonstrates how the component handles text wrapping and overflow'
};

// Label with Input Example
const WithInput = () => {
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  
  const label = document.createElement('ds-label');
  label.setAttribute('for', 'example-input');
  label.innerHTML = 'Example Input:';
  
  const input = document.createElement('input');
  input.setAttribute('type', 'text');
  input.setAttribute('id', 'example-input');
  input.setAttribute('placeholder', 'Enter text here...');
  
  container.appendChild(label);
  container.appendChild(input);
  
  return container;
}; ;const __namedExportsOrder = ["Default","WithFor","Required","LongText","WithInput"];

/***/ })

});
//# sourceMappingURL=stories-ds-label-stories.905077247a172715fba6.hot-update.js.map