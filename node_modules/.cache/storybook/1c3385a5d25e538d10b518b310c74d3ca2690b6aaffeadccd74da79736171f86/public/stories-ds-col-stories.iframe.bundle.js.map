{"version":3,"file":"stories-ds-col-stories.iframe.bundle.js","mappingssources":["webpack://ai-design-system/./src/components/ds-col.js","webpack://ai-design-system/./src/stories/ds-col.stories.js"],"sourcesContent":["/**\n * ds-col - A Flexbox item that can also act as a Flexbox container for vertical layouts\n * Observable attributes: flex-grow, flex-shrink, flex-basis, align-self, order (flex item properties)\n *                      justify-content, align-items, gap, wrap (flex container properties)\n */\nclass DsCol extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                    /* Flex item properties will be applied by ds-row parent's context */\n                }\n                \n                .col-container {\n                    display: flex; /* Make it a flex container for its own children */\n                    flex-direction: column;\n                    /* Default flex-wrap for its own children */\n                }\n            </style>\n            <div class=\"col-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal container for attribute changes\n        this.colContainer = shadowRoot.querySelector('.col-container');\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return [\n            // Flex Item Properties (applied to :host)\n            'flex-grow', 'flex-shrink', 'flex-basis', 'align-self', 'order',\n            // Flex Container Properties (applied to .col-container)\n            'justify-content', 'align-items', 'gap', 'wrap'\n        ];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding styles\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            // Flex Item Properties (applied to :host)\n            case 'flex-grow':\n                this.style.flexGrow = newValue || '';\n                break;\n                \n            case 'flex-shrink':\n                this.style.flexShrink = newValue || '';\n                break;\n                \n            case 'flex-basis':\n                this.style.flexBasis = newValue || '';\n                break;\n                \n            case 'align-self':\n                this.style.alignSelf = newValue || '';\n                break;\n                \n            case 'order':\n                this.style.order = newValue || '';\n                break;\n                \n            // Flex Container Properties (applied to .col-container)\n            case 'justify-content':\n                this.colContainer.style.justifyContent = newValue || '';\n                break;\n                \n            case 'align-items':\n                this.colContainer.style.alignItems = newValue || '';\n                break;\n                \n            case 'gap':\n                this.colContainer.style.gap = newValue || '';\n                break;\n                \n            case 'wrap':\n                // Boolean attribute - check if present\n                if (this.hasAttribute('wrap')) {\n                    this.colContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.colContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial styles based on current attributes\n     */\n    connectedCallback() {\n        // Apply initial styles for all observed attributes\n        this.attributeChangedCallback('flex-grow', null, this.getAttribute('flex-grow'));\n        this.attributeChangedCallback('flex-shrink', null, this.getAttribute('flex-shrink'));\n        this.attributeChangedCallback('flex-basis', null, this.getAttribute('flex-basis'));\n        this.attributeChangedCallback('align-self', null, this.getAttribute('align-self'));\n        this.attributeChangedCallback('order', null, this.getAttribute('order'));\n        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));\n        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));\n        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));\n        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-col', DsCol); ","import '../components/ds-col.js';\n\nexport default {\n  title: 'Components/ds-col',\n  component: 'ds-col',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A Flexbox item that can also act as a Flexbox container for vertical layouts.'\n      }\n    }\n  },\n  argTypes: {\n    // Flex Item Properties\n    'flex-grow': {\n      control: 'number',\n      description: 'How much the item can grow relative to other flex items'\n    },\n    'flex-shrink': {\n      control: 'number',\n      description: 'How much the item can shrink relative to other flex items'\n    },\n    'flex-basis': {\n      control: 'text',\n      description: 'Initial size of the flex item'\n    },\n    'align-self': {\n      control: 'select',\n      options: ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'],\n      description: 'Alignment of this item within its flex container'\n    },\n    'order': {\n      control: 'number',\n      description: 'Order of this item within its flex container'\n    },\n    // Flex Container Properties\n    'justify-content': {\n      control: 'select',\n      options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],\n      description: 'Controls vertical alignment of flex items within this column'\n    },\n    'align-items': {\n      control: 'select',\n      options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],\n      description: 'Controls horizontal alignment of flex items within this column'\n    },\n    'gap': {\n      control: 'text',\n      description: 'Spacing between flex items within this column'\n    },\n    'wrap': {\n      control: 'boolean',\n      description: 'Whether flex items within this column should wrap'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const container = document.createElement('div');\n  container.style.cssText = 'display: flex; height: 200px; background: #f0f0f0; padding: 16px;';\n  \n  const element = document.createElement('ds-col');\n  \n  // Set flex item properties\n  if (args['flex-grow'] !== undefined) {\n    element.setAttribute('flex-grow', args['flex-grow']);\n  }\n  if (args['flex-shrink'] !== undefined) {\n    element.setAttribute('flex-shrink', args['flex-shrink']);\n  }\n  if (args['flex-basis']) {\n    element.setAttribute('flex-basis', args['flex-basis']);\n  }\n  if (args['align-self']) {\n    element.setAttribute('align-self', args['align-self']);\n  }\n  if (args.order !== undefined) {\n    element.setAttribute('order', args.order);\n  }\n  \n  // Set flex container properties\n  if (args['justify-content']) {\n    element.setAttribute('justify-content', args['justify-content']);\n  }\n  if (args['align-items']) {\n    element.setAttribute('align-items', args['align-items']);\n  }\n  if (args.gap) {\n    element.setAttribute('gap', args.gap);\n  }\n  if (args.wrap) {\n    element.setAttribute('wrap', '');\n  }\n  \n  element.style.cssText = 'background: white; padding: 16px; border-radius: 8px;';\n  element.innerHTML = `\n    <div style=\"background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;\">Content 1</div>\n    <div style=\"background: var(--ds-color-secondary); color: white; padding: 8px; border-radius: 4px;\">Content 2</div>\n    <div style=\"background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;\">Content 3</div>\n  `;\n  \n  container.appendChild(element);\n  return container;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  'flex-grow': 1,\n  'flex-shrink': 1,\n  'flex-basis': 'auto',\n  'align-self': 'stretch',\n  'order': 0,\n  'justify-content': 'flex-start',\n  'align-items': 'stretch',\n  'gap': '8px',\n  'wrap': false\n};\n\nexport const GrowingColumn = Template.bind({});\nGrowingColumn.args = {\n  'flex-grow': 2,\n  'flex-shrink': 1,\n  'flex-basis': 'auto',\n  'align-self': 'stretch',\n  'order': 0,\n  'justify-content': 'space-around',\n  'align-items': 'center',\n  'gap': '16px',\n  'wrap': false\n};\n\nexport const FixedWidth = Template.bind({});\nFixedWidth.args = {\n  'flex-grow': 0,\n  'flex-shrink': 0,\n  'flex-basis': '200px',\n  'align-self': 'flex-start',\n  'order': 0,\n  'justify-content': 'center',\n  'align-items': 'center',\n  'gap': '12px',\n  'wrap': false\n};\n\nexport const CenteredContent = Template.bind({});\nCenteredContent.args = {\n  'flex-grow': 1,\n  'flex-shrink': 1,\n  'flex-basis': 'auto',\n  'align-self': 'center',\n  'order': 0,\n  'justify-content': 'center',\n  'align-items': 'center',\n  'gap': '20px',\n  'wrap': false\n};\n\nexport const Reordered = Template.bind({});\nReordered.args = {\n  'flex-grow': 1,\n  'flex-shrink': 1,\n  'flex-basis': 'auto',\n  'align-self': 'stretch',\n  'order': 2,\n  'justify-content': 'space-between',\n  'align-items': 'stretch',\n  'gap': '8px',\n  'wrap': false\n}; ;export const __namedExportsOrder = [\"Default\",\"GrowingColumn\",\"FixedWidth\",\"CenteredContent\",\"Reordered\"];"],"names":[],"sourceRoot":""}