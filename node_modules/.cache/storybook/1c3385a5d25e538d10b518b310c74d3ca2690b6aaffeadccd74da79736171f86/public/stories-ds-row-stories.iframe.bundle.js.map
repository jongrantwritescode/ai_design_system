{"version":3,"file":"stories-ds-row-stories.iframe.bundle.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ai-design-system/./src/components/ds-row.js","webpack://ai-design-system/./src/stories/ds-row.stories.js"],"sourcesContent":["/**\n * ds-row - A Flexbox container for horizontal layouts\n * Observable attributes: justify-content, align-items, gap, wrap\n */\nclass DsRow extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block; /* Custom elements are inline by default */\n                }\n                \n                .row-container {\n                    display: flex;\n                    flex-direction: row;\n                    /* Default flex-wrap will be controlled by attribute */\n                }\n            </style>\n            <div class=\"row-container\">\n                <slot></slot>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal container for attribute changes\n        this.rowContainer = shadowRoot.querySelector('.row-container');\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['justify-content', 'align-items', 'gap', 'wrap'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding styles\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'justify-content':\n                this.rowContainer.style.justifyContent = newValue || '';\n                break;\n                \n            case 'align-items':\n                this.rowContainer.style.alignItems = newValue || '';\n                break;\n                \n            case 'gap':\n                this.rowContainer.style.gap = newValue || '';\n                break;\n                \n            case 'wrap':\n                // Boolean attribute - check if present\n                if (this.hasAttribute('wrap')) {\n                    this.rowContainer.style.flexWrap = 'wrap';\n                } else {\n                    this.rowContainer.style.flexWrap = 'nowrap';\n                }\n                break;\n        }\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial styles based on current attributes\n     */\n    connectedCallback() {\n        // Apply initial styles for all observed attributes\n        this.attributeChangedCallback('justify-content', null, this.getAttribute('justify-content'));\n        this.attributeChangedCallback('align-items', null, this.getAttribute('align-items'));\n        this.attributeChangedCallback('gap', null, this.getAttribute('gap'));\n        this.attributeChangedCallback('wrap', null, this.getAttribute('wrap'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-row', DsRow); ","import '../components/ds-row.js';\n\nexport default {\n  title: 'Components/ds-row',\n  component: 'ds-row',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A Flexbox container for horizontal layouts with configurable alignment, spacing, and wrapping.'\n      }\n    }\n  },\n  argTypes: {\n    'justify-content': {\n      control: 'select',\n      options: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'],\n      description: 'Controls horizontal alignment of flex items'\n    },\n    'align-items': {\n      control: 'select',\n      options: ['flex-start', 'flex-end', 'center', 'baseline', 'stretch'],\n      description: 'Controls vertical alignment of flex items'\n    },\n    'gap': {\n      control: 'text',\n      description: 'Spacing between flex items'\n    },\n    'wrap': {\n      control: 'boolean',\n      description: 'Whether flex items should wrap to new lines'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-row');\n  \n  if (args['justify-content']) {\n    element.setAttribute('justify-content', args['justify-content']);\n  }\n  if (args['align-items']) {\n    element.setAttribute('align-items', args['align-items']);\n  }\n  if (args.gap) {\n    element.setAttribute('gap', args.gap);\n  }\n  if (args.wrap) {\n    element.setAttribute('wrap', '');\n  }\n  \n  element.innerHTML = `\n    <div style=\"background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;\">Item 1</div>\n    <div style=\"background: var(--ds-color-secondary); color: white; padding: 8px; border-radius: 4px;\">Item 2</div>\n    <div style=\"background: var(--ds-color-primary); color: white; padding: 8px; border-radius: 4px;\">Item 3</div>\n  `;\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  'justify-content': 'flex-start',\n  'align-items': 'stretch',\n  gap: '16px',\n  wrap: false\n};\n\nexport const Centered = Template.bind({});\nCentered.args = {\n  'justify-content': 'center',\n  'align-items': 'center',\n  gap: '24px',\n  wrap: false\n};\n\nexport const SpaceBetween = Template.bind({});\nSpaceBetween.args = {\n  'justify-content': 'space-between',\n  'align-items': 'center',\n  gap: '16px',\n  wrap: false\n};\n\nexport const Wrapped = Template.bind({});\nWrapped.args = {\n  'justify-content': 'flex-start',\n  'align-items': 'flex-start',\n  gap: '12px',\n  wrap: true\n};\n\n// Additional examples\nexport const AlignEnd = Template.bind({});\nAlignEnd.args = {\n  'justify-content': 'flex-end',\n  'align-items': 'flex-end',\n  gap: '16px',\n  wrap: false\n};\n\nexport const SpaceAround = Template.bind({});\nSpaceAround.args = {\n  'justify-content': 'space-around',\n  'align-items': 'center',\n  gap: '20px',\n  wrap: false\n}; ;export const __namedExportsOrder = [\"Default\",\"Centered\",\"SpaceBetween\",\"Wrapped\",\"AlignEnd\",\"SpaceAround\"];"],"names":[],"sourceRoot":""}