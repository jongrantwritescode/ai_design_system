self["webpackHotUpdateai_design_system"]("stories-ds-radio-stories",{

/***/ "./src/components/ds-radio.js":
/*!************************************!*\
  !*** ./src/components/ds-radio.js ***!
  \************************************/
/***/ (() => {

/**
 * ds-radio - A radio button component that wraps native radio input elements
 */
class DsRadio extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: inline-block;
                }
                
                .wrapper {
                    display: flex;
                    align-items: center;
                }
            </style>
            <div class="wrapper">
                <input type="radio" id="radio" part="radio">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal radio for attribute changes
        this.radio = shadowRoot.querySelector('input[type="radio"]');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal radio
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'name':
                this.radio.name = newValue || '';
                break;
                
            case 'value':
                this.radio.value = newValue || '';
                break;
                
            case 'checked':
                if (this.hasAttribute('checked')) {
                    this.radio.checked = true;
                } else {
                    this.radio.checked = false;
                }
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.radio.disabled = true;
                } else {
                    this.radio.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.radio.readOnly = true;
                } else {
                    this.radio.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.radio.required = true;
                } else {
                    this.radio.required = false;
                }
                break;
                
            case 'id':
                this.radio.id = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.radio.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal radio
     */
    get checked() {
        return this.radio.checked;
    }
    
    set checked(val) {
        this.radio.checked = val;
    }
    
    get value() {
        return this.radio.value;
    }
    
    set value(val) {
        this.radio.value = val;
    }
    
    get name() {
        return this.radio.name;
    }
    
    set name(val) {
        this.radio.name = val;
    }
    
    get disabled() {
        return this.radio.disabled;
    }
    
    set disabled(val) {
        this.radio.disabled = val;
    }
    
    get readonly() {
        return this.radio.readOnly;
    }
    
    set readonly(val) {
        this.radio.readOnly = val;
    }
    
    get required() {
        return this.radio.required;
    }
    
    set required(val) {
        this.radio.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('checked', null, this.getAttribute('checked'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
    }
}

// Register the custom element
customElements.define('ds-radio', DsRadio); 

/***/ }),

/***/ "./src/stories/ds-radio.stories.js":
/*!*****************************************!*\
  !*** ./src/stories/ds-radio.stories.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Checked: () => (/* binding */ Checked),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   RadioGroup: () => (/* binding */ RadioGroup),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_radio_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-radio.js */ "./src/components/ds-radio.js");
/* harmony import */ var _components_ds_radio_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_radio_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-radio',
  component: 'ds-radio',
  parameters: {
    docs: {
      description: {
        component: 'A radio button component that wraps native radio input elements with support for radio groups.'
      }
    }
  },
  argTypes: {
    name: {
      control: 'text',
      description: 'The name attribute for radio group association'
    },
    value: {
      control: 'text',
      description: 'The value of the radio button'
    },
    checked: {
      control: 'boolean',
      description: 'Whether the radio button is checked'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the radio button is disabled'
    },
    readonly: {
      control: 'boolean',
      description: 'Whether the radio button is read-only'
    },
    required: {
      control: 'boolean',
      description: 'Whether the radio button is required'
    },
    id: {
      control: 'text',
      description: 'The unique identifier for the radio button'
    },
    content: {
      control: 'text',
      description: 'The label text for the radio button'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-radio');
  
  // Set attributes
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.checked) {
    element.setAttribute('checked', '');
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.readonly) {
    element.setAttribute('readonly', '');
  }
  if (args.required) {
    element.setAttribute('required', '');
  }
  if (args.id) {
    element.setAttribute('id', args.id);
  }
  
  // Set content
  element.innerHTML = args.content || 'Radio Option';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  name: 'radio-group',
  value: 'option1',
  content: 'Option 1'
};

const Checked = Template.bind({});
Checked.args = {
  name: 'radio-group',
  value: 'option2',
  checked: true,
  content: 'Option 2 (Checked)'
};

const Disabled = Template.bind({});
Disabled.args = {
  name: 'radio-group',
  value: 'option3',
  disabled: true,
  content: 'Option 3 (Disabled)'
};

const Required = Template.bind({});
Required.args = {
  name: 'radio-group',
  value: 'option4',
  required: true,
  content: 'Option 4 (Required)'
};

// Radio Group Example
const RadioGroup = () => {
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  
  const radio1 = document.createElement('ds-radio');
  radio1.setAttribute('name', 'preferences');
  radio1.setAttribute('value', 'light');
  radio1.innerHTML = 'Light Theme';
  
  const radio2 = document.createElement('ds-radio');
  radio2.setAttribute('name', 'preferences');
  radio2.setAttribute('value', 'dark');
  radio2.setAttribute('checked', '');
  radio2.innerHTML = 'Dark Theme';
  
  const radio3 = document.createElement('ds-radio');
  radio3.setAttribute('name', 'preferences');
  radio3.setAttribute('value', 'auto');
  radio3.innerHTML = 'Auto (System)';
  
  container.appendChild(radio1);
  container.appendChild(radio2);
  container.appendChild(radio3);
  
  return container;
}; ;const __namedExportsOrder = ["Default","Checked","Disabled","Required","RadioGroup"];

/***/ })

});
//# sourceMappingURL=stories-ds-radio-stories.eef3f982f5fca1e9041f.hot-update.js.map