{"version":3,"file":"stories-ds-label-stories.iframe.bundle.js","mappingsnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ai-design-system/./src/components/ds-label.js","webpack://ai-design-system/./src/stories/ds-label.stories.js"],"sourcesContent":["/**\n * ds-label - A label component that wraps native label elements\n * Supports for/id association patterns\n */\nclass DsLabel extends HTMLElement {\n    constructor() {\n        super();\n        \n        // Attach shadow root with open mode for experimentation\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        \n        // Define the template with internal markup and styles\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <style>\n                @import url('/src/design_system/styles.css');\n                \n                :host {\n                    display: block;\n                }\n                \n                .wrapper {\n                    width: 100%;\n                }\n            </style>\n            <div class=\"wrapper\">\n                <label part=\"label\">\n                    <slot></slot>\n                </label>\n            </div>\n        `;\n        \n        // Append the template's content to the shadow root\n        shadowRoot.appendChild(template.content.cloneNode(true));\n        \n        // Store reference to the internal label for attribute changes\n        this.label = shadowRoot.querySelector('label');\n        \n        // Set up event listeners\n        this.setupEventListeners();\n    }\n    \n    /**\n     * Define which attributes should trigger attributeChangedCallback\n     */\n    static get observedAttributes() {\n        return ['for'];\n    }\n    \n    /**\n     * React to attribute changes and apply corresponding properties to the internal label\n     */\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return; // No change\n        \n        switch (name) {\n            case 'for':\n                this.label.setAttribute('for', newValue || '');\n                break;\n        }\n    }\n    \n    /**\n     * Set up event listeners\n     */\n    setupEventListeners() {\n        // Labels don't typically have interactive events, but we can listen for clicks\n        this.label.addEventListener('click', (event) => {\n            const newEvent = new Event('click', {\n                bubbles: true,\n                composed: true,\n                cancelable: true\n            });\n            this.dispatchEvent(newEvent);\n        });\n    }\n    \n    /**\n     * Property getters and setters to mirror the internal label\n     */\n    get htmlFor() {\n        return this.label.htmlFor;\n    }\n    \n    set htmlFor(val) {\n        this.label.htmlFor = val;\n    }\n    \n    /**\n     * Called when the element is connected to the DOM\n     * Apply initial attributes\n     */\n    connectedCallback() {\n        // Apply initial attributes\n        this.attributeChangedCallback('for', null, this.getAttribute('for'));\n    }\n}\n\n// Register the custom element\ncustomElements.define('ds-label', DsLabel); ","import '../components/ds-label.js';\n\nexport default {\n  title: 'Components/ds-label',\n  component: 'ds-label',\n  parameters: {\n    docs: {\n      description: {\n        component: 'A label component that wraps native label elements with support for form control association.'\n      }\n    }\n  },\n  argTypes: {\n    for: {\n      control: 'text',\n      description: 'The ID of the form control this label is associated with'\n    },\n    content: {\n      control: 'text',\n      description: 'The text content of the label'\n    }\n  }\n};\n\nconst Template = (args) => {\n  const element = document.createElement('ds-label');\n  \n  // Set attributes\n  if (args.for) {\n    element.setAttribute('for', args.for);\n  }\n  \n  // Set content\n  element.innerHTML = args.content || 'Label';\n  \n  return element;\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  content: 'Username'\n};\n\nexport const WithFor = Template.bind({});\nWithFor.args = {\n  for: 'username-input',\n  content: 'Username'\n};\n\nexport const Required = Template.bind({});\nRequired.args = {\n  content: 'Email Address *'\n};\n\nexport const LongText = Template.bind({});\nLongText.args = {\n  content: 'This is a very long label that demonstrates how the component handles text wrapping and overflow'\n};\n\n// Label with Input Example\nexport const WithInput = () => {\n  const container = document.createElement('div');\n  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';\n  \n  const label = document.createElement('ds-label');\n  label.setAttribute('for', 'example-input');\n  label.innerHTML = 'Example Input:';\n  \n  const input = document.createElement('input');\n  input.setAttribute('type', 'text');\n  input.setAttribute('id', 'example-input');\n  input.setAttribute('placeholder', 'Enter text here...');\n  \n  container.appendChild(label);\n  container.appendChild(input);\n  \n  return container;\n}; ;export const __namedExportsOrder = [\"Default\",\"WithFor\",\"Required\",\"LongText\",\"WithInput\"];"],"names":[],"sourceRoot":""}