self["webpackHotUpdateai_design_system"]("stories-ds-fieldset-stories",{

/***/ "./src/components/ds-checkbox.js":
/*!***************************************!*\
  !*** ./src/components/ds-checkbox.js ***!
  \***************************************/
/***/ (() => {

/**
 * ds-checkbox - A checkbox component that wraps native checkbox input elements
 */
class DsCheckbox extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: inline-block;
                }
                
                .wrapper {
                    display: flex;
                    align-items: center;
                }
            </style>
            <div class="wrapper">
                <input type="checkbox" id="checkbox" part="checkbox">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal checkbox for attribute changes
        this.checkbox = shadowRoot.querySelector('input[type="checkbox"]');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal checkbox
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'name':
                this.checkbox.name = newValue || '';
                break;
                
            case 'value':
                this.checkbox.value = newValue || '';
                break;
                
            case 'checked':
                if (this.hasAttribute('checked')) {
                    this.checkbox.checked = true;
                } else {
                    this.checkbox.checked = false;
                }
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.checkbox.disabled = true;
                } else {
                    this.checkbox.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.checkbox.readOnly = true;
                } else {
                    this.checkbox.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.checkbox.required = true;
                } else {
                    this.checkbox.required = false;
                }
                break;
                
            case 'id':
                this.checkbox.id = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.checkbox.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal checkbox
     */
    get checked() {
        return this.checkbox.checked;
    }
    
    set checked(val) {
        this.checkbox.checked = val;
    }
    
    get value() {
        return this.checkbox.value;
    }
    
    set value(val) {
        this.checkbox.value = val;
    }
    
    get name() {
        return this.checkbox.name;
    }
    
    set name(val) {
        this.checkbox.name = val;
    }
    
    get disabled() {
        return this.checkbox.disabled;
    }
    
    set disabled(val) {
        this.checkbox.disabled = val;
    }
    
    get readonly() {
        return this.checkbox.readOnly;
    }
    
    set readonly(val) {
        this.checkbox.readOnly = val;
    }
    
    get required() {
        return this.checkbox.required;
    }
    
    set required(val) {
        this.checkbox.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('checked', null, this.getAttribute('checked'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
    }
}

// Register the custom element
customElements.define('ds-checkbox', DsCheckbox); 

/***/ }),

/***/ "./src/components/ds-fieldset.js":
/*!***************************************!*\
  !*** ./src/components/ds-fieldset.js ***!
  \***************************************/
/***/ (() => {

/**
 * ds-fieldset - A fieldset component that wraps native fieldset elements
 * Used for grouping form elements
 */
class DsFieldset extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <fieldset part="fieldset">
                    <slot></slot>
                </fieldset>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal fieldset for attribute changes
        this.fieldset = shadowRoot.querySelector('fieldset');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return []; // No specific attributes for fieldset
    }
    
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Fieldsets don't typically have interactive events
        // But we can listen for form-related events if needed
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply any initial setup if needed
     */
    connectedCallback() {
        // No specific initialization needed for fieldset
        // It's designed to be a simple wrapper
    }
}

// Register the custom element
customElements.define('ds-fieldset', DsFieldset); 

/***/ }),

/***/ "./src/components/ds-legend.js":
/*!*************************************!*\
  !*** ./src/components/ds-legend.js ***!
  \*************************************/
/***/ (() => {

/**
 * ds-legend - A legend component that wraps native legend elements
 * Used within ds-fieldset components
 */
class DsLegend extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <legend part="legend">
                    <slot></slot>
                </legend>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal legend for attribute changes
        this.legend = shadowRoot.querySelector('legend');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return []; // No specific attributes for legend
    }
    
    /**
     * Set up event listeners
     */
    setupEventListeners() {
        // Legends don't typically have interactive events
        // But we can listen for form-related events if needed
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply any initial setup if needed
     */
    connectedCallback() {
        // No specific initialization needed for legend
        // It's designed to be a simple wrapper
    }
}

// Register the custom element
customElements.define('ds-legend', DsLegend); 

/***/ }),

/***/ "./src/components/ds-radio.js":
/*!************************************!*\
  !*** ./src/components/ds-radio.js ***!
  \************************************/
/***/ (() => {

/**
 * ds-radio - A radio button component that wraps native radio input elements
 */
class DsRadio extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: inline-block;
                }
                
                .wrapper {
                    display: flex;
                    align-items: center;
                }
            </style>
            <div class="wrapper">
                <input type="radio" id="radio" part="radio">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal radio for attribute changes
        this.radio = shadowRoot.querySelector('input[type="radio"]');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['name', 'value', 'checked', 'disabled', 'readonly', 'required', 'id'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal radio
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'name':
                this.radio.name = newValue || '';
                break;
                
            case 'value':
                this.radio.value = newValue || '';
                break;
                
            case 'checked':
                if (this.hasAttribute('checked')) {
                    this.radio.checked = true;
                } else {
                    this.radio.checked = false;
                }
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.radio.disabled = true;
                } else {
                    this.radio.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.radio.readOnly = true;
                } else {
                    this.radio.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.radio.required = true;
                } else {
                    this.radio.required = false;
                }
                break;
                
            case 'id':
                this.radio.id = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.radio.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal radio
     */
    get checked() {
        return this.radio.checked;
    }
    
    set checked(val) {
        this.radio.checked = val;
    }
    
    get value() {
        return this.radio.value;
    }
    
    set value(val) {
        this.radio.value = val;
    }
    
    get name() {
        return this.radio.name;
    }
    
    set name(val) {
        this.radio.name = val;
    }
    
    get disabled() {
        return this.radio.disabled;
    }
    
    set disabled(val) {
        this.radio.disabled = val;
    }
    
    get readonly() {
        return this.radio.readOnly;
    }
    
    set readonly(val) {
        this.radio.readOnly = val;
    }
    
    get required() {
        return this.radio.required;
    }
    
    set required(val) {
        this.radio.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('checked', null, this.getAttribute('checked'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
    }
}

// Register the custom element
customElements.define('ds-radio', DsRadio); 

/***/ }),

/***/ "./src/components/ds-text-input.js":
/*!*****************************************!*\
  !*** ./src/components/ds-text-input.js ***!
  \*****************************************/
/***/ (() => {

/**
 * ds-text-input - A text input component that wraps native input elements
 * Supports: text, email, password, number, tel, url, search
 */
class DsTextInput extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <input id="input" part="input" type="text">
                <slot></slot>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal input for attribute changes
        this.input = shadowRoot.querySelector('input');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['type', 'value', 'placeholder', 'disabled', 'readonly', 'required', 'name', 'id', 'aria-label'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal input
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'type':
                this.input.type = newValue || 'text';
                break;
                
            case 'value':
                this.input.value = newValue || '';
                break;
                
            case 'placeholder':
                this.input.placeholder = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.input.disabled = true;
                } else {
                    this.input.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.input.readOnly = true;
                } else {
                    this.input.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.input.required = true;
                } else {
                    this.input.required = false;
                }
                break;
                
            case 'name':
                this.input.name = newValue || '';
                break;
                
            case 'id':
                this.input.id = newValue || '';
                break;
                
            case 'aria-label':
                this.input.setAttribute('aria-label', newValue || '');
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['input', 'change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.input.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'input' || eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal input
     */
    get value() {
        return this.input.value;
    }
    
    set value(val) {
        this.input.value = val;
    }
    
    get type() {
        return this.input.type;
    }
    
    set type(val) {
        this.input.type = val;
    }
    
    get disabled() {
        return this.input.disabled;
    }
    
    set disabled(val) {
        this.input.disabled = val;
    }
    
    get readonly() {
        return this.input.readOnly;
    }
    
    set readonly(val) {
        this.input.readOnly = val;
    }
    
    get required() {
        return this.input.required;
    }
    
    set required(val) {
        this.input.required = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('type', null, this.getAttribute('type'));
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('placeholder', null, this.getAttribute('placeholder'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
        this.attributeChangedCallback('aria-label', null, this.getAttribute('aria-label'));
    }
}

// Register the custom element
customElements.define('ds-text-input', DsTextInput); 

/***/ }),

/***/ "./src/stories/ds-fieldset.stories.js":
/*!********************************************!*\
  !*** ./src/stories/ds-fieldset.stories.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   WithCheckboxes: () => (/* binding */ WithCheckboxes),
/* harmony export */   WithFormControls: () => (/* binding */ WithFormControls),
/* harmony export */   WithRadioButtons: () => (/* binding */ WithRadioButtons),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_fieldset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-fieldset.js */ "./src/components/ds-fieldset.js");
/* harmony import */ var _components_ds_fieldset_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_fieldset_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_ds_legend_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/ds-legend.js */ "./src/components/ds-legend.js");
/* harmony import */ var _components_ds_legend_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_components_ds_legend_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/ds-text-input.js */ "./src/components/ds-text-input.js");
/* harmony import */ var _components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_components_ds_text_input_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_ds_radio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/ds-radio.js */ "./src/components/ds-radio.js");
/* harmony import */ var _components_ds_radio_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_components_ds_radio_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ds-checkbox.js */ "./src/components/ds-checkbox.js");
/* harmony import */ var _components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_components_ds_checkbox_js__WEBPACK_IMPORTED_MODULE_4__);






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-fieldset',
  component: 'ds-fieldset',
  parameters: {
    docs: {
      description: {
        component: 'A fieldset component that wraps native fieldset elements for grouping related form controls.'
      }
    }
  },
  argTypes: {
    content: {
      control: 'text',
      description: 'The content inside the fieldset'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-fieldset');
  
  // Set content
  element.innerHTML = args.content || '<ds-legend>Fieldset Legend</ds-legend>';
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  content: '<ds-legend>Personal Information</ds-legend>'
};

// Fieldset with Form Controls Example
const WithFormControls = () => {
  const fieldset = document.createElement('ds-fieldset');
  
  const legend = document.createElement('ds-legend');
  legend.innerHTML = 'Contact Information';
  fieldset.appendChild(legend);
  
  const nameInput = document.createElement('ds-text-input');
  nameInput.setAttribute('type', 'text');
  nameInput.setAttribute('placeholder', 'Enter your name');
  nameInput.setAttribute('name', 'name');
  
  const emailInput = document.createElement('ds-text-input');
  emailInput.setAttribute('type', 'email');
  emailInput.setAttribute('placeholder', 'Enter your email');
  emailInput.setAttribute('name', 'email');
  
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 16px;';
  container.appendChild(nameInput);
  container.appendChild(emailInput);
  
  fieldset.appendChild(container);
  
  return fieldset;
};

// Fieldset with Radio Buttons Example
const WithRadioButtons = () => {
  const fieldset = document.createElement('ds-fieldset');
  
  const legend = document.createElement('ds-legend');
  legend.innerHTML = 'Select your preferred contact method';
  fieldset.appendChild(legend);
  
  const radio1 = document.createElement('ds-radio');
  radio1.setAttribute('name', 'contact-method');
  radio1.setAttribute('value', 'email');
  radio1.innerHTML = 'Email';
  
  const radio2 = document.createElement('ds-radio');
  radio2.setAttribute('name', 'contact-method');
  radio2.setAttribute('value', 'phone');
  radio2.setAttribute('checked', '');
  radio2.innerHTML = 'Phone';
  
  const radio3 = document.createElement('ds-radio');
  radio3.setAttribute('name', 'contact-method');
  radio3.setAttribute('value', 'mail');
  radio3.innerHTML = 'Mail';
  
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  container.appendChild(radio1);
  container.appendChild(radio2);
  container.appendChild(radio3);
  
  fieldset.appendChild(container);
  
  return fieldset;
};

// Fieldset with Checkboxes Example
const WithCheckboxes = () => {
  const fieldset = document.createElement('ds-fieldset');
  
  const legend = document.createElement('ds-legend');
  legend.innerHTML = 'Select your interests';
  fieldset.appendChild(legend);
  
  const checkbox1 = document.createElement('ds-checkbox');
  checkbox1.setAttribute('name', 'interests');
  checkbox1.setAttribute('value', 'technology');
  checkbox1.innerHTML = 'Technology';
  
  const checkbox2 = document.createElement('ds-checkbox');
  checkbox2.setAttribute('name', 'interests');
  checkbox2.setAttribute('value', 'sports');
  checkbox2.setAttribute('checked', '');
  checkbox2.innerHTML = 'Sports';
  
  const checkbox3 = document.createElement('ds-checkbox');
  checkbox3.setAttribute('name', 'interests');
  checkbox3.setAttribute('value', 'music');
  checkbox3.innerHTML = 'Music';
  
  const checkbox4 = document.createElement('ds-checkbox');
  checkbox4.setAttribute('name', 'interests');
  checkbox4.setAttribute('value', 'travel');
  checkbox4.innerHTML = 'Travel';
  
  const container = document.createElement('div');
  container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
  container.appendChild(checkbox1);
  container.appendChild(checkbox2);
  container.appendChild(checkbox3);
  container.appendChild(checkbox4);
  
  fieldset.appendChild(container);
  
  return fieldset;
}; ;const __namedExportsOrder = ["Default","WithFormControls","WithRadioButtons","WithCheckboxes"];

/***/ })

});
//# sourceMappingURL=stories-ds-fieldset-stories.d5ef2f1583580fbf5f69.hot-update.js.map