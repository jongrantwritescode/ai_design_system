(self["webpackChunkai_design_system"] = self["webpackChunkai_design_system"] || []).push([["stories-ds-textarea-stories"],{

/***/ "./src/components/ds-textarea.js":
/*!***************************************!*\
  !*** ./src/components/ds-textarea.js ***!
  \***************************************/
/***/ (() => {

/**
 * ds-textarea - A textarea component that wraps native textarea elements
 */
class DsTextarea extends HTMLElement {
    constructor() {
        super();
        
        // Attach shadow root with open mode for experimentation
        const shadowRoot = this.attachShadow({ mode: 'open' });
        
        // Define the template with internal markup and styles
        const template = document.createElement('template');
        template.innerHTML = `
            <style>
                @import url('/src/design_system/styles.css');
                
                :host {
                    display: block;
                }
                
                .wrapper {
                    width: 100%;
                }
            </style>
            <div class="wrapper">
                <textarea id="textarea" part="textarea">
                    <slot></slot>
                </textarea>
            </div>
        `;
        
        // Append the template's content to the shadow root
        shadowRoot.appendChild(template.content.cloneNode(true));
        
        // Store reference to the internal textarea for attribute changes
        this.textarea = shadowRoot.querySelector('textarea');
        
        // Set up event listeners
        this.setupEventListeners();
    }
    
    /**
     * Define which attributes should trigger attributeChangedCallback
     */
    static get observedAttributes() {
        return ['value', 'placeholder', 'rows', 'cols', 'disabled', 'readonly', 'required', 'name', 'id'];
    }
    
    /**
     * React to attribute changes and apply corresponding properties to the internal textarea
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue) return; // No change
        
        switch (name) {
            case 'value':
                this.textarea.value = newValue || '';
                break;
                
            case 'placeholder':
                this.textarea.placeholder = newValue || '';
                break;
                
            case 'rows':
                this.textarea.rows = newValue || '';
                break;
                
            case 'cols':
                this.textarea.cols = newValue || '';
                break;
                
            case 'disabled':
                if (this.hasAttribute('disabled')) {
                    this.textarea.disabled = true;
                } else {
                    this.textarea.disabled = false;
                }
                break;
                
            case 'readonly':
                if (this.hasAttribute('readonly')) {
                    this.textarea.readOnly = true;
                } else {
                    this.textarea.readOnly = false;
                }
                break;
                
            case 'required':
                if (this.hasAttribute('required')) {
                    this.textarea.required = true;
                } else {
                    this.textarea.required = false;
                }
                break;
                
            case 'name':
                this.textarea.name = newValue || '';
                break;
                
            case 'id':
                this.textarea.id = newValue || '';
                break;
        }
    }
    
    /**
     * Set up event listeners to re-dispatch events from the host element
     */
    setupEventListeners() {
        const events = ['input', 'change', 'focus', 'blur'];
        
        events.forEach(eventType => {
            this.textarea.addEventListener(eventType, (event) => {
                // Create a new event to dispatch from the host
                const newEvent = new Event(eventType, {
                    bubbles: true,
                    composed: true,
                    cancelable: true
                });
                
                // Copy relevant properties
                if (eventType === 'input' || eventType === 'change') {
                    newEvent.target = this;
                    newEvent.currentTarget = this;
                }
                
                this.dispatchEvent(newEvent);
            });
        });
    }
    
    /**
     * Property getters and setters to mirror the internal textarea
     */
    get value() {
        return this.textarea.value;
    }
    
    set value(val) {
        this.textarea.value = val;
    }
    
    get placeholder() {
        return this.textarea.placeholder;
    }
    
    set placeholder(val) {
        this.textarea.placeholder = val;
    }
    
    get rows() {
        return this.textarea.rows;
    }
    
    set rows(val) {
        this.textarea.rows = val;
    }
    
    get cols() {
        return this.textarea.cols;
    }
    
    set cols(val) {
        this.textarea.cols = val;
    }
    
    get disabled() {
        return this.textarea.disabled;
    }
    
    set disabled(val) {
        this.textarea.disabled = val;
    }
    
    get readonly() {
        return this.textarea.readOnly;
    }
    
    set readonly(val) {
        this.textarea.readOnly = val;
    }
    
    get required() {
        return this.textarea.required;
    }
    
    set required(val) {
        this.textarea.required = val;
    }
    
    get name() {
        return this.textarea.name;
    }
    
    set name(val) {
        this.textarea.name = val;
    }
    
    /**
     * Called when the element is connected to the DOM
     * Apply initial attributes
     */
    connectedCallback() {
        // Apply initial attributes
        this.attributeChangedCallback('value', null, this.getAttribute('value'));
        this.attributeChangedCallback('placeholder', null, this.getAttribute('placeholder'));
        this.attributeChangedCallback('rows', null, this.getAttribute('rows'));
        this.attributeChangedCallback('cols', null, this.getAttribute('cols'));
        this.attributeChangedCallback('disabled', null, this.getAttribute('disabled'));
        this.attributeChangedCallback('readonly', null, this.getAttribute('readonly'));
        this.attributeChangedCallback('required', null, this.getAttribute('required'));
        this.attributeChangedCallback('name', null, this.getAttribute('name'));
        this.attributeChangedCallback('id', null, this.getAttribute('id'));
    }
}

// Register the custom element
customElements.define('ds-textarea', DsTextarea); 

/***/ }),

/***/ "./src/stories/ds-textarea.stories.js":
/*!********************************************!*\
  !*** ./src/stories/ds-textarea.stories.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Disabled: () => (/* binding */ Disabled),
/* harmony export */   Large: () => (/* binding */ Large),
/* harmony export */   Readonly: () => (/* binding */ Readonly),
/* harmony export */   Required: () => (/* binding */ Required),
/* harmony export */   Small: () => (/* binding */ Small),
/* harmony export */   WithValue: () => (/* binding */ WithValue),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_ds_textarea_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/ds-textarea.js */ "./src/components/ds-textarea.js");
/* harmony import */ var _components_ds_textarea_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_components_ds_textarea_js__WEBPACK_IMPORTED_MODULE_0__);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Components/ds-textarea',
  component: 'ds-textarea',
  parameters: {
    docs: {
      description: {
        component: 'A textarea component that wraps native textarea elements with support for multi-line text input.'
      }
    }
  },
  argTypes: {
    value: {
      control: 'text',
      description: 'The current value of the textarea'
    },
    placeholder: {
      control: 'text',
      description: 'Placeholder text for the textarea'
    },
    rows: {
      control: 'number',
      description: 'Number of visible rows'
    },
    cols: {
      control: 'number',
      description: 'Number of visible columns'
    },
    disabled: {
      control: 'boolean',
      description: 'Whether the textarea is disabled'
    },
    readonly: {
      control: 'boolean',
      description: 'Whether the textarea is read-only'
    },
    required: {
      control: 'boolean',
      description: 'Whether the textarea is required'
    },
    name: {
      control: 'text',
      description: 'The name attribute for form submission'
    },
    id: {
      control: 'text',
      description: 'The unique identifier for the textarea'
    }
  }
});

const Template = (args) => {
  const element = document.createElement('ds-textarea');
  
  // Set attributes
  if (args.value) {
    element.setAttribute('value', args.value);
  }
  if (args.placeholder) {
    element.setAttribute('placeholder', args.placeholder);
  }
  if (args.rows) {
    element.setAttribute('rows', args.rows);
  }
  if (args.cols) {
    element.setAttribute('cols', args.cols);
  }
  if (args.disabled) {
    element.setAttribute('disabled', '');
  }
  if (args.readonly) {
    element.setAttribute('readonly', '');
  }
  if (args.required) {
    element.setAttribute('required', '');
  }
  if (args.name) {
    element.setAttribute('name', args.name);
  }
  if (args.id) {
    element.setAttribute('id', args.id);
  }
  
  return element;
};

const Default = Template.bind({});
Default.args = {
  placeholder: 'Enter your message here...',
  rows: 4,
  name: 'message'
};

const WithValue = Template.bind({});
WithValue.args = {
  value: 'This is a pre-filled textarea with some content that demonstrates how the component handles existing text.',
  rows: 4,
  name: 'message'
};

const Large = Template.bind({});
Large.args = {
  placeholder: 'Enter a longer message...',
  rows: 8,
  cols: 50,
  name: 'long-message'
};

const Small = Template.bind({});
Small.args = {
  placeholder: 'Short message...',
  rows: 2,
  cols: 30,
  name: 'short-message'
};

const Disabled = Template.bind({});
Disabled.args = {
  value: 'This textarea is disabled and cannot be edited.',
  rows: 4,
  disabled: true,
  name: 'disabled-message'
};

const Readonly = Template.bind({});
Readonly.args = {
  value: 'This textarea is read-only and cannot be edited.',
  rows: 4,
  readonly: true,
  name: 'readonly-message'
};

const Required = Template.bind({});
Required.args = {
  placeholder: 'This field is required...',
  rows: 4,
  required: true,
  name: 'required-message'
}; ;const __namedExportsOrder = ["Default","WithValue","Large","Small","Disabled","Readonly","Required"];

/***/ })

}]);
//# sourceMappingURL=stories-ds-textarea-stories.iframe.bundle.js.map